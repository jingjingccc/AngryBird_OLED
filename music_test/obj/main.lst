                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.2 #14362 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _blanck_table
                                     12 	.globl _duration_table
                                     13 	.globl _music_table
                                     14 	.globl _main
                                     15 	.globl _T0_isr
                                     16 	.globl _OLED_SetCursor
                                     17 	.globl _OLED_DisplayString
                                     18 	.globl _OLED_Init
                                     19 	.globl _Delay_La
                                     20 	.globl _Delay_So
                                     21 	.globl _Delay_Fa
                                     22 	.globl _Delay_Mi
                                     23 	.globl _Delay_Re
                                     24 	.globl _Delay_Do
                                     25 	.globl _CY
                                     26 	.globl _AC
                                     27 	.globl _F0
                                     28 	.globl _RS1
                                     29 	.globl _RS0
                                     30 	.globl _OV
                                     31 	.globl _F1
                                     32 	.globl _P
                                     33 	.globl _PS
                                     34 	.globl _PT1
                                     35 	.globl _PX1
                                     36 	.globl _PT0
                                     37 	.globl _PX0
                                     38 	.globl _RD
                                     39 	.globl _WR
                                     40 	.globl _T1
                                     41 	.globl _T0
                                     42 	.globl _INT1
                                     43 	.globl _INT0
                                     44 	.globl _TXD
                                     45 	.globl _RXD
                                     46 	.globl _P3_7
                                     47 	.globl _P3_6
                                     48 	.globl _P3_5
                                     49 	.globl _P3_4
                                     50 	.globl _P3_3
                                     51 	.globl _P3_2
                                     52 	.globl _P3_1
                                     53 	.globl _P3_0
                                     54 	.globl _EA
                                     55 	.globl _ES
                                     56 	.globl _ET1
                                     57 	.globl _EX1
                                     58 	.globl _ET0
                                     59 	.globl _EX0
                                     60 	.globl _P2_7
                                     61 	.globl _P2_6
                                     62 	.globl _P2_5
                                     63 	.globl _P2_4
                                     64 	.globl _P2_3
                                     65 	.globl _P2_2
                                     66 	.globl _P2_1
                                     67 	.globl _P2_0
                                     68 	.globl _SM0
                                     69 	.globl _SM1
                                     70 	.globl _SM2
                                     71 	.globl _REN
                                     72 	.globl _TB8
                                     73 	.globl _RB8
                                     74 	.globl _TI
                                     75 	.globl _RI
                                     76 	.globl _P1_7
                                     77 	.globl _P1_6
                                     78 	.globl _P1_5
                                     79 	.globl _P1_4
                                     80 	.globl _P1_3
                                     81 	.globl _P1_2
                                     82 	.globl _P1_1
                                     83 	.globl _P1_0
                                     84 	.globl _TF1
                                     85 	.globl _TR1
                                     86 	.globl _TF0
                                     87 	.globl _TR0
                                     88 	.globl _IE1
                                     89 	.globl _IT1
                                     90 	.globl _IE0
                                     91 	.globl _IT0
                                     92 	.globl _P0_7
                                     93 	.globl _P0_6
                                     94 	.globl _P0_5
                                     95 	.globl _P0_4
                                     96 	.globl _P0_3
                                     97 	.globl _P0_2
                                     98 	.globl _P0_1
                                     99 	.globl _P0_0
                                    100 	.globl _B
                                    101 	.globl _ACC
                                    102 	.globl _PSW
                                    103 	.globl _IP
                                    104 	.globl _P3
                                    105 	.globl _IE
                                    106 	.globl _P2
                                    107 	.globl _SBUF
                                    108 	.globl _SCON
                                    109 	.globl _P1
                                    110 	.globl _TH1
                                    111 	.globl _TH0
                                    112 	.globl _TL1
                                    113 	.globl _TL0
                                    114 	.globl _TMOD
                                    115 	.globl _TCON
                                    116 	.globl _PCON
                                    117 	.globl _DPH
                                    118 	.globl _DPL
                                    119 	.globl _SP
                                    120 	.globl _P0
                                    121 	.globl _duration_time
                                    122 	.globl _music_play_note
                                    123 	.globl _stable_but
                                    124 	.globl _scan_cnting
                                    125 	.globl _music_on
                                    126 	.globl _LookForSound
                                    127 ;--------------------------------------------------------
                                    128 ; special function registers
                                    129 ;--------------------------------------------------------
                                    130 	.area RSEG    (ABS,DATA)
      000000                        131 	.org 0x0000
                           000080   132 _P0	=	0x0080
                           000081   133 _SP	=	0x0081
                           000082   134 _DPL	=	0x0082
                           000083   135 _DPH	=	0x0083
                           000087   136 _PCON	=	0x0087
                           000088   137 _TCON	=	0x0088
                           000089   138 _TMOD	=	0x0089
                           00008A   139 _TL0	=	0x008a
                           00008B   140 _TL1	=	0x008b
                           00008C   141 _TH0	=	0x008c
                           00008D   142 _TH1	=	0x008d
                           000090   143 _P1	=	0x0090
                           000098   144 _SCON	=	0x0098
                           000099   145 _SBUF	=	0x0099
                           0000A0   146 _P2	=	0x00a0
                           0000A8   147 _IE	=	0x00a8
                           0000B0   148 _P3	=	0x00b0
                           0000B8   149 _IP	=	0x00b8
                           0000D0   150 _PSW	=	0x00d0
                           0000E0   151 _ACC	=	0x00e0
                           0000F0   152 _B	=	0x00f0
                                    153 ;--------------------------------------------------------
                                    154 ; special function bits
                                    155 ;--------------------------------------------------------
                                    156 	.area RSEG    (ABS,DATA)
      000000                        157 	.org 0x0000
                           000080   158 _P0_0	=	0x0080
                           000081   159 _P0_1	=	0x0081
                           000082   160 _P0_2	=	0x0082
                           000083   161 _P0_3	=	0x0083
                           000084   162 _P0_4	=	0x0084
                           000085   163 _P0_5	=	0x0085
                           000086   164 _P0_6	=	0x0086
                           000087   165 _P0_7	=	0x0087
                           000088   166 _IT0	=	0x0088
                           000089   167 _IE0	=	0x0089
                           00008A   168 _IT1	=	0x008a
                           00008B   169 _IE1	=	0x008b
                           00008C   170 _TR0	=	0x008c
                           00008D   171 _TF0	=	0x008d
                           00008E   172 _TR1	=	0x008e
                           00008F   173 _TF1	=	0x008f
                           000090   174 _P1_0	=	0x0090
                           000091   175 _P1_1	=	0x0091
                           000092   176 _P1_2	=	0x0092
                           000093   177 _P1_3	=	0x0093
                           000094   178 _P1_4	=	0x0094
                           000095   179 _P1_5	=	0x0095
                           000096   180 _P1_6	=	0x0096
                           000097   181 _P1_7	=	0x0097
                           000098   182 _RI	=	0x0098
                           000099   183 _TI	=	0x0099
                           00009A   184 _RB8	=	0x009a
                           00009B   185 _TB8	=	0x009b
                           00009C   186 _REN	=	0x009c
                           00009D   187 _SM2	=	0x009d
                           00009E   188 _SM1	=	0x009e
                           00009F   189 _SM0	=	0x009f
                           0000A0   190 _P2_0	=	0x00a0
                           0000A1   191 _P2_1	=	0x00a1
                           0000A2   192 _P2_2	=	0x00a2
                           0000A3   193 _P2_3	=	0x00a3
                           0000A4   194 _P2_4	=	0x00a4
                           0000A5   195 _P2_5	=	0x00a5
                           0000A6   196 _P2_6	=	0x00a6
                           0000A7   197 _P2_7	=	0x00a7
                           0000A8   198 _EX0	=	0x00a8
                           0000A9   199 _ET0	=	0x00a9
                           0000AA   200 _EX1	=	0x00aa
                           0000AB   201 _ET1	=	0x00ab
                           0000AC   202 _ES	=	0x00ac
                           0000AF   203 _EA	=	0x00af
                           0000B0   204 _P3_0	=	0x00b0
                           0000B1   205 _P3_1	=	0x00b1
                           0000B2   206 _P3_2	=	0x00b2
                           0000B3   207 _P3_3	=	0x00b3
                           0000B4   208 _P3_4	=	0x00b4
                           0000B5   209 _P3_5	=	0x00b5
                           0000B6   210 _P3_6	=	0x00b6
                           0000B7   211 _P3_7	=	0x00b7
                           0000B0   212 _RXD	=	0x00b0
                           0000B1   213 _TXD	=	0x00b1
                           0000B2   214 _INT0	=	0x00b2
                           0000B3   215 _INT1	=	0x00b3
                           0000B4   216 _T0	=	0x00b4
                           0000B5   217 _T1	=	0x00b5
                           0000B6   218 _WR	=	0x00b6
                           0000B7   219 _RD	=	0x00b7
                           0000B8   220 _PX0	=	0x00b8
                           0000B9   221 _PT0	=	0x00b9
                           0000BA   222 _PX1	=	0x00ba
                           0000BB   223 _PT1	=	0x00bb
                           0000BC   224 _PS	=	0x00bc
                           0000D0   225 _P	=	0x00d0
                           0000D1   226 _F1	=	0x00d1
                           0000D2   227 _OV	=	0x00d2
                           0000D3   228 _RS0	=	0x00d3
                           0000D4   229 _RS1	=	0x00d4
                           0000D5   230 _F0	=	0x00d5
                           0000D6   231 _AC	=	0x00d6
                           0000D7   232 _CY	=	0x00d7
                                    233 ;--------------------------------------------------------
                                    234 ; overlayable register banks
                                    235 ;--------------------------------------------------------
                                    236 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        237 	.ds 8
                                    238 ;--------------------------------------------------------
                                    239 ; overlayable bit register bank
                                    240 ;--------------------------------------------------------
                                    241 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        242 bits:
      000000                        243 	.ds 1
                           008000   244 	b0 = bits[0]
                           008100   245 	b1 = bits[1]
                           008200   246 	b2 = bits[2]
                           008300   247 	b3 = bits[3]
                           008400   248 	b4 = bits[4]
                           008500   249 	b5 = bits[5]
                           008600   250 	b6 = bits[6]
                           008700   251 	b7 = bits[7]
                                    252 ;--------------------------------------------------------
                                    253 ; internal ram data
                                    254 ;--------------------------------------------------------
                                    255 	.area DSEG    (DATA)
      000000                        256 _music_on::
      000000                        257 	.ds 2
      000002                        258 _scan_cnting::
      000002                        259 	.ds 2
      000004                        260 _stable_but::
      000004                        261 	.ds 2
      000006                        262 _music_play_note::
      000006                        263 	.ds 2
      000008                        264 _duration_time::
      000008                        265 	.ds 2
      00000A                        266 _main_a_131073_42:
      00000A                        267 	.ds 2
                                    268 ;--------------------------------------------------------
                                    269 ; overlayable items in internal ram
                                    270 ;--------------------------------------------------------
                                    271 ;--------------------------------------------------------
                                    272 ; Stack segment in internal ram
                                    273 ;--------------------------------------------------------
                                    274 	.area SSEG
      000000                        275 __start__stack:
      000000                        276 	.ds	1
                                    277 
                                    278 ;--------------------------------------------------------
                                    279 ; indirectly addressable internal ram data
                                    280 ;--------------------------------------------------------
                                    281 	.area ISEG    (DATA)
                                    282 ;--------------------------------------------------------
                                    283 ; absolute internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area IABS    (ABS,DATA)
                                    286 	.area IABS    (ABS,DATA)
                                    287 ;--------------------------------------------------------
                                    288 ; bit data
                                    289 ;--------------------------------------------------------
                                    290 	.area BSEG    (BIT)
                                    291 ;--------------------------------------------------------
                                    292 ; paged external ram data
                                    293 ;--------------------------------------------------------
                                    294 	.area PSEG    (PAG,XDATA)
                                    295 ;--------------------------------------------------------
                                    296 ; uninitialized external ram data
                                    297 ;--------------------------------------------------------
                                    298 	.area XSEG    (XDATA)
                                    299 ;--------------------------------------------------------
                                    300 ; absolute external ram data
                                    301 ;--------------------------------------------------------
                                    302 	.area XABS    (ABS,XDATA)
                                    303 ;--------------------------------------------------------
                                    304 ; initialized external ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area XISEG   (XDATA)
                                    307 	.area HOME    (CODE)
                                    308 	.area GSINIT0 (CODE)
                                    309 	.area GSINIT1 (CODE)
                                    310 	.area GSINIT2 (CODE)
                                    311 	.area GSINIT3 (CODE)
                                    312 	.area GSINIT4 (CODE)
                                    313 	.area GSINIT5 (CODE)
                                    314 	.area GSINIT  (CODE)
                                    315 	.area GSFINAL (CODE)
                                    316 	.area CSEG    (CODE)
                                    317 ;--------------------------------------------------------
                                    318 ; interrupt vector
                                    319 ;--------------------------------------------------------
                                    320 	.area HOME    (CODE)
      000000                        321 __interrupt_vect:
      000000 02r00r00         [24]  322 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  323 	reti
      000004                        324 	.ds	7
      00000B 02r00r00         [24]  325 	ljmp	_T0_isr
                                    326 ;--------------------------------------------------------
                                    327 ; global & static initialisations
                                    328 ;--------------------------------------------------------
                                    329 	.area HOME    (CODE)
                                    330 	.area GSINIT  (CODE)
                                    331 	.area GSFINAL (CODE)
                                    332 	.area GSINIT  (CODE)
                                    333 	.globl __sdcc_gsinit_startup
                                    334 	.globl __sdcc_program_startup
                                    335 	.globl __start__stack
                                    336 	.globl __mcs51_genXINIT
                                    337 	.globl __mcs51_genXRAMCLEAR
                                    338 	.globl __mcs51_genRAMCLEAR
                                    339 ;	./src/main.c:9: int music_on = 0, scan_cnting = 0, stable_but = 0;
      000000 E4               [12]  340 	clr	a
      000001 F5*00            [12]  341 	mov	_music_on,a
      000003 F5*01            [12]  342 	mov	(_music_on + 1),a
                                    343 ;	./src/main.c:9: int music_play_note = 0, duration_time = 0;
      000005 F5*02            [12]  344 	mov	_scan_cnting,a
      000007 F5*03            [12]  345 	mov	(_scan_cnting + 1),a
                                    346 ;	./src/main.c:9: int music_on = 0, scan_cnting = 0, stable_but = 0;
      000009 F5*04            [12]  347 	mov	_stable_but,a
      00000B F5*05            [12]  348 	mov	(_stable_but + 1),a
                                    349 ;	./src/main.c:10: int music_play_note = 0, duration_time = 0;
      00000D F5*06            [12]  350 	mov	_music_play_note,a
      00000F F5*07            [12]  351 	mov	(_music_play_note + 1),a
                                    352 ;	./src/main.c:10: 
      000011 F5*08            [12]  353 	mov	_duration_time,a
      000013 F5*09            [12]  354 	mov	(_duration_time + 1),a
                                    355 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  356 	ljmp	__sdcc_program_startup
                                    357 ;--------------------------------------------------------
                                    358 ; Home
                                    359 ;--------------------------------------------------------
                                    360 	.area HOME    (CODE)
                                    361 	.area HOME    (CODE)
      00000E                        362 __sdcc_program_startup:
      00000E 02r00rF2         [24]  363 	ljmp	_main
                                    364 ;	return from main will return to caller
                                    365 ;--------------------------------------------------------
                                    366 ; code
                                    367 ;--------------------------------------------------------
                                    368 	.area CSEG    (CODE)
                                    369 ;------------------------------------------------------------
                                    370 ;Allocation info for local variables in function 'T0_isr'
                                    371 ;------------------------------------------------------------
                                    372 ;	./src/main.c:27: void T0_isr(void) __interrupt(1) // Interrupt routine w/ priority 1
                                    373 ;	-----------------------------------------
                                    374 ;	 function T0_isr
                                    375 ;	-----------------------------------------
      000000                        376 _T0_isr:
                           000007   377 	ar7 = 0x07
                           000006   378 	ar6 = 0x06
                           000005   379 	ar5 = 0x05
                           000004   380 	ar4 = 0x04
                           000003   381 	ar3 = 0x03
                           000002   382 	ar2 = 0x02
                           000001   383 	ar1 = 0x01
                           000000   384 	ar0 = 0x00
      000000 C0*00            [24]  385 	push	bits
      000002 C0 E0            [24]  386 	push	acc
      000004 C0 F0            [24]  387 	push	b
      000006 C0 82            [24]  388 	push	dpl
      000008 C0 83            [24]  389 	push	dph
      00000A C0 07            [24]  390 	push	(0+7)
      00000C C0 06            [24]  391 	push	(0+6)
      00000E C0 05            [24]  392 	push	(0+5)
      000010 C0 04            [24]  393 	push	(0+4)
      000012 C0 03            [24]  394 	push	(0+3)
      000014 C0 02            [24]  395 	push	(0+2)
      000016 C0 01            [24]  396 	push	(0+1)
      000018 C0 00            [24]  397 	push	(0+0)
      00001A C0 D0            [24]  398 	push	psw
      00001C 75 D0 00         [24]  399 	mov	psw,#0x00
                                    400 ;	./src/main.c:30: TH0 = (65536 - 1000) / 256; // Reset higher 8 bits of Timer 0
      00001F 75 8C FC         [24]  401 	mov	_TH0,#0xfc
                                    402 ;	./src/main.c:31: TL0 = (65536 - 1000) % 256; // Reset lower 8 bits of Timer 0
      000022 75 8A 18         [24]  403 	mov	_TL0,#0x18
                                    404 ;	./src/main.c:33: duration_time++;
      000025 05*08            [12]  405 	inc	_duration_time
      000027 E4               [12]  406 	clr	a
      000028 B5*08 02         [24]  407 	cjne	a,_duration_time,00134$
      00002B 05*09            [12]  408 	inc	(_duration_time + 1)
      00002D                        409 00134$:
                                    410 ;	./src/main.c:35: while (duration_time < duration_table[music_play_note])
      00002D                        411 00101$:
      00002D E5*06            [12]  412 	mov	a,_music_play_note
      00002F 24r19            [12]  413 	add	a,#_duration_table
      000031 F5 82            [12]  414 	mov	dpl,a
      000033 E5*07            [12]  415 	mov	a,(_music_play_note + 1)
      000035 34s00            [12]  416 	addc	a,#(_duration_table >> 8)
      000037 F5 83            [12]  417 	mov	dph,a
      000039 E4               [12]  418 	clr	a
      00003A 93               [24]  419 	movc	a,@a+dptr
      00003B FE               [12]  420 	mov	r6,a
      00003C 7F 00            [12]  421 	mov	r7,#0x00
      00003E C3               [12]  422 	clr	c
      00003F E5*08            [12]  423 	mov	a,_duration_time
      000041 9E               [12]  424 	subb	a,r6
      000042 E5*09            [12]  425 	mov	a,(_duration_time + 1)
      000044 64 80            [12]  426 	xrl	a,#0x80
      000046 8F F0            [24]  427 	mov	b,r7
      000048 63 F0 80         [24]  428 	xrl	b,#0x80
      00004B 95 F0            [12]  429 	subb	a,b
      00004D 50 3E            [24]  430 	jnc	00103$
                                    431 ;	./src/main.c:37: duration_time++;
      00004F 05*08            [12]  432 	inc	_duration_time
      000051 E4               [12]  433 	clr	a
      000052 B5*08 02         [24]  434 	cjne	a,_duration_time,00136$
      000055 05*09            [12]  435 	inc	(_duration_time + 1)
      000057                        436 00136$:
                                    437 ;	./src/main.c:38: P3_7 = 1;
                                    438 ;	assignBit
      000057 D2 B7            [12]  439 	setb	_P3_7
                                    440 ;	./src/main.c:39: LookForSound(music_table[music_play_note]);
      000059 E5*06            [12]  441 	mov	a,_music_play_note
      00005B 24r00            [12]  442 	add	a,#_music_table
      00005D F5 82            [12]  443 	mov	dpl,a
      00005F E5*07            [12]  444 	mov	a,(_music_play_note + 1)
      000061 34s00            [12]  445 	addc	a,#(_music_table >> 8)
      000063 F5 83            [12]  446 	mov	dph,a
      000065 E4               [12]  447 	clr	a
      000066 93               [24]  448 	movc	a,@a+dptr
      000067 FD               [12]  449 	mov	r5,a
      000068 7C 00            [12]  450 	mov	r4,#0x00
      00006A 8D 82            [24]  451 	mov	dpl,r5
      00006C 8C 83            [24]  452 	mov	dph,r4
      00006E 12r02r2B         [24]  453 	lcall	_LookForSound
                                    454 ;	./src/main.c:40: P3_7 = 0;
                                    455 ;	assignBit
      000071 C2 B7            [12]  456 	clr	_P3_7
                                    457 ;	./src/main.c:41: LookForSound(music_table[music_play_note]);
      000073 E5*06            [12]  458 	mov	a,_music_play_note
      000075 24r00            [12]  459 	add	a,#_music_table
      000077 F5 82            [12]  460 	mov	dpl,a
      000079 E5*07            [12]  461 	mov	a,(_music_play_note + 1)
      00007B 34s00            [12]  462 	addc	a,#(_music_table >> 8)
      00007D F5 83            [12]  463 	mov	dph,a
      00007F E4               [12]  464 	clr	a
      000080 93               [24]  465 	movc	a,@a+dptr
      000081 FD               [12]  466 	mov	r5,a
      000082 7C 00            [12]  467 	mov	r4,#0x00
      000084 8D 82            [24]  468 	mov	dpl,r5
      000086 8C 83            [24]  469 	mov	dph,r4
      000088 12r02r2B         [24]  470 	lcall	_LookForSound
      00008B 80 A0            [24]  471 	sjmp	00101$
      00008D                        472 00103$:
                                    473 ;	./src/main.c:43: if (duration_time >= (duration_table[music_play_note] + blanck_table[music_play_note]))
      00008D E5*06            [12]  474 	mov	a,_music_play_note
      00008F 24r32            [12]  475 	add	a,#_blanck_table
      000091 F5 82            [12]  476 	mov	dpl,a
      000093 E5*07            [12]  477 	mov	a,(_music_play_note + 1)
      000095 34s00            [12]  478 	addc	a,#(_blanck_table >> 8)
      000097 F5 83            [12]  479 	mov	dph,a
      000099 E4               [12]  480 	clr	a
      00009A 93               [24]  481 	movc	a,@a+dptr
      00009B 7C 00            [12]  482 	mov	r4,#0x00
      00009D 2E               [12]  483 	add	a,r6
      00009E FE               [12]  484 	mov	r6,a
      00009F EC               [12]  485 	mov	a,r4
      0000A0 3F               [12]  486 	addc	a,r7
      0000A1 FF               [12]  487 	mov	r7,a
      0000A2 C3               [12]  488 	clr	c
      0000A3 E5*08            [12]  489 	mov	a,_duration_time
      0000A5 9E               [12]  490 	subb	a,r6
      0000A6 E5*09            [12]  491 	mov	a,(_duration_time + 1)
      0000A8 64 80            [12]  492 	xrl	a,#0x80
      0000AA 8F F0            [24]  493 	mov	b,r7
      0000AC 63 F0 80         [24]  494 	xrl	b,#0x80
      0000AF 95 F0            [12]  495 	subb	a,b
      0000B1 40 22            [24]  496 	jc	00108$
                                    497 ;	./src/main.c:45: duration_time = 0;
      0000B3 E4               [12]  498 	clr	a
      0000B4 F5*08            [12]  499 	mov	_duration_time,a
      0000B6 F5*09            [12]  500 	mov	(_duration_time + 1),a
                                    501 ;	./src/main.c:46: music_play_note++;
      0000B8 05*06            [12]  502 	inc	_music_play_note
      0000BA B5*06 02         [24]  503 	cjne	a,_music_play_note,00138$
      0000BD 05*07            [12]  504 	inc	(_music_play_note + 1)
      0000BF                        505 00138$:
                                    506 ;	./src/main.c:48: if (music_play_note >= NOTE_NUM)
      0000BF C3               [12]  507 	clr	c
      0000C0 E5*06            [12]  508 	mov	a,_music_play_note
      0000C2 94 19            [12]  509 	subb	a,#0x19
      0000C4 E5*07            [12]  510 	mov	a,(_music_play_note + 1)
      0000C6 64 80            [12]  511 	xrl	a,#0x80
      0000C8 94 80            [12]  512 	subb	a,#0x80
      0000CA 40 09            [24]  513 	jc	00108$
                                    514 ;	./src/main.c:50: music_on = 0;
      0000CC E4               [12]  515 	clr	a
      0000CD F5*00            [12]  516 	mov	_music_on,a
      0000CF F5*01            [12]  517 	mov	(_music_on + 1),a
                                    518 ;	./src/main.c:51: music_play_note = 0;
      0000D1 F5*06            [12]  519 	mov	_music_play_note,a
      0000D3 F5*07            [12]  520 	mov	(_music_play_note + 1),a
      0000D5                        521 00108$:
                                    522 ;	./src/main.c:54: }
      0000D5 D0 D0            [24]  523 	pop	psw
      0000D7 D0 00            [24]  524 	pop	(0+0)
      0000D9 D0 01            [24]  525 	pop	(0+1)
      0000DB D0 02            [24]  526 	pop	(0+2)
      0000DD D0 03            [24]  527 	pop	(0+3)
      0000DF D0 04            [24]  528 	pop	(0+4)
      0000E1 D0 05            [24]  529 	pop	(0+5)
      0000E3 D0 06            [24]  530 	pop	(0+6)
      0000E5 D0 07            [24]  531 	pop	(0+7)
      0000E7 D0 83            [24]  532 	pop	dph
      0000E9 D0 82            [24]  533 	pop	dpl
      0000EB D0 F0            [24]  534 	pop	b
      0000ED D0 E0            [24]  535 	pop	acc
      0000EF D0*00            [24]  536 	pop	bits
      0000F1 32               [24]  537 	reti
                                    538 ;------------------------------------------------------------
                                    539 ;Allocation info for local variables in function 'main'
                                    540 ;------------------------------------------------------------
                                    541 ;a                         Allocated with name '_main_a_131073_42'
                                    542 ;------------------------------------------------------------
                                    543 ;	./src/main.c:59: int main()
                                    544 ;	-----------------------------------------
                                    545 ;	 function main
                                    546 ;	-----------------------------------------
      0000F2                        547 _main:
                                    548 ;	./src/main.c:62: TMOD = 0x01;                // Set Timer 1 to mode 0 & Timer 0 mode 1. (16-bit timer)
      0000F2 75 89 01         [24]  549 	mov	_TMOD,#0x01
                                    550 ;	./src/main.c:63: TH0 = (65536 - 1000) / 256; // Load initial higher 8 bits into Timer 0
      0000F5 75 8C FC         [24]  551 	mov	_TH0,#0xfc
                                    552 ;	./src/main.c:64: TL0 = (65536 - 1000) % 256; // Load initial lower 8 bits into Timer 0
      0000F8 75 8A 18         [24]  553 	mov	_TL0,#0x18
                                    554 ;	./src/main.c:65: ET0 = 1;                    // Enable Timer 0 interrupt
                                    555 ;	assignBit
      0000FB D2 A9            [12]  556 	setb	_ET0
                                    557 ;	./src/main.c:66: EA = 1;                     // Enable all interrupt
                                    558 ;	assignBit
      0000FD D2 AF            [12]  559 	setb	_EA
                                    560 ;	./src/main.c:67: TR0 = 0;                    // Start Timer 0
                                    561 ;	assignBit
      0000FF C2 8C            [12]  562 	clr	_TR0
                                    563 ;	./src/main.c:70: SDA = 1;
                                    564 ;	assignBit
      000101 D2 81            [12]  565 	setb	_P0_1
                                    566 ;	./src/main.c:71: SCL = 1;
                                    567 ;	assignBit
      000103 D2 80            [12]  568 	setb	_P0_0
                                    569 ;	./src/main.c:73: OLED_Init();
      000105 12r00r00         [24]  570 	lcall	_OLED_Init
                                    571 ;	./src/main.c:74: OLED_SetCursor(text_row, text_col);
      000108 75*00 28         [24]  572 	mov	_OLED_SetCursor_PARM_2,#0x28
      00010B 75 82 03         [24]  573 	mov	dpl,#0x03
      00010E 12r00r00         [24]  574 	lcall	_OLED_SetCursor
                                    575 ;	./src/main.c:75: OLED_DisplayString("music off!");
      000111 90r00r4B         [24]  576 	mov	dptr,#___str_0
      000114 75 F0 80         [24]  577 	mov	b,#0x80
      000117 12r00r00         [24]  578 	lcall	_OLED_DisplayString
                                    579 ;	./src/main.c:77: while (1)
      00011A                        580 00125$:
                                    581 ;	./src/main.c:80: if (but == 0 && stable_but == 1)
      00011A 20 A2 39         [24]  582 	jb	_P2_2,00114$
      00011D 74 01            [12]  583 	mov	a,#0x01
      00011F B5*04 06         [24]  584 	cjne	a,_stable_but,00208$
      000122 14               [12]  585 	dec	a
      000123 B5*05 02         [24]  586 	cjne	a,(_stable_but + 1),00208$
      000126 80 02            [24]  587 	sjmp	00209$
      000128                        588 00208$:
      000128 80 2C            [24]  589 	sjmp	00114$
      00012A                        590 00209$:
                                    591 ;	./src/main.c:82: if (scan_cnting < scan_cnt)
      00012A C3               [12]  592 	clr	c
      00012B E5*02            [12]  593 	mov	a,_scan_cnting
      00012D 94 09            [12]  594 	subb	a,#0x09
      00012F E5*03            [12]  595 	mov	a,(_scan_cnting + 1)
      000131 64 80            [12]  596 	xrl	a,#0x80
      000133 94 80            [12]  597 	subb	a,#0x80
      000135 50 57            [24]  598 	jnc	00115$
                                    599 ;	./src/main.c:84: scan_cnting++;
      000137 05*02            [12]  600 	inc	_scan_cnting
      000139 E4               [12]  601 	clr	a
      00013A B5*02 02         [24]  602 	cjne	a,_scan_cnting,00211$
      00013D 05*03            [12]  603 	inc	(_scan_cnting + 1)
      00013F                        604 00211$:
                                    605 ;	./src/main.c:85: if (scan_cnting == scan_cnt)
      00013F 74 09            [12]  606 	mov	a,#0x09
      000141 B5*02 06         [24]  607 	cjne	a,_scan_cnting,00212$
      000144 E4               [12]  608 	clr	a
      000145 B5*03 02         [24]  609 	cjne	a,(_scan_cnting + 1),00212$
      000148 80 02            [24]  610 	sjmp	00213$
      00014A                        611 00212$:
      00014A 80 42            [24]  612 	sjmp	00115$
      00014C                        613 00213$:
                                    614 ;	./src/main.c:87: music_on ^= 1;
      00014C 63*00 01         [24]  615 	xrl	_music_on,#0x01
                                    616 ;	./src/main.c:88: stable_but = 0;
      00014F E4               [12]  617 	clr	a
      000150 F5*04            [12]  618 	mov	_stable_but,a
      000152 F5*05            [12]  619 	mov	(_stable_but + 1),a
      000154 80 38            [24]  620 	sjmp	00115$
      000156                        621 00114$:
                                    622 ;	./src/main.c:92: else if (but == 1 && stable_but == 0)
      000156 30 A2 30         [24]  623 	jnb	_P2_2,00110$
      000159 E5*04            [12]  624 	mov	a,_stable_but
      00015B 45*05            [12]  625 	orl	a,(_stable_but + 1)
      00015D 70 2A            [24]  626 	jnz	00110$
                                    627 ;	./src/main.c:94: if (scan_cnting < scan_cnt)
      00015F C3               [12]  628 	clr	c
      000160 E5*02            [12]  629 	mov	a,_scan_cnting
      000162 94 09            [12]  630 	subb	a,#0x09
      000164 E5*03            [12]  631 	mov	a,(_scan_cnting + 1)
      000166 64 80            [12]  632 	xrl	a,#0x80
      000168 94 80            [12]  633 	subb	a,#0x80
      00016A 50 22            [24]  634 	jnc	00115$
                                    635 ;	./src/main.c:96: scan_cnting++;
      00016C 05*02            [12]  636 	inc	_scan_cnting
      00016E E4               [12]  637 	clr	a
      00016F B5*02 02         [24]  638 	cjne	a,_scan_cnting,00217$
      000172 05*03            [12]  639 	inc	(_scan_cnting + 1)
      000174                        640 00217$:
                                    641 ;	./src/main.c:97: if (scan_cnting == scan_cnt)
      000174 74 09            [12]  642 	mov	a,#0x09
      000176 B5*02 06         [24]  643 	cjne	a,_scan_cnting,00218$
      000179 E4               [12]  644 	clr	a
      00017A B5*03 02         [24]  645 	cjne	a,(_scan_cnting + 1),00218$
      00017D 80 02            [24]  646 	sjmp	00219$
      00017F                        647 00218$:
      00017F 80 0D            [24]  648 	sjmp	00115$
      000181                        649 00219$:
                                    650 ;	./src/main.c:98: stable_but = 1;
      000181 75*04 01         [24]  651 	mov	_stable_but,#0x01
      000184 75*05 00         [24]  652 	mov	(_stable_but + 1),#0x00
      000187 80 05            [24]  653 	sjmp	00115$
      000189                        654 00110$:
                                    655 ;	./src/main.c:102: scan_cnting = 0;
      000189 E4               [12]  656 	clr	a
      00018A F5*02            [12]  657 	mov	_scan_cnting,a
      00018C F5*03            [12]  658 	mov	(_scan_cnting + 1),a
      00018E                        659 00115$:
                                    660 ;	./src/main.c:104: OLED_SetCursor(5, text_col);
      00018E 75*00 28         [24]  661 	mov	_OLED_SetCursor_PARM_2,#0x28
      000191 75 82 05         [24]  662 	mov	dpl,#0x05
      000194 12r00r00         [24]  663 	lcall	_OLED_SetCursor
                                    664 ;	./src/main.c:106: a[0] = '0' + scan_cnting;
      000197 AF*02            [24]  665 	mov	r7,_scan_cnting
      000199 74 30            [12]  666 	mov	a,#0x30
      00019B 2F               [12]  667 	add	a,r7
      00019C F5*0A            [12]  668 	mov	_main_a_131073_42,a
                                    669 ;	./src/main.c:107: a[1] = '\0';
      00019E 75*0B 00         [24]  670 	mov	(_main_a_131073_42 + 0x0001),#0x00
                                    671 ;	./src/main.c:108: OLED_DisplayString(a);
      0001A1 90r00r0A         [24]  672 	mov	dptr,#_main_a_131073_42
      0001A4 75 F0 40         [24]  673 	mov	b,#0x40
      0001A7 12r00r00         [24]  674 	lcall	_OLED_DisplayString
                                    675 ;	./src/main.c:109: OLED_SetCursor(6, text_col);
      0001AA 75*00 28         [24]  676 	mov	_OLED_SetCursor_PARM_2,#0x28
      0001AD 75 82 06         [24]  677 	mov	dpl,#0x06
      0001B0 12r00r00         [24]  678 	lcall	_OLED_SetCursor
                                    679 ;	./src/main.c:110: a[0] = '0' + stable_but;
      0001B3 AF*04            [24]  680 	mov	r7,_stable_but
      0001B5 74 30            [12]  681 	mov	a,#0x30
      0001B7 2F               [12]  682 	add	a,r7
      0001B8 F5*0A            [12]  683 	mov	_main_a_131073_42,a
                                    684 ;	./src/main.c:111: OLED_DisplayString(a);
      0001BA 90r00r0A         [24]  685 	mov	dptr,#_main_a_131073_42
      0001BD 75 F0 40         [24]  686 	mov	b,#0x40
      0001C0 12r00r00         [24]  687 	lcall	_OLED_DisplayString
                                    688 ;	./src/main.c:114: if (music_on && TR0 == 0)
      0001C3 E5*00            [12]  689 	mov	a,_music_on
      0001C5 45*01            [12]  690 	orl	a,(_music_on + 1)
      0001C7 60 2C            [24]  691 	jz	00121$
      0001C9 20 8C 29         [24]  692 	jb	_TR0,00121$
                                    693 ;	./src/main.c:116: TR0 = 1;
                                    694 ;	assignBit
      0001CC D2 8C            [12]  695 	setb	_TR0
                                    696 ;	./src/main.c:117: OLED_SetCursor(text_row, text_col);
      0001CE 75*00 28         [24]  697 	mov	_OLED_SetCursor_PARM_2,#0x28
      0001D1 75 82 03         [24]  698 	mov	dpl,#0x03
      0001D4 12r00r00         [24]  699 	lcall	_OLED_SetCursor
                                    700 ;	./src/main.c:118: OLED_DisplayString("           ");
      0001D7 90r00r56         [24]  701 	mov	dptr,#___str_1
      0001DA 75 F0 80         [24]  702 	mov	b,#0x80
      0001DD 12r00r00         [24]  703 	lcall	_OLED_DisplayString
                                    704 ;	./src/main.c:119: OLED_SetCursor(text_row, text_col);
      0001E0 75*00 28         [24]  705 	mov	_OLED_SetCursor_PARM_2,#0x28
      0001E3 75 82 03         [24]  706 	mov	dpl,#0x03
      0001E6 12r00r00         [24]  707 	lcall	_OLED_SetCursor
                                    708 ;	./src/main.c:120: OLED_DisplayString("music on!");
      0001E9 90r00r62         [24]  709 	mov	dptr,#___str_2
      0001EC 75 F0 80         [24]  710 	mov	b,#0x80
      0001EF 12r00r00         [24]  711 	lcall	_OLED_DisplayString
      0001F2 02r01r1A         [24]  712 	ljmp	00125$
      0001F5                        713 00121$:
                                    714 ;	./src/main.c:122: else if (!music_on && TR0 == 1)
      0001F5 E5*00            [12]  715 	mov	a,_music_on
      0001F7 45*01            [12]  716 	orl	a,(_music_on + 1)
      0001F9 60 03            [24]  717 	jz	00222$
      0001FB 02r01r1A         [24]  718 	ljmp	00125$
      0001FE                        719 00222$:
                                    720 ;	./src/main.c:124: TR0 = 0;
                                    721 ;	assignBit
      0001FE 10 8C 03         [24]  722 	jbc	_TR0,00223$
      000201 02r01r1A         [24]  723 	ljmp	00125$
      000204                        724 00223$:
                                    725 ;	./src/main.c:125: OLED_SetCursor(text_row, text_col);
      000204 75*00 28         [24]  726 	mov	_OLED_SetCursor_PARM_2,#0x28
      000207 75 82 03         [24]  727 	mov	dpl,#0x03
      00020A 12r00r00         [24]  728 	lcall	_OLED_SetCursor
                                    729 ;	./src/main.c:126: OLED_DisplayString("           ");
      00020D 90r00r56         [24]  730 	mov	dptr,#___str_1
      000210 75 F0 80         [24]  731 	mov	b,#0x80
      000213 12r00r00         [24]  732 	lcall	_OLED_DisplayString
                                    733 ;	./src/main.c:127: OLED_SetCursor(text_row, text_col);
      000216 75*00 28         [24]  734 	mov	_OLED_SetCursor_PARM_2,#0x28
      000219 75 82 03         [24]  735 	mov	dpl,#0x03
      00021C 12r00r00         [24]  736 	lcall	_OLED_SetCursor
                                    737 ;	./src/main.c:128: OLED_DisplayString("music off!");
      00021F 90r00r4B         [24]  738 	mov	dptr,#___str_0
      000222 75 F0 80         [24]  739 	mov	b,#0x80
      000225 12r00r00         [24]  740 	lcall	_OLED_DisplayString
                                    741 ;	./src/main.c:131: }
      000228 02r01r1A         [24]  742 	ljmp	00125$
                                    743 ;------------------------------------------------------------
                                    744 ;Allocation info for local variables in function 'LookForSound'
                                    745 ;------------------------------------------------------------
                                    746 ;now                       Allocated to registers r6 r7 
                                    747 ;------------------------------------------------------------
                                    748 ;	./src/main.c:133: void LookForSound(int now)
                                    749 ;	-----------------------------------------
                                    750 ;	 function LookForSound
                                    751 ;	-----------------------------------------
      00022B                        752 _LookForSound:
      00022B AE 82            [24]  753 	mov	r6,dpl
      00022D AF 83            [24]  754 	mov	r7,dph
                                    755 ;	./src/main.c:135: switch (now)
      00022F BE 01 05         [24]  756 	cjne	r6,#0x01,00147$
      000232 BF 00 02         [24]  757 	cjne	r7,#0x00,00147$
      000235 80 28            [24]  758 	sjmp	00101$
      000237                        759 00147$:
      000237 BE 02 05         [24]  760 	cjne	r6,#0x02,00148$
      00023A BF 00 02         [24]  761 	cjne	r7,#0x00,00148$
      00023D 80 23            [24]  762 	sjmp	00102$
      00023F                        763 00148$:
      00023F BE 03 05         [24]  764 	cjne	r6,#0x03,00149$
      000242 BF 00 02         [24]  765 	cjne	r7,#0x00,00149$
      000245 80 1E            [24]  766 	sjmp	00103$
      000247                        767 00149$:
      000247 BE 04 05         [24]  768 	cjne	r6,#0x04,00150$
      00024A BF 00 02         [24]  769 	cjne	r7,#0x00,00150$
      00024D 80 19            [24]  770 	sjmp	00104$
      00024F                        771 00150$:
      00024F BE 05 05         [24]  772 	cjne	r6,#0x05,00151$
      000252 BF 00 02         [24]  773 	cjne	r7,#0x00,00151$
      000255 80 14            [24]  774 	sjmp	00105$
      000257                        775 00151$:
                                    776 ;	./src/main.c:137: case 1:
      000257 BE 06 17         [24]  777 	cjne	r6,#0x06,00109$
      00025A BF 00 14         [24]  778 	cjne	r7,#0x00,00109$
      00025D 80 0F            [24]  779 	sjmp	00106$
      00025F                        780 00101$:
                                    781 ;	./src/main.c:138: Delay_Do();
                                    782 ;	./src/main.c:139: break;
                                    783 ;	./src/main.c:141: case 2:
      00025F 02r00r00         [24]  784 	ljmp	_Delay_Do
      000262                        785 00102$:
                                    786 ;	./src/main.c:142: Delay_Re();
                                    787 ;	./src/main.c:143: break;
                                    788 ;	./src/main.c:145: case 3:
      000262 02r00r00         [24]  789 	ljmp	_Delay_Re
      000265                        790 00103$:
                                    791 ;	./src/main.c:146: Delay_Mi();
                                    792 ;	./src/main.c:147: break;
                                    793 ;	./src/main.c:149: case 4:
      000265 02r00r00         [24]  794 	ljmp	_Delay_Mi
      000268                        795 00104$:
                                    796 ;	./src/main.c:150: Delay_Fa();
                                    797 ;	./src/main.c:151: break;
                                    798 ;	./src/main.c:153: case 5:
      000268 02r00r00         [24]  799 	ljmp	_Delay_Fa
      00026B                        800 00105$:
                                    801 ;	./src/main.c:154: Delay_So();
                                    802 ;	./src/main.c:155: break;
                                    803 ;	./src/main.c:157: case 6:
      00026B 02r00r00         [24]  804 	ljmp	_Delay_So
      00026E                        805 00106$:
                                    806 ;	./src/main.c:158: Delay_La();
                                    807 ;	./src/main.c:163: }
                                    808 ;	./src/main.c:164: }
      00026E 02r00r00         [24]  809 	ljmp	_Delay_La
      000271                        810 00109$:
      000271 22               [24]  811 	ret
                                    812 	.area CSEG    (CODE)
                                    813 	.area CONST   (CODE)
      000000                        814 _music_table:
      000000 02                     815 	.db #0x02	; 2
      000001 04                     816 	.db #0x04	; 4
      000002 03                     817 	.db #0x03	; 3
      000003 01                     818 	.db #0x01	; 1
      000004 02                     819 	.db #0x02	; 2
      000005 02                     820 	.db #0x02	; 2
      000006 04                     821 	.db #0x04	; 4
      000007 03                     822 	.db #0x03	; 3
      000008 01                     823 	.db #0x01	; 1
      000009 06                     824 	.db #0x06	; 6
      00000A 04                     825 	.db #0x04	; 4
      00000B 05                     826 	.db #0x05	; 5
      00000C 03                     827 	.db #0x03	; 3
      00000D 04                     828 	.db #0x04	; 4
      00000E 02                     829 	.db #0x02	; 2
      00000F 03                     830 	.db #0x03	; 3
      000010 01                     831 	.db #0x01	; 1
      000011 06                     832 	.db #0x06	; 6
      000012 04                     833 	.db #0x04	; 4
      000013 05                     834 	.db #0x05	; 5
      000014 03                     835 	.db #0x03	; 3
      000015 04                     836 	.db #0x04	; 4
      000016 02                     837 	.db #0x02	; 2
      000017 03                     838 	.db #0x03	; 3
      000018 01                     839 	.db #0x01	; 1
      000019                        840 _duration_table:
      000019 F4                     841 	.db #0xf4	; 244
      00001A 32                     842 	.db #0x32	; 50	'2'
      00001B C8                     843 	.db #0xc8	; 200
      00001C 32                     844 	.db #0x32	; 50	'2'
      00001D 32                     845 	.db #0x32	; 50	'2'
      00001E 32                     846 	.db #0x32	; 50	'2'
      00001F 32                     847 	.db #0x32	; 50	'2'
      000020 F4                     848 	.db #0xf4	; 244
      000021 32                     849 	.db #0x32	; 50	'2'
      000022 F4                     850 	.db #0xf4	; 244
      000023 64                     851 	.db #0x64	; 100	'd'
      000024 F4                     852 	.db #0xf4	; 244
      000025 F4                     853 	.db #0xf4	; 244
      000026 C8                     854 	.db #0xc8	; 200
      000027 C8                     855 	.db #0xc8	; 200
      000028 C8                     856 	.db #0xc8	; 200
      000029 64                     857 	.db #0x64	; 100	'd'
      00002A F4                     858 	.db #0xf4	; 244
      00002B 64                     859 	.db #0x64	; 100	'd'
      00002C F4                     860 	.db #0xf4	; 244
      00002D F4                     861 	.db #0xf4	; 244
      00002E C8                     862 	.db #0xc8	; 200
      00002F C8                     863 	.db #0xc8	; 200
      000030 C8                     864 	.db #0xc8	; 200
      000031 64                     865 	.db #0x64	; 100	'd'
      000032                        866 _blanck_table:
      000032 32                     867 	.db #0x32	; 50	'2'
      000033 32                     868 	.db #0x32	; 50	'2'
      000034 32                     869 	.db #0x32	; 50	'2'
      000035 F4                     870 	.db #0xf4	; 244
      000036 32                     871 	.db #0x32	; 50	'2'
      000037 32                     872 	.db #0x32	; 50	'2'
      000038 32                     873 	.db #0x32	; 50	'2'
      000039 32                     874 	.db #0x32	; 50	'2'
      00003A F4                     875 	.db #0xf4	; 244
      00003B 32                     876 	.db #0x32	; 50	'2'
      00003C 32                     877 	.db #0x32	; 50	'2'
      00003D 32                     878 	.db #0x32	; 50	'2'
      00003E C8                     879 	.db #0xc8	; 200
      00003F 1E                     880 	.db #0x1e	; 30
      000040 1E                     881 	.db #0x1e	; 30
      000041 1E                     882 	.db #0x1e	; 30
      000042 F4                     883 	.db #0xf4	; 244
      000043 32                     884 	.db #0x32	; 50	'2'
      000044 32                     885 	.db #0x32	; 50	'2'
      000045 32                     886 	.db #0x32	; 50	'2'
      000046 C8                     887 	.db #0xc8	; 200
      000047 1E                     888 	.db #0x1e	; 30
      000048 1E                     889 	.db #0x1e	; 30
      000049 1E                     890 	.db #0x1e	; 30
      00004A F4                     891 	.db #0xf4	; 244
                                    892 	.area CONST   (CODE)
      00004B                        893 ___str_0:
      00004B 6D 75 73 69 63 20 6F   894 	.ascii "music off!"
             66 66 21
      000055 00                     895 	.db 0x00
                                    896 	.area CSEG    (CODE)
                                    897 	.area CONST   (CODE)
      000056                        898 ___str_1:
      000056 20 20 20 20 20 20 20   899 	.ascii "           "
             20 20 20 20
      000061 00                     900 	.db 0x00
                                    901 	.area CSEG    (CODE)
                                    902 	.area CONST   (CODE)
      000062                        903 ___str_2:
      000062 6D 75 73 69 63 20 6F   904 	.ascii "music on!"
             6E 21
      00006B 00                     905 	.db 0x00
                                    906 	.area CSEG    (CODE)
                                    907 	.area XINIT   (CODE)
                                    908 	.area CABS    (ABS,CODE)
