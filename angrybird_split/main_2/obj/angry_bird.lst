                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.2 #14362 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module angry_bird
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _sine_table
                                     12 	.globl _bird_logo
                                     13 	.globl _pig_logo
                                     14 	.globl _shooter_logo
                                     15 	.globl _display_for_OLED_debug
                                     16 	.globl _I2C_Stop
                                     17 	.globl _I2C_Start
                                     18 	.globl _oledSendData
                                     19 	.globl _OLED_SetCursor
                                     20 	.globl _OLED_Clear
                                     21 	.globl _OLED_DisplayString
                                     22 	.globl _OLED_Init
                                     23 	.globl _delay_ms
                                     24 	.globl _CY
                                     25 	.globl _AC
                                     26 	.globl _F0
                                     27 	.globl _RS1
                                     28 	.globl _RS0
                                     29 	.globl _OV
                                     30 	.globl _F1
                                     31 	.globl _P
                                     32 	.globl _PS
                                     33 	.globl _PT1
                                     34 	.globl _PX1
                                     35 	.globl _PT0
                                     36 	.globl _PX0
                                     37 	.globl _RD
                                     38 	.globl _WR
                                     39 	.globl _T1
                                     40 	.globl _T0
                                     41 	.globl _INT1
                                     42 	.globl _INT0
                                     43 	.globl _TXD
                                     44 	.globl _RXD
                                     45 	.globl _P3_7
                                     46 	.globl _P3_6
                                     47 	.globl _P3_5
                                     48 	.globl _P3_4
                                     49 	.globl _P3_3
                                     50 	.globl _P3_2
                                     51 	.globl _P3_1
                                     52 	.globl _P3_0
                                     53 	.globl _EA
                                     54 	.globl _ES
                                     55 	.globl _ET1
                                     56 	.globl _EX1
                                     57 	.globl _ET0
                                     58 	.globl _EX0
                                     59 	.globl _P2_7
                                     60 	.globl _P2_6
                                     61 	.globl _P2_5
                                     62 	.globl _P2_4
                                     63 	.globl _P2_3
                                     64 	.globl _P2_2
                                     65 	.globl _P2_1
                                     66 	.globl _P2_0
                                     67 	.globl _SM0
                                     68 	.globl _SM1
                                     69 	.globl _SM2
                                     70 	.globl _REN
                                     71 	.globl _TB8
                                     72 	.globl _RB8
                                     73 	.globl _TI
                                     74 	.globl _RI
                                     75 	.globl _P1_7
                                     76 	.globl _P1_6
                                     77 	.globl _P1_5
                                     78 	.globl _P1_4
                                     79 	.globl _P1_3
                                     80 	.globl _P1_2
                                     81 	.globl _P1_1
                                     82 	.globl _P1_0
                                     83 	.globl _TF1
                                     84 	.globl _TR1
                                     85 	.globl _TF0
                                     86 	.globl _TR0
                                     87 	.globl _IE1
                                     88 	.globl _IT1
                                     89 	.globl _IE0
                                     90 	.globl _IT0
                                     91 	.globl _P0_7
                                     92 	.globl _P0_6
                                     93 	.globl _P0_5
                                     94 	.globl _P0_4
                                     95 	.globl _P0_3
                                     96 	.globl _P0_2
                                     97 	.globl _P0_1
                                     98 	.globl _P0_0
                                     99 	.globl _B
                                    100 	.globl _ACC
                                    101 	.globl _PSW
                                    102 	.globl _IP
                                    103 	.globl _P3
                                    104 	.globl _IE
                                    105 	.globl _P2
                                    106 	.globl _SBUF
                                    107 	.globl _SCON
                                    108 	.globl _P1
                                    109 	.globl _TH1
                                    110 	.globl _TH0
                                    111 	.globl _TL1
                                    112 	.globl _TL0
                                    113 	.globl _TMOD
                                    114 	.globl _TCON
                                    115 	.globl _PCON
                                    116 	.globl _DPH
                                    117 	.globl _DPL
                                    118 	.globl _SP
                                    119 	.globl _P0
                                    120 	.globl _prebut_enter
                                    121 	.globl _prebut_right
                                    122 	.globl _prebut_left
                                    123 	.globl _prebut_down
                                    124 	.globl _prebut_up
                                    125 	.globl _cur_state
                                    126 	.globl _led_cur_state
                                    127 	.globl _control_strength
                                    128 	.globl _control_angle
                                    129 	.globl _pig_amt
                                    130 	.globl _bird_amt
                                    131 	.globl _col_offset
                                    132 	.globl _row_offset
                                    133 	.globl _received_flag
                                    134 	.globl _received_data
                                    135 	.globl _send_flag
                                    136 	.globl _send_data
                                    137 	.globl _angrybird_display_game
                                    138 	.globl _angrybird_state_machine
                                    139 	.globl _angrybird_game_state
                                    140 	.globl _getsine
                                    141 	.globl _getcosine
                                    142 	.globl _pow_2
                                    143 ;--------------------------------------------------------
                                    144 ; special function registers
                                    145 ;--------------------------------------------------------
                                    146 	.area RSEG    (ABS,DATA)
      000000                        147 	.org 0x0000
                           000080   148 _P0	=	0x0080
                           000081   149 _SP	=	0x0081
                           000082   150 _DPL	=	0x0082
                           000083   151 _DPH	=	0x0083
                           000087   152 _PCON	=	0x0087
                           000088   153 _TCON	=	0x0088
                           000089   154 _TMOD	=	0x0089
                           00008A   155 _TL0	=	0x008a
                           00008B   156 _TL1	=	0x008b
                           00008C   157 _TH0	=	0x008c
                           00008D   158 _TH1	=	0x008d
                           000090   159 _P1	=	0x0090
                           000098   160 _SCON	=	0x0098
                           000099   161 _SBUF	=	0x0099
                           0000A0   162 _P2	=	0x00a0
                           0000A8   163 _IE	=	0x00a8
                           0000B0   164 _P3	=	0x00b0
                           0000B8   165 _IP	=	0x00b8
                           0000D0   166 _PSW	=	0x00d0
                           0000E0   167 _ACC	=	0x00e0
                           0000F0   168 _B	=	0x00f0
                                    169 ;--------------------------------------------------------
                                    170 ; special function bits
                                    171 ;--------------------------------------------------------
                                    172 	.area RSEG    (ABS,DATA)
      000000                        173 	.org 0x0000
                           000080   174 _P0_0	=	0x0080
                           000081   175 _P0_1	=	0x0081
                           000082   176 _P0_2	=	0x0082
                           000083   177 _P0_3	=	0x0083
                           000084   178 _P0_4	=	0x0084
                           000085   179 _P0_5	=	0x0085
                           000086   180 _P0_6	=	0x0086
                           000087   181 _P0_7	=	0x0087
                           000088   182 _IT0	=	0x0088
                           000089   183 _IE0	=	0x0089
                           00008A   184 _IT1	=	0x008a
                           00008B   185 _IE1	=	0x008b
                           00008C   186 _TR0	=	0x008c
                           00008D   187 _TF0	=	0x008d
                           00008E   188 _TR1	=	0x008e
                           00008F   189 _TF1	=	0x008f
                           000090   190 _P1_0	=	0x0090
                           000091   191 _P1_1	=	0x0091
                           000092   192 _P1_2	=	0x0092
                           000093   193 _P1_3	=	0x0093
                           000094   194 _P1_4	=	0x0094
                           000095   195 _P1_5	=	0x0095
                           000096   196 _P1_6	=	0x0096
                           000097   197 _P1_7	=	0x0097
                           000098   198 _RI	=	0x0098
                           000099   199 _TI	=	0x0099
                           00009A   200 _RB8	=	0x009a
                           00009B   201 _TB8	=	0x009b
                           00009C   202 _REN	=	0x009c
                           00009D   203 _SM2	=	0x009d
                           00009E   204 _SM1	=	0x009e
                           00009F   205 _SM0	=	0x009f
                           0000A0   206 _P2_0	=	0x00a0
                           0000A1   207 _P2_1	=	0x00a1
                           0000A2   208 _P2_2	=	0x00a2
                           0000A3   209 _P2_3	=	0x00a3
                           0000A4   210 _P2_4	=	0x00a4
                           0000A5   211 _P2_5	=	0x00a5
                           0000A6   212 _P2_6	=	0x00a6
                           0000A7   213 _P2_7	=	0x00a7
                           0000A8   214 _EX0	=	0x00a8
                           0000A9   215 _ET0	=	0x00a9
                           0000AA   216 _EX1	=	0x00aa
                           0000AB   217 _ET1	=	0x00ab
                           0000AC   218 _ES	=	0x00ac
                           0000AF   219 _EA	=	0x00af
                           0000B0   220 _P3_0	=	0x00b0
                           0000B1   221 _P3_1	=	0x00b1
                           0000B2   222 _P3_2	=	0x00b2
                           0000B3   223 _P3_3	=	0x00b3
                           0000B4   224 _P3_4	=	0x00b4
                           0000B5   225 _P3_5	=	0x00b5
                           0000B6   226 _P3_6	=	0x00b6
                           0000B7   227 _P3_7	=	0x00b7
                           0000B0   228 _RXD	=	0x00b0
                           0000B1   229 _TXD	=	0x00b1
                           0000B2   230 _INT0	=	0x00b2
                           0000B3   231 _INT1	=	0x00b3
                           0000B4   232 _T0	=	0x00b4
                           0000B5   233 _T1	=	0x00b5
                           0000B6   234 _WR	=	0x00b6
                           0000B7   235 _RD	=	0x00b7
                           0000B8   236 _PX0	=	0x00b8
                           0000B9   237 _PT0	=	0x00b9
                           0000BA   238 _PX1	=	0x00ba
                           0000BB   239 _PT1	=	0x00bb
                           0000BC   240 _PS	=	0x00bc
                           0000D0   241 _P	=	0x00d0
                           0000D1   242 _F1	=	0x00d1
                           0000D2   243 _OV	=	0x00d2
                           0000D3   244 _RS0	=	0x00d3
                           0000D4   245 _RS1	=	0x00d4
                           0000D5   246 _F0	=	0x00d5
                           0000D6   247 _AC	=	0x00d6
                           0000D7   248 _CY	=	0x00d7
                                    249 ;--------------------------------------------------------
                                    250 ; overlayable register banks
                                    251 ;--------------------------------------------------------
                                    252 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        253 	.ds 8
                                    254 ;--------------------------------------------------------
                                    255 ; internal ram data
                                    256 ;--------------------------------------------------------
                                    257 	.area DSEG    (DATA)
      000000                        258 _send_data::
      000000                        259 	.ds 1
      000001                        260 _send_flag::
      000001                        261 	.ds 1
      000002                        262 _received_data::
      000002                        263 	.ds 1
      000003                        264 _received_flag::
      000003                        265 	.ds 1
      000004                        266 _row_offset::
      000004                        267 	.ds 2
      000006                        268 _col_offset::
      000006                        269 	.ds 2
      000008                        270 _bird_amt::
      000008                        271 	.ds 2
      00000A                        272 _pig_amt::
      00000A                        273 	.ds 2
      00000C                        274 _control_angle::
      00000C                        275 	.ds 2
      00000E                        276 _control_strength::
      00000E                        277 	.ds 2
      000010                        278 _angrybird_display_game_control_strength__65537_30:
      000010                        279 	.ds 2
      000012                        280 _angrybird_display_game_control_angle__65537_30:
      000012                        281 	.ds 5
      000017                        282 _angrybird_display_game_angle__65539_32:
      000017                        283 	.ds 2
      000019                        284 _angrybird_display_game_k_131075_33:
      000019                        285 	.ds 2
      00001B                        286 _led_cur_state::
      00001B                        287 	.ds 2
      00001D                        288 _cur_state::
      00001D                        289 	.ds 2
      00001F                        290 _prebut_up::
      00001F                        291 	.ds 2
      000021                        292 _prebut_down::
      000021                        293 	.ds 2
      000023                        294 _prebut_left::
      000023                        295 	.ds 2
      000025                        296 _prebut_right::
      000025                        297 	.ds 2
      000027                        298 _prebut_enter::
      000027                        299 	.ds 2
      000029                        300 _angrybird_game_state_control_angle__196609_65:
      000029                        301 	.ds 5
      00002E                        302 _angrybird_game_state_angle__196610_66:
      00002E                        303 	.ds 2
      000030                        304 _angrybird_game_state_control_strength__196609_71:
      000030                        305 	.ds 2
      000032                        306 _angrybird_game_state_delta_y_196609_78:
      000032                        307 	.ds 4
      000036                        308 _angrybird_game_state_delta_x_196609_78:
      000036                        309 	.ds 4
      00003A                        310 _angrybird_game_state_peak_x_196609_78:
      00003A                        311 	.ds 4
      00003E                        312 _angrybird_game_state_peak_y_196609_78:
      00003E                        313 	.ds 4
      000042                        314 _angrybird_game_state_a_196609_78:
      000042                        315 	.ds 4
      000046                        316 _angrybird_game_state_i_262145_83:
      000046                        317 	.ds 2
      000048                        318 _angrybird_game_state_output_row_327681_84:
      000048                        319 	.ds 2
      00004A                        320 _angrybird_game_state_sloc1_1_0:
      00004A                        321 	.ds 4
                                    322 ;--------------------------------------------------------
                                    323 ; overlayable items in internal ram
                                    324 ;--------------------------------------------------------
                                    325 ;--------------------------------------------------------
                                    326 ; indirectly addressable internal ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area ISEG    (DATA)
                                    329 ;--------------------------------------------------------
                                    330 ; absolute internal ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area IABS    (ABS,DATA)
                                    333 	.area IABS    (ABS,DATA)
                                    334 ;--------------------------------------------------------
                                    335 ; bit data
                                    336 ;--------------------------------------------------------
                                    337 	.area BSEG    (BIT)
      000000                        338 _angrybird_display_game_sloc0_1_0:
      000000                        339 	.ds 1
      000001                        340 _angrybird_game_state_sloc0_1_0:
      000001                        341 	.ds 1
                                    342 ;--------------------------------------------------------
                                    343 ; paged external ram data
                                    344 ;--------------------------------------------------------
                                    345 	.area PSEG    (PAG,XDATA)
                                    346 ;--------------------------------------------------------
                                    347 ; uninitialized external ram data
                                    348 ;--------------------------------------------------------
                                    349 	.area XSEG    (XDATA)
                                    350 ;--------------------------------------------------------
                                    351 ; absolute external ram data
                                    352 ;--------------------------------------------------------
                                    353 	.area XABS    (ABS,XDATA)
                                    354 ;--------------------------------------------------------
                                    355 ; initialized external ram data
                                    356 ;--------------------------------------------------------
                                    357 	.area XISEG   (XDATA)
                                    358 	.area HOME    (CODE)
                                    359 	.area GSINIT0 (CODE)
                                    360 	.area GSINIT1 (CODE)
                                    361 	.area GSINIT2 (CODE)
                                    362 	.area GSINIT3 (CODE)
                                    363 	.area GSINIT4 (CODE)
                                    364 	.area GSINIT5 (CODE)
                                    365 	.area GSINIT  (CODE)
                                    366 	.area GSFINAL (CODE)
                                    367 	.area CSEG    (CODE)
                                    368 ;--------------------------------------------------------
                                    369 ; global & static initialisations
                                    370 ;--------------------------------------------------------
                                    371 	.area HOME    (CODE)
                                    372 	.area GSINIT  (CODE)
                                    373 	.area GSFINAL (CODE)
                                    374 	.area GSINIT  (CODE)
                                    375 ;	./src/angry_bird.c:128: int led_cur_state = 1;
      000000 75*1B 01         [24]  376 	mov	_led_cur_state,#0x01
      000003 75*1C 00         [24]  377 	mov	(_led_cur_state + 1),#0x00
                                    378 ;	./src/angry_bird.c:146: int cur_state = 0;
      000006 E4               [12]  379 	clr	a
      000007 F5*1D            [12]  380 	mov	_cur_state,a
      000009 F5*1E            [12]  381 	mov	(_cur_state + 1),a
                                    382 ;	./src/angry_bird.c:196: unsigned int prebut_up = 0;
      00000B F5*1F            [12]  383 	mov	_prebut_up,a
      00000D F5*20            [12]  384 	mov	(_prebut_up + 1),a
                                    385 ;	./src/angry_bird.c:197: unsigned int prebut_down = 0;
      00000F F5*21            [12]  386 	mov	_prebut_down,a
      000011 F5*22            [12]  387 	mov	(_prebut_down + 1),a
                                    388 ;	./src/angry_bird.c:198: unsigned int prebut_left = 0;
      000013 F5*23            [12]  389 	mov	_prebut_left,a
      000015 F5*24            [12]  390 	mov	(_prebut_left + 1),a
                                    391 ;	./src/angry_bird.c:199: unsigned int prebut_right = 0;
      000017 F5*25            [12]  392 	mov	_prebut_right,a
      000019 F5*26            [12]  393 	mov	(_prebut_right + 1),a
                                    394 ;	./src/angry_bird.c:200: unsigned int prebut_enter = 0;
      00001B F5*27            [12]  395 	mov	_prebut_enter,a
      00001D F5*28            [12]  396 	mov	(_prebut_enter + 1),a
                                    397 ;--------------------------------------------------------
                                    398 ; Home
                                    399 ;--------------------------------------------------------
                                    400 	.area HOME    (CODE)
                                    401 	.area HOME    (CODE)
                                    402 ;--------------------------------------------------------
                                    403 ; code
                                    404 ;--------------------------------------------------------
                                    405 	.area CSEG    (CODE)
                                    406 ;------------------------------------------------------------
                                    407 ;Allocation info for local variables in function 'angrybird_display_game'
                                    408 ;------------------------------------------------------------
                                    409 ;control_strength_         Allocated with name '_angrybird_display_game_control_strength__65537_30'
                                    410 ;control_angle_            Allocated with name '_angrybird_display_game_control_angle__65537_30'
                                    411 ;i                         Allocated to registers r4 r5 
                                    412 ;angle_                    Allocated with name '_angrybird_display_game_angle__65539_32'
                                    413 ;k                         Allocated with name '_angrybird_display_game_k_131075_33'
                                    414 ;j                         Allocated to registers r4 r5 
                                    415 ;i                         Allocated to registers r3 
                                    416 ;j                         Allocated to registers r6 r7 
                                    417 ;i                         Allocated to registers r5 
                                    418 ;j                         Allocated to registers r6 r7 
                                    419 ;i                         Allocated to registers r5 
                                    420 ;j                         Allocated to registers r6 r7 
                                    421 ;i                         Allocated to registers r5 
                                    422 ;------------------------------------------------------------
                                    423 ;	./src/angry_bird.c:26: void angrybird_display_game(void)
                                    424 ;	-----------------------------------------
                                    425 ;	 function angrybird_display_game
                                    426 ;	-----------------------------------------
      000000                        427 _angrybird_display_game:
                           000007   428 	ar7 = 0x07
                           000006   429 	ar6 = 0x06
                           000005   430 	ar5 = 0x05
                           000004   431 	ar4 = 0x04
                           000003   432 	ar3 = 0x03
                           000002   433 	ar2 = 0x02
                           000001   434 	ar1 = 0x01
                           000000   435 	ar0 = 0x00
                                    436 ;	./src/angry_bird.c:28: bird_amt = bird_total_amount;
      000000 75*08 09         [24]  437 	mov	_bird_amt,#0x09
      000003 75*09 00         [24]  438 	mov	(_bird_amt + 1),#0x00
                                    439 ;	./src/angry_bird.c:29: pig_amt = pig_total_amount;
      000006 75*0A 03         [24]  440 	mov	_pig_amt,#0x03
      000009 75*0B 00         [24]  441 	mov	(_pig_amt + 1),#0x00
                                    442 ;	./src/angry_bird.c:30: control_angle = 60;
      00000C 75*0C 3C         [24]  443 	mov	_control_angle,#0x3c
      00000F 75*0D 00         [24]  444 	mov	(_control_angle + 1),#0x00
                                    445 ;	./src/angry_bird.c:31: control_strength = 3;
      000012 75*0E 03         [24]  446 	mov	_control_strength,#0x03
      000015 75*0F 00         [24]  447 	mov	(_control_strength + 1),#0x00
                                    448 ;	./src/angry_bird.c:33: OLED_Clear();
      000018 12r00r00         [24]  449 	lcall	_OLED_Clear
                                    450 ;	./src/angry_bird.c:37: control_strength_[0] = '0' + control_strength;
      00001B AF*0E            [24]  451 	mov	r7,_control_strength
      00001D 74 30            [12]  452 	mov	a,#0x30
      00001F 2F               [12]  453 	add	a,r7
      000020 F5*10            [12]  454 	mov	_angrybird_display_game_control_strength__65537_30,a
                                    455 ;	./src/angry_bird.c:38: control_strength_[1] = '\0';
                                    456 ;	./src/angry_bird.c:40: int i = 0;
                                    457 ;	./src/angry_bird.c:41: if (control_angle < 0)
      000022 E4               [12]  458 	clr	a
      000023 F5*11            [12]  459 	mov	(_angrybird_display_game_control_strength__65537_30 + 0x0001),a
      000025 FE               [12]  460 	mov	r6,a
      000026 FF               [12]  461 	mov	r7,a
      000027 E5*0D            [12]  462 	mov	a,(_control_angle + 1)
      000029 30 E7 07         [24]  463 	jnb	acc.7,00102$
                                    464 ;	./src/angry_bird.c:42: control_angle_[i++] = '-';
      00002C 7E 01            [12]  465 	mov	r6,#0x01
      00002E 7F 00            [12]  466 	mov	r7,#0x00
      000030 75*12 2D         [24]  467 	mov	_angrybird_display_game_control_angle__65537_30,#0x2d
      000033                        468 00102$:
                                    469 ;	./src/angry_bird.c:43: int angle_ = (control_angle >= 0) ? control_angle : -1 * control_angle;
      000033 E5*0D            [12]  470 	mov	a,(_control_angle + 1)
      000035 33               [12]  471 	rlc	a
      000036 92*00            [24]  472 	mov	_angrybird_display_game_sloc0_1_0,c
      000038 40 06            [24]  473 	jc	00143$
      00003A AC*0C            [24]  474 	mov	r4,_control_angle
      00003C AD*0D            [24]  475 	mov	r5,(_control_angle + 1)
      00003E 80 09            [24]  476 	sjmp	00144$
      000040                        477 00143$:
      000040 C3               [12]  478 	clr	c
      000041 E4               [12]  479 	clr	a
      000042 95*0C            [12]  480 	subb	a,_control_angle
      000044 FC               [12]  481 	mov	r4,a
      000045 E4               [12]  482 	clr	a
      000046 95*0D            [12]  483 	subb	a,(_control_angle + 1)
      000048 FD               [12]  484 	mov	r5,a
      000049                        485 00144$:
      000049 8C*17            [24]  486 	mov	_angrybird_display_game_angle__65539_32,r4
      00004B 8D*18            [24]  487 	mov	(_angrybird_display_game_angle__65539_32 + 1),r5
                                    488 ;	./src/angry_bird.c:44: if (angle_ % 100 / 10 != 0)
      00004D 75*00 64         [24]  489 	mov	__modsint_PARM_2,#0x64
      000050 75*01 00         [24]  490 	mov	(__modsint_PARM_2 + 1),#0x00
      000053 85*17 82         [24]  491 	mov	dpl,_angrybird_display_game_angle__65539_32
      000056 85*18 83         [24]  492 	mov	dph,(_angrybird_display_game_angle__65539_32 + 1)
      000059 C0 07            [24]  493 	push	ar7
      00005B C0 06            [24]  494 	push	ar6
      00005D 12r00r00         [24]  495 	lcall	__modsint
      000060 75*00 0A         [24]  496 	mov	__divsint_PARM_2,#0x0a
      000063 75*01 00         [24]  497 	mov	(__divsint_PARM_2 + 1),#0x00
      000066 12r00r00         [24]  498 	lcall	__divsint
      000069 AA 82            [24]  499 	mov	r2,dpl
      00006B AB 83            [24]  500 	mov	r3,dph
      00006D D0 06            [24]  501 	pop	ar6
      00006F D0 07            [24]  502 	pop	ar7
      000071 EA               [12]  503 	mov	a,r2
      000072 4B               [12]  504 	orl	a,r3
      000073 60 11            [24]  505 	jz	00104$
                                    506 ;	./src/angry_bird.c:45: control_angle_[i++] = '0' + angle_ % 100 / 10;
      000075 8E 04            [24]  507 	mov	ar4,r6
      000077 8F 05            [24]  508 	mov	ar5,r7
      000079 0E               [12]  509 	inc	r6
      00007A BE 00 01         [24]  510 	cjne	r6,#0x00,00304$
      00007D 0F               [12]  511 	inc	r7
      00007E                        512 00304$:
      00007E EC               [12]  513 	mov	a,r4
      00007F 24r12            [12]  514 	add	a,#_angrybird_display_game_control_angle__65537_30
      000081 F9               [12]  515 	mov	r1,a
      000082 74 30            [12]  516 	mov	a,#0x30
      000084 2A               [12]  517 	add	a,r2
      000085 F7               [12]  518 	mov	@r1,a
      000086                        519 00104$:
                                    520 ;	./src/angry_bird.c:46: control_angle_[i++] = '0' + angle_ % 10;
      000086 74 01            [12]  521 	mov	a,#0x01
      000088 2E               [12]  522 	add	a,r6
      000089 FC               [12]  523 	mov	r4,a
      00008A E4               [12]  524 	clr	a
      00008B 3F               [12]  525 	addc	a,r7
      00008C FD               [12]  526 	mov	r5,a
      00008D EE               [12]  527 	mov	a,r6
      00008E 24r12            [12]  528 	add	a,#_angrybird_display_game_control_angle__65537_30
      000090 F9               [12]  529 	mov	r1,a
      000091 75*00 0A         [24]  530 	mov	__modsint_PARM_2,#0x0a
      000094 75*01 00         [24]  531 	mov	(__modsint_PARM_2 + 1),#0x00
      000097 85*17 82         [24]  532 	mov	dpl,_angrybird_display_game_angle__65539_32
      00009A 85*18 83         [24]  533 	mov	dph,(_angrybird_display_game_angle__65539_32 + 1)
      00009D C0 05            [24]  534 	push	ar5
      00009F C0 04            [24]  535 	push	ar4
      0000A1 C0 01            [24]  536 	push	ar1
      0000A3 12r00r00         [24]  537 	lcall	__modsint
      0000A6 AE 82            [24]  538 	mov	r6,dpl
      0000A8 D0 01            [24]  539 	pop	ar1
      0000AA D0 04            [24]  540 	pop	ar4
      0000AC D0 05            [24]  541 	pop	ar5
      0000AE 74 30            [12]  542 	mov	a,#0x30
      0000B0 2E               [12]  543 	add	a,r6
      0000B1 F7               [12]  544 	mov	@r1,a
                                    545 ;	./src/angry_bird.c:47: control_angle_[i++] = '\0';
      0000B2 EC               [12]  546 	mov	a,r4
      0000B3 24r12            [12]  547 	add	a,#_angrybird_display_game_control_angle__65537_30
      0000B5 F8               [12]  548 	mov	r0,a
      0000B6 76 00            [12]  549 	mov	@r0,#0x00
                                    550 ;	./src/angry_bird.c:49: OLED_SetCursor(strength_text_row_cursor, 0);
      0000B8 75*00 00         [24]  551 	mov	_OLED_SetCursor_PARM_2,#0x00
      0000BB 75 82 00         [24]  552 	mov	dpl,#0x00
      0000BE 12r00r00         [24]  553 	lcall	_OLED_SetCursor
                                    554 ;	./src/angry_bird.c:50: OLED_DisplayString("S ");
      0000C1 90r00r30         [24]  555 	mov	dptr,#___str_0
      0000C4 75 F0 80         [24]  556 	mov	b,#0x80
      0000C7 12r00r00         [24]  557 	lcall	_OLED_DisplayString
                                    558 ;	./src/angry_bird.c:51: OLED_SetCursor(strength_text_row_cursor, strength_text_col_cursor);
      0000CA 75*00 0A         [24]  559 	mov	_OLED_SetCursor_PARM_2,#0x0a
      0000CD 75 82 00         [24]  560 	mov	dpl,#0x00
      0000D0 12r00r00         [24]  561 	lcall	_OLED_SetCursor
                                    562 ;	./src/angry_bird.c:52: OLED_DisplayString(control_strength_);
      0000D3 90r00r10         [24]  563 	mov	dptr,#_angrybird_display_game_control_strength__65537_30
      0000D6 75 F0 40         [24]  564 	mov	b,#0x40
      0000D9 12r00r00         [24]  565 	lcall	_OLED_DisplayString
                                    566 ;	./src/angry_bird.c:54: OLED_SetCursor(strength_text_row_cursor, 20);
      0000DC 75*00 14         [24]  567 	mov	_OLED_SetCursor_PARM_2,#0x14
      0000DF 75 82 00         [24]  568 	mov	dpl,#0x00
      0000E2 12r00r00         [24]  569 	lcall	_OLED_SetCursor
                                    570 ;	./src/angry_bird.c:55: OLED_DisplayString("A ");
      0000E5 90r00r33         [24]  571 	mov	dptr,#___str_1
      0000E8 75 F0 80         [24]  572 	mov	b,#0x80
      0000EB 12r00r00         [24]  573 	lcall	_OLED_DisplayString
                                    574 ;	./src/angry_bird.c:56: OLED_SetCursor(angle_text_row_cursor, angle_text_col_cursor);
      0000EE 75*00 1E         [24]  575 	mov	_OLED_SetCursor_PARM_2,#0x1e
      0000F1 75 82 00         [24]  576 	mov	dpl,#0x00
      0000F4 12r00r00         [24]  577 	lcall	_OLED_SetCursor
                                    578 ;	./src/angry_bird.c:57: OLED_DisplayString(control_angle_);
      0000F7 90r00r12         [24]  579 	mov	dptr,#_angrybird_display_game_control_angle__65537_30
      0000FA 75 F0 40         [24]  580 	mov	b,#0x40
      0000FD 12r00r00         [24]  581 	lcall	_OLED_DisplayString
                                    582 ;	./src/angry_bird.c:60: for (int k = 0; k < bird_total_amount; k++)
      000100 E4               [12]  583 	clr	a
      000101 F5*19            [12]  584 	mov	_angrybird_display_game_k_131075_33,a
      000103 F5*1A            [12]  585 	mov	(_angrybird_display_game_k_131075_33 + 1),a
      000105                        586 00121$:
      000105 C3               [12]  587 	clr	c
      000106 E5*19            [12]  588 	mov	a,_angrybird_display_game_k_131075_33
      000108 94 09            [12]  589 	subb	a,#0x09
      00010A E5*1A            [12]  590 	mov	a,(_angrybird_display_game_k_131075_33 + 1)
      00010C 64 80            [12]  591 	xrl	a,#0x80
      00010E 94 80            [12]  592 	subb	a,#0x80
      000110 40 03            [24]  593 	jc	00305$
      000112 02r01r9D         [24]  594 	ljmp	00107$
      000115                        595 00305$:
                                    596 ;	./src/angry_bird.c:62: row_offset = 0;
      000115 E4               [12]  597 	clr	a
      000116 F5*04            [12]  598 	mov	_row_offset,a
      000118 F5*05            [12]  599 	mov	(_row_offset + 1),a
                                    600 ;	./src/angry_bird.c:63: col_offset = bird_remain_col_cursor + k * 8;
      00011A AC*19            [24]  601 	mov	r4,_angrybird_display_game_k_131075_33
      00011C E5*1A            [12]  602 	mov	a,(_angrybird_display_game_k_131075_33 + 1)
      00011E C4               [12]  603 	swap	a
      00011F 03               [12]  604 	rr	a
      000120 54 F8            [12]  605 	anl	a,#0xf8
      000122 CC               [12]  606 	xch	a,r4
      000123 C4               [12]  607 	swap	a
      000124 03               [12]  608 	rr	a
      000125 CC               [12]  609 	xch	a,r4
      000126 6C               [12]  610 	xrl	a,r4
      000127 CC               [12]  611 	xch	a,r4
      000128 54 F8            [12]  612 	anl	a,#0xf8
      00012A CC               [12]  613 	xch	a,r4
      00012B 6C               [12]  614 	xrl	a,r4
      00012C FD               [12]  615 	mov	r5,a
      00012D 74 32            [12]  616 	mov	a,#0x32
      00012F 2C               [12]  617 	add	a,r4
      000130 F5*06            [12]  618 	mov	_col_offset,a
      000132 E4               [12]  619 	clr	a
      000133 3D               [12]  620 	addc	a,r5
      000134 F5*07            [12]  621 	mov	(_col_offset + 1),a
                                    622 ;	./src/angry_bird.c:64: for (int j = 0; j < bird_cul_size; j++)
      000136 7C 00            [12]  623 	mov	r4,#0x00
      000138 7D 00            [12]  624 	mov	r5,#0x00
      00013A                        625 00118$:
      00013A C3               [12]  626 	clr	c
      00013B EC               [12]  627 	mov	a,r4
      00013C 94 08            [12]  628 	subb	a,#0x08
      00013E ED               [12]  629 	mov	a,r5
      00013F 64 80            [12]  630 	xrl	a,#0x80
      000141 94 80            [12]  631 	subb	a,#0x80
      000143 50 4D            [24]  632 	jnc	00122$
                                    633 ;	./src/angry_bird.c:66: for (int i = 0; i < bird_row_size; i++)
      000145 7B 00            [12]  634 	mov	r3,#0x00
      000147                        635 00115$:
      000147 BB 01 00         [24]  636 	cjne	r3,#0x01,00307$
      00014A                        637 00307$:
      00014A 50 3F            [24]  638 	jnc	00119$
                                    639 ;	./src/angry_bird.c:68: OLED_SetCursor(row_offset + i, col_offset + j);
      00014C AA*04            [24]  640 	mov	r2,_row_offset
      00014E E4               [12]  641 	clr	a
      00014F 2A               [12]  642 	add	a,r2
      000150 F5 82            [12]  643 	mov	dpl,a
      000152 AA*06            [24]  644 	mov	r2,_col_offset
      000154 8C 07            [24]  645 	mov	ar7,r4
      000156 EF               [12]  646 	mov	a,r7
      000157 2A               [12]  647 	add	a,r2
      000158 F5*00            [12]  648 	mov	_OLED_SetCursor_PARM_2,a
      00015A C0 07            [24]  649 	push	ar7
      00015C C0 05            [24]  650 	push	ar5
      00015E C0 04            [24]  651 	push	ar4
      000160 12r00r00         [24]  652 	lcall	_OLED_SetCursor
      000163 D0 04            [24]  653 	pop	ar4
      000165 D0 05            [24]  654 	pop	ar5
      000167 D0 07            [24]  655 	pop	ar7
                                    656 ;	./src/angry_bird.c:69: oledSendData(bird_logo[bird_cul_size * i + j]);
      000169 EF               [12]  657 	mov	a,r7
      00016A 33               [12]  658 	rlc	a
      00016B 95 E0            [12]  659 	subb	a,acc
      00016D FE               [12]  660 	mov	r6,a
      00016E EF               [12]  661 	mov	a,r7
      00016F 24r28            [12]  662 	add	a,#_bird_logo
      000171 F5 82            [12]  663 	mov	dpl,a
      000173 EE               [12]  664 	mov	a,r6
      000174 34s00            [12]  665 	addc	a,#(_bird_logo >> 8)
      000176 F5 83            [12]  666 	mov	dph,a
      000178 E4               [12]  667 	clr	a
      000179 93               [24]  668 	movc	a,@a+dptr
      00017A F5 82            [12]  669 	mov	dpl,a
      00017C C0 05            [24]  670 	push	ar5
      00017E C0 04            [24]  671 	push	ar4
      000180 12r00r00         [24]  672 	lcall	_oledSendData
      000183 D0 04            [24]  673 	pop	ar4
      000185 D0 05            [24]  674 	pop	ar5
                                    675 ;	./src/angry_bird.c:66: for (int i = 0; i < bird_row_size; i++)
      000187 7B 01            [12]  676 	mov	r3,#0x01
      000189 80 BC            [24]  677 	sjmp	00115$
      00018B                        678 00119$:
                                    679 ;	./src/angry_bird.c:64: for (int j = 0; j < bird_cul_size; j++)
      00018B 0C               [12]  680 	inc	r4
      00018C BC 00 AB         [24]  681 	cjne	r4,#0x00,00118$
      00018F 0D               [12]  682 	inc	r5
      000190 80 A8            [24]  683 	sjmp	00118$
      000192                        684 00122$:
                                    685 ;	./src/angry_bird.c:60: for (int k = 0; k < bird_total_amount; k++)
      000192 05*19            [12]  686 	inc	_angrybird_display_game_k_131075_33
      000194 E4               [12]  687 	clr	a
      000195 B5*19 02         [24]  688 	cjne	a,_angrybird_display_game_k_131075_33,00310$
      000198 05*1A            [12]  689 	inc	(_angrybird_display_game_k_131075_33 + 1)
      00019A                        690 00310$:
      00019A 02r01r05         [24]  691 	ljmp	00121$
      00019D                        692 00107$:
                                    693 ;	./src/angry_bird.c:75: row_offset = shoot_row_cursor;
      00019D 75*04 06         [24]  694 	mov	_row_offset,#0x06
                                    695 ;	./src/angry_bird.c:76: col_offset = shoot_col_cursor;
      0001A0 E4               [12]  696 	clr	a
      0001A1 F5*05            [12]  697 	mov	(_row_offset + 1),a
      0001A3 F5*06            [12]  698 	mov	_col_offset,a
      0001A5 F5*07            [12]  699 	mov	(_col_offset + 1),a
                                    700 ;	./src/angry_bird.c:77: for (int j = 0; j < shoot_cul_size; j++)
      0001A7 FE               [12]  701 	mov	r6,a
      0001A8 FF               [12]  702 	mov	r7,a
      0001A9                        703 00127$:
      0001A9 C3               [12]  704 	clr	c
      0001AA EE               [12]  705 	mov	a,r6
      0001AB 94 08            [12]  706 	subb	a,#0x08
      0001AD EF               [12]  707 	mov	a,r7
      0001AE 64 80            [12]  708 	xrl	a,#0x80
      0001B0 94 80            [12]  709 	subb	a,#0x80
      0001B2 50 54            [24]  710 	jnc	00109$
                                    711 ;	./src/angry_bird.c:79: for (int i = 0; i < shoot_row_size; i++)
      0001B4 7D 00            [12]  712 	mov	r5,#0x00
      0001B6                        713 00124$:
      0001B6 BD 02 00         [24]  714 	cjne	r5,#0x02,00312$
      0001B9                        715 00312$:
      0001B9 50 46            [24]  716 	jnc	00128$
                                    717 ;	./src/angry_bird.c:81: OLED_SetCursor(row_offset + i, col_offset + j);
      0001BB AC*04            [24]  718 	mov	r4,_row_offset
      0001BD 8D 03            [24]  719 	mov	ar3,r5
      0001BF EB               [12]  720 	mov	a,r3
      0001C0 2C               [12]  721 	add	a,r4
      0001C1 F5 82            [12]  722 	mov	dpl,a
      0001C3 AC*06            [24]  723 	mov	r4,_col_offset
      0001C5 8E 02            [24]  724 	mov	ar2,r6
      0001C7 EA               [12]  725 	mov	a,r2
      0001C8 2C               [12]  726 	add	a,r4
      0001C9 F5*00            [12]  727 	mov	_OLED_SetCursor_PARM_2,a
      0001CB C0 07            [24]  728 	push	ar7
      0001CD C0 06            [24]  729 	push	ar6
      0001CF C0 05            [24]  730 	push	ar5
      0001D1 C0 03            [24]  731 	push	ar3
      0001D3 C0 02            [24]  732 	push	ar2
      0001D5 12r00r00         [24]  733 	lcall	_OLED_SetCursor
      0001D8 D0 02            [24]  734 	pop	ar2
      0001DA D0 03            [24]  735 	pop	ar3
                                    736 ;	./src/angry_bird.c:82: oledSendData(shooter_logo[shoot_cul_size * i + j]);
      0001DC EB               [12]  737 	mov	a,r3
      0001DD C4               [12]  738 	swap	a
      0001DE 03               [12]  739 	rr	a
      0001DF 54 F8            [12]  740 	anl	a,#0xf8
      0001E1 2A               [12]  741 	add	a,r2
      0001E2 FA               [12]  742 	mov	r2,a
      0001E3 33               [12]  743 	rlc	a
      0001E4 95 E0            [12]  744 	subb	a,acc
      0001E6 FC               [12]  745 	mov	r4,a
      0001E7 EA               [12]  746 	mov	a,r2
      0001E8 24r00            [12]  747 	add	a,#_shooter_logo
      0001EA F5 82            [12]  748 	mov	dpl,a
      0001EC EC               [12]  749 	mov	a,r4
      0001ED 34s00            [12]  750 	addc	a,#(_shooter_logo >> 8)
      0001EF F5 83            [12]  751 	mov	dph,a
      0001F1 E4               [12]  752 	clr	a
      0001F2 93               [24]  753 	movc	a,@a+dptr
      0001F3 F5 82            [12]  754 	mov	dpl,a
      0001F5 12r00r00         [24]  755 	lcall	_oledSendData
      0001F8 D0 05            [24]  756 	pop	ar5
      0001FA D0 06            [24]  757 	pop	ar6
      0001FC D0 07            [24]  758 	pop	ar7
                                    759 ;	./src/angry_bird.c:79: for (int i = 0; i < shoot_row_size; i++)
      0001FE 0D               [12]  760 	inc	r5
      0001FF 80 B5            [24]  761 	sjmp	00124$
      000201                        762 00128$:
                                    763 ;	./src/angry_bird.c:77: for (int j = 0; j < shoot_cul_size; j++)
      000201 0E               [12]  764 	inc	r6
      000202 BE 00 A4         [24]  765 	cjne	r6,#0x00,00127$
      000205 0F               [12]  766 	inc	r7
      000206 80 A1            [24]  767 	sjmp	00127$
      000208                        768 00109$:
                                    769 ;	./src/angry_bird.c:87: row_offset = bird_init_row_cursor;
      000208 75*04 07         [24]  770 	mov	_row_offset,#0x07
      00020B 75*05 00         [24]  771 	mov	(_row_offset + 1),#0x00
                                    772 ;	./src/angry_bird.c:88: col_offset = bird_init_col_cursor;
      00020E 75*06 08         [24]  773 	mov	_col_offset,#0x08
      000211 75*07 00         [24]  774 	mov	(_col_offset + 1),#0x00
                                    775 ;	./src/angry_bird.c:89: for (int j = 0; j < bird_cul_size; j++)
      000214 7E 00            [12]  776 	mov	r6,#0x00
      000216 7F 00            [12]  777 	mov	r7,#0x00
      000218                        778 00133$:
      000218 C3               [12]  779 	clr	c
      000219 EE               [12]  780 	mov	a,r6
      00021A 94 08            [12]  781 	subb	a,#0x08
      00021C EF               [12]  782 	mov	a,r7
      00021D 64 80            [12]  783 	xrl	a,#0x80
      00021F 94 80            [12]  784 	subb	a,#0x80
      000221 50 45            [24]  785 	jnc	00111$
                                    786 ;	./src/angry_bird.c:91: for (int i = 0; i < bird_row_size; i++)
      000223 7D 00            [12]  787 	mov	r5,#0x00
      000225                        788 00130$:
      000225 BD 01 00         [24]  789 	cjne	r5,#0x01,00316$
      000228                        790 00316$:
      000228 50 37            [24]  791 	jnc	00134$
                                    792 ;	./src/angry_bird.c:93: OLED_SetCursor(row_offset + i, col_offset + j);
      00022A AC*04            [24]  793 	mov	r4,_row_offset
      00022C E4               [12]  794 	clr	a
      00022D 2C               [12]  795 	add	a,r4
      00022E F5 82            [12]  796 	mov	dpl,a
      000230 AC*06            [24]  797 	mov	r4,_col_offset
      000232 8E 03            [24]  798 	mov	ar3,r6
      000234 EB               [12]  799 	mov	a,r3
      000235 2C               [12]  800 	add	a,r4
      000236 F5*00            [12]  801 	mov	_OLED_SetCursor_PARM_2,a
      000238 C0 07            [24]  802 	push	ar7
      00023A C0 06            [24]  803 	push	ar6
      00023C C0 03            [24]  804 	push	ar3
      00023E 12r00r00         [24]  805 	lcall	_OLED_SetCursor
      000241 D0 03            [24]  806 	pop	ar3
                                    807 ;	./src/angry_bird.c:94: oledSendData(bird_logo[bird_cul_size * i + j]);
      000243 EB               [12]  808 	mov	a,r3
      000244 33               [12]  809 	rlc	a
      000245 95 E0            [12]  810 	subb	a,acc
      000247 FC               [12]  811 	mov	r4,a
      000248 EB               [12]  812 	mov	a,r3
      000249 24r28            [12]  813 	add	a,#_bird_logo
      00024B F5 82            [12]  814 	mov	dpl,a
      00024D EC               [12]  815 	mov	a,r4
      00024E 34s00            [12]  816 	addc	a,#(_bird_logo >> 8)
      000250 F5 83            [12]  817 	mov	dph,a
      000252 E4               [12]  818 	clr	a
      000253 93               [24]  819 	movc	a,@a+dptr
      000254 F5 82            [12]  820 	mov	dpl,a
      000256 12r00r00         [24]  821 	lcall	_oledSendData
      000259 D0 06            [24]  822 	pop	ar6
      00025B D0 07            [24]  823 	pop	ar7
                                    824 ;	./src/angry_bird.c:91: for (int i = 0; i < bird_row_size; i++)
      00025D 7D 01            [12]  825 	mov	r5,#0x01
      00025F 80 C4            [24]  826 	sjmp	00130$
      000261                        827 00134$:
                                    828 ;	./src/angry_bird.c:89: for (int j = 0; j < bird_cul_size; j++)
      000261 0E               [12]  829 	inc	r6
      000262 BE 00 B3         [24]  830 	cjne	r6,#0x00,00133$
      000265 0F               [12]  831 	inc	r7
      000266 80 B0            [24]  832 	sjmp	00133$
      000268                        833 00111$:
                                    834 ;	./src/angry_bird.c:116: row_offset = pig1_row_cursor;
      000268 75*04 03         [24]  835 	mov	_row_offset,#0x03
      00026B 75*05 00         [24]  836 	mov	(_row_offset + 1),#0x00
                                    837 ;	./src/angry_bird.c:117: col_offset = pig1_col_cursor;
      00026E 75*06 50         [24]  838 	mov	_col_offset,#0x50
      000271 75*07 00         [24]  839 	mov	(_col_offset + 1),#0x00
                                    840 ;	./src/angry_bird.c:118: for (int j = 0; j < pig_cul_size; j++)
      000274 7E 00            [12]  841 	mov	r6,#0x00
      000276 7F 00            [12]  842 	mov	r7,#0x00
      000278                        843 00139$:
      000278 C3               [12]  844 	clr	c
      000279 EE               [12]  845 	mov	a,r6
      00027A 94 0C            [12]  846 	subb	a,#0x0c
      00027C EF               [12]  847 	mov	a,r7
      00027D 64 80            [12]  848 	xrl	a,#0x80
      00027F 94 80            [12]  849 	subb	a,#0x80
      000281 50 54            [24]  850 	jnc	00141$
                                    851 ;	./src/angry_bird.c:120: for (int i = 0; i < pig_row_size; i++)
      000283 7D 00            [12]  852 	mov	r5,#0x00
      000285                        853 00136$:
      000285 BD 02 00         [24]  854 	cjne	r5,#0x02,00320$
      000288                        855 00320$:
      000288 50 46            [24]  856 	jnc	00140$
                                    857 ;	./src/angry_bird.c:122: OLED_SetCursor(row_offset + i, col_offset + j);
      00028A AC*04            [24]  858 	mov	r4,_row_offset
      00028C 8D 03            [24]  859 	mov	ar3,r5
      00028E EB               [12]  860 	mov	a,r3
      00028F 2C               [12]  861 	add	a,r4
      000290 F5 82            [12]  862 	mov	dpl,a
      000292 AC*06            [24]  863 	mov	r4,_col_offset
      000294 8E 02            [24]  864 	mov	ar2,r6
      000296 EA               [12]  865 	mov	a,r2
      000297 2C               [12]  866 	add	a,r4
      000298 F5*00            [12]  867 	mov	_OLED_SetCursor_PARM_2,a
      00029A C0 07            [24]  868 	push	ar7
      00029C C0 06            [24]  869 	push	ar6
      00029E C0 05            [24]  870 	push	ar5
      0002A0 C0 03            [24]  871 	push	ar3
      0002A2 C0 02            [24]  872 	push	ar2
      0002A4 12r00r00         [24]  873 	lcall	_OLED_SetCursor
      0002A7 D0 02            [24]  874 	pop	ar2
      0002A9 D0 03            [24]  875 	pop	ar3
                                    876 ;	./src/angry_bird.c:123: oledSendData(pig_logo[pig_cul_size * i + j]);
      0002AB EB               [12]  877 	mov	a,r3
      0002AC 75 F0 0C         [24]  878 	mov	b,#0x0c
      0002AF A4               [48]  879 	mul	ab
      0002B0 2A               [12]  880 	add	a,r2
      0002B1 FA               [12]  881 	mov	r2,a
      0002B2 33               [12]  882 	rlc	a
      0002B3 95 E0            [12]  883 	subb	a,acc
      0002B5 FC               [12]  884 	mov	r4,a
      0002B6 EA               [12]  885 	mov	a,r2
      0002B7 24r10            [12]  886 	add	a,#_pig_logo
      0002B9 F5 82            [12]  887 	mov	dpl,a
      0002BB EC               [12]  888 	mov	a,r4
      0002BC 34s00            [12]  889 	addc	a,#(_pig_logo >> 8)
      0002BE F5 83            [12]  890 	mov	dph,a
      0002C0 E4               [12]  891 	clr	a
      0002C1 93               [24]  892 	movc	a,@a+dptr
      0002C2 F5 82            [12]  893 	mov	dpl,a
      0002C4 12r00r00         [24]  894 	lcall	_oledSendData
      0002C7 D0 05            [24]  895 	pop	ar5
      0002C9 D0 06            [24]  896 	pop	ar6
      0002CB D0 07            [24]  897 	pop	ar7
                                    898 ;	./src/angry_bird.c:120: for (int i = 0; i < pig_row_size; i++)
      0002CD 0D               [12]  899 	inc	r5
      0002CE 80 B5            [24]  900 	sjmp	00136$
      0002D0                        901 00140$:
                                    902 ;	./src/angry_bird.c:118: for (int j = 0; j < pig_cul_size; j++)
      0002D0 0E               [12]  903 	inc	r6
      0002D1 BE 00 A4         [24]  904 	cjne	r6,#0x00,00139$
      0002D4 0F               [12]  905 	inc	r7
      0002D5 80 A1            [24]  906 	sjmp	00139$
      0002D7                        907 00141$:
                                    908 ;	./src/angry_bird.c:126: }
      0002D7 22               [24]  909 	ret
                                    910 ;------------------------------------------------------------
                                    911 ;Allocation info for local variables in function 'display_for_OLED_debug'
                                    912 ;------------------------------------------------------------
                                    913 ;	./src/angry_bird.c:129: void display_for_OLED_debug()
                                    914 ;	-----------------------------------------
                                    915 ;	 function display_for_OLED_debug
                                    916 ;	-----------------------------------------
      0002D8                        917 _display_for_OLED_debug:
                                    918 ;	./src/angry_bird.c:131: if (led_cur_state)
      0002D8 E5*1B            [12]  919 	mov	a,_led_cur_state
      0002DA 45*1C            [12]  920 	orl	a,(_led_cur_state + 1)
      0002DC 60 12            [24]  921 	jz	00102$
                                    922 ;	./src/angry_bird.c:133: OLED_SetCursor(3, 40);
      0002DE 75*00 28         [24]  923 	mov	_OLED_SetCursor_PARM_2,#0x28
      0002E1 75 82 03         [24]  924 	mov	dpl,#0x03
      0002E4 12r00r00         [24]  925 	lcall	_OLED_SetCursor
                                    926 ;	./src/angry_bird.c:134: OLED_DisplayString("             ");
      0002E7 90r00r36         [24]  927 	mov	dptr,#___str_2
      0002EA 75 F0 80         [24]  928 	mov	b,#0x80
      0002ED 02r00r00         [24]  929 	ljmp	_OLED_DisplayString
      0002F0                        930 00102$:
                                    931 ;	./src/angry_bird.c:138: OLED_SetCursor(3, 40);
      0002F0 75*00 28         [24]  932 	mov	_OLED_SetCursor_PARM_2,#0x28
      0002F3 75 82 03         [24]  933 	mov	dpl,#0x03
      0002F6 12r00r00         [24]  934 	lcall	_OLED_SetCursor
                                    935 ;	./src/angry_bird.c:139: OLED_DisplayString("Waiting .... ");
      0002F9 90r00r44         [24]  936 	mov	dptr,#___str_3
      0002FC 75 F0 80         [24]  937 	mov	b,#0x80
                                    938 ;	./src/angry_bird.c:141: }
      0002FF 02r00r00         [24]  939 	ljmp	_OLED_DisplayString
                                    940 ;------------------------------------------------------------
                                    941 ;Allocation info for local variables in function 'angrybird_state_machine'
                                    942 ;------------------------------------------------------------
                                    943 ;	./src/angry_bird.c:147: void angrybird_state_machine(void)
                                    944 ;	-----------------------------------------
                                    945 ;	 function angrybird_state_machine
                                    946 ;	-----------------------------------------
      000302                        947 _angrybird_state_machine:
                                    948 ;	./src/angry_bird.c:149: switch (cur_state)
      000302 74 03            [12]  949 	mov	a,#0x03
      000304 B5*1D 06         [24]  950 	cjne	a,_cur_state,00155$
      000307 E4               [12]  951 	clr	a
      000308 B5*1E 02         [24]  952 	cjne	a,(_cur_state + 1),00155$
      00030B 80 0D            [24]  953 	sjmp	00102$
      00030D                        954 00155$:
      00030D 74 04            [12]  955 	mov	a,#0x04
      00030F B5*1D 06         [24]  956 	cjne	a,_cur_state,00156$
      000312 E4               [12]  957 	clr	a
      000313 B5*1E 02         [24]  958 	cjne	a,(_cur_state + 1),00156$
      000316 80 02            [24]  959 	sjmp	00157$
      000318                        960 00156$:
      000318 80 07            [24]  961 	sjmp	00103$
      00031A                        962 00157$:
                                    963 ;	./src/angry_bird.c:152: case STATE_PLAY_HARD:
      00031A                        964 00102$:
                                    965 ;	./src/angry_bird.c:153: P1_0 = 0;
                                    966 ;	assignBit
      00031A C2 90            [12]  967 	clr	_P1_0
                                    968 ;	./src/angry_bird.c:154: angrybird_game_state();
      00031C 12r03r8E         [24]  969 	lcall	_angrybird_game_state
                                    970 ;	./src/angry_bird.c:155: break;
                                    971 ;	./src/angry_bird.c:157: default:
      00031F 80 2D            [24]  972 	sjmp	00109$
      000321                        973 00103$:
                                    974 ;	./src/angry_bird.c:158: if (led_cur_state == 0)
      000321 E5*1B            [12]  975 	mov	a,_led_cur_state
      000323 45*1C            [12]  976 	orl	a,(_led_cur_state + 1)
                                    977 ;	./src/angry_bird.c:159: led_cur_state = 1;
      000325 70 07            [24]  978 	jnz	00107$
      000327 75*1B 01         [24]  979 	mov	_led_cur_state,#0x01
      00032A F5*1C            [12]  980 	mov	(_led_cur_state + 1),a
      00032C 80 12            [24]  981 	sjmp	00108$
      00032E                        982 00107$:
                                    983 ;	./src/angry_bird.c:160: else if (led_cur_state == 1)
      00032E 74 01            [12]  984 	mov	a,#0x01
      000330 B5*1B 06         [24]  985 	cjne	a,_led_cur_state,00159$
      000333 14               [12]  986 	dec	a
      000334 B5*1C 02         [24]  987 	cjne	a,(_led_cur_state + 1),00159$
      000337 80 02            [24]  988 	sjmp	00160$
      000339                        989 00159$:
      000339 80 05            [24]  990 	sjmp	00108$
      00033B                        991 00160$:
                                    992 ;	./src/angry_bird.c:161: led_cur_state = 0;
      00033B E4               [12]  993 	clr	a
      00033C F5*1B            [12]  994 	mov	_led_cur_state,a
      00033E F5*1C            [12]  995 	mov	(_led_cur_state + 1),a
      000340                        996 00108$:
                                    997 ;	./src/angry_bird.c:162: P1_0 = led_cur_state;
                                    998 ;	assignBit
      000340 E5*1B            [12]  999 	mov	a,_led_cur_state
      000342 45*1C            [12] 1000 	orl	a,(_led_cur_state + 1)
      000344 24 FF            [12] 1001 	add	a,#0xff
      000346 92 90            [24] 1002 	mov	_P1_0,c
                                   1003 ;	./src/angry_bird.c:164: delay_ms(500);
      000348 90 01 F4         [24] 1004 	mov	dptr,#0x01f4
      00034B 12r00r00         [24] 1005 	lcall	_delay_ms
                                   1006 ;	./src/angry_bird.c:166: }
      00034E                       1007 00109$:
                                   1008 ;	./src/angry_bird.c:169: if (received_flag == 1)
      00034E 74 01            [12] 1009 	mov	a,#0x01
      000350 B5*03 2C         [24] 1010 	cjne	a,_received_flag,00114$
                                   1011 ;	./src/angry_bird.c:171: cur_state = received_data;
      000353 85*02*1D         [24] 1012 	mov	_cur_state,_received_data
      000356 75*1E 00         [24] 1013 	mov	(_cur_state + 1),#0x00
                                   1014 ;	./src/angry_bird.c:172: received_flag = 0;
      000359 75*03 00         [24] 1015 	mov	_received_flag,#0x00
                                   1016 ;	./src/angry_bird.c:173: P1_0 = 0;
                                   1017 ;	assignBit
      00035C C2 90            [12] 1018 	clr	_P1_0
                                   1019 ;	./src/angry_bird.c:175: I2C_Start();
      00035E 12r00r00         [24] 1020 	lcall	_I2C_Start
                                   1021 ;	./src/angry_bird.c:176: OLED_Init();
      000361 12r00r00         [24] 1022 	lcall	_OLED_Init
                                   1023 ;	./src/angry_bird.c:179: if (cur_state == STATE_PLAY_EASY || cur_state == STATE_PLAY_HARD)
      000364 74 03            [12] 1024 	mov	a,#0x03
      000366 B5*1D 06         [24] 1025 	cjne	a,_cur_state,00163$
      000369 E4               [12] 1026 	clr	a
      00036A B5*1E 02         [24] 1027 	cjne	a,(_cur_state + 1),00163$
      00036D 80 0D            [24] 1028 	sjmp	00110$
      00036F                       1029 00163$:
      00036F 74 04            [12] 1030 	mov	a,#0x04
      000371 B5*1D 06         [24] 1031 	cjne	a,_cur_state,00164$
      000374 E4               [12] 1032 	clr	a
      000375 B5*1E 02         [24] 1033 	cjne	a,(_cur_state + 1),00164$
      000378 80 02            [24] 1034 	sjmp	00165$
      00037A                       1035 00164$:
      00037A 80 03            [24] 1036 	sjmp	00114$
      00037C                       1037 00165$:
      00037C                       1038 00110$:
                                   1039 ;	./src/angry_bird.c:180: angrybird_display_game();
      00037C 12r00r00         [24] 1040 	lcall	_angrybird_display_game
      00037F                       1041 00114$:
                                   1042 ;	./src/angry_bird.c:184: if (send_flag == 1)
      00037F 74 01            [12] 1043 	mov	a,#0x01
      000381 B5*01 09         [24] 1044 	cjne	a,_send_flag,00117$
                                   1045 ;	./src/angry_bird.c:186: I2C_Stop();
      000384 12r00r00         [24] 1046 	lcall	_I2C_Stop
                                   1047 ;	./src/angry_bird.c:187: SBUF = send_data; // send data to SBUF
      000387 85*00 99         [24] 1048 	mov	_SBUF,_send_data
                                   1049 ;	./src/angry_bird.c:188: send_flag = 0;
      00038A 75*01 00         [24] 1050 	mov	_send_flag,#0x00
      00038D                       1051 00117$:
                                   1052 ;	./src/angry_bird.c:194: }
      00038D 22               [24] 1053 	ret
                                   1054 ;------------------------------------------------------------
                                   1055 ;Allocation info for local variables in function 'angrybird_game_state'
                                   1056 ;------------------------------------------------------------
                                   1057 ;which                     Allocated to registers r7 
                                   1058 ;control_angle_            Allocated with name '_angrybird_game_state_control_angle__196609_65'
                                   1059 ;i                         Allocated to registers r4 r5 
                                   1060 ;angle_                    Allocated with name '_angrybird_game_state_angle__196610_66'
                                   1061 ;which                     Allocated to registers r7 
                                   1062 ;control_strength_         Allocated with name '_angrybird_game_state_control_strength__196609_71'
                                   1063 ;j                         Allocated to registers r6 r7 
                                   1064 ;i                         Allocated to registers r5 
                                   1065 ;delta_y                   Allocated with name '_angrybird_game_state_delta_y_196609_78'
                                   1066 ;delta_x                   Allocated with name '_angrybird_game_state_delta_x_196609_78'
                                   1067 ;peak_x                    Allocated with name '_angrybird_game_state_peak_x_196609_78'
                                   1068 ;peak_y                    Allocated with name '_angrybird_game_state_peak_y_196609_78'
                                   1069 ;a                         Allocated with name '_angrybird_game_state_a_196609_78'
                                   1070 ;j                         Allocated to registers r2 r3 
                                   1071 ;i                         Allocated to registers r7 
                                   1072 ;i                         Allocated with name '_angrybird_game_state_i_262145_83'
                                   1073 ;output_row                Allocated with name '_angrybird_game_state_output_row_327681_84'
                                   1074 ;j                         Allocated to registers r2 r3 
                                   1075 ;i                         Allocated to registers r5 
                                   1076 ;j                         Allocated to registers r6 r7 
                                   1077 ;i                         Allocated to registers r5 
                                   1078 ;j                         Allocated to registers r6 r7 
                                   1079 ;i                         Allocated to registers r5 
                                   1080 ;j                         Allocated to registers r6 r7 
                                   1081 ;i                         Allocated to registers r5 
                                   1082 ;sloc1                     Allocated with name '_angrybird_game_state_sloc1_1_0'
                                   1083 ;------------------------------------------------------------
                                   1084 ;	./src/angry_bird.c:204: void angrybird_game_state(void)
                                   1085 ;	-----------------------------------------
                                   1086 ;	 function angrybird_game_state
                                   1087 ;	-----------------------------------------
      00038E                       1088 _angrybird_game_state:
                                   1089 ;	./src/angry_bird.c:207: if (((but_up == 0) && (prebut_up == 1)) || ((but_down == 0) && (prebut_down == 1)))
      00038E 20 A0 0B         [24] 1090 	jb	_P2_0,00119$
      000391 74 01            [12] 1091 	mov	a,#0x01
      000393 B5*1F 06         [24] 1092 	cjne	a,_prebut_up,00600$
      000396 14               [12] 1093 	dec	a
      000397 B5*20 02         [24] 1094 	cjne	a,(_prebut_up + 1),00600$
      00039A 80 14            [24] 1095 	sjmp	00115$
      00039C                       1096 00600$:
      00039C                       1097 00119$:
      00039C 30 A1 03         [24] 1098 	jnb	_P2_1,00601$
      00039F 02r04rB5         [24] 1099 	ljmp	00116$
      0003A2                       1100 00601$:
      0003A2 74 01            [12] 1101 	mov	a,#0x01
      0003A4 B5*21 06         [24] 1102 	cjne	a,_prebut_down,00602$
      0003A7 14               [12] 1103 	dec	a
      0003A8 B5*22 02         [24] 1104 	cjne	a,(_prebut_down + 1),00602$
      0003AB 80 03            [24] 1105 	sjmp	00603$
      0003AD                       1106 00602$:
      0003AD 02r04rB5         [24] 1107 	ljmp	00116$
      0003B0                       1108 00603$:
      0003B0                       1109 00115$:
                                   1110 ;	./src/angry_bird.c:210: int which = (but_up == 0) ? 1 : 0;
      0003B0 20 A0 04         [24] 1111 	jb	_P2_0,00208$
      0003B3 7F 01            [12] 1112 	mov	r7,#0x01
      0003B5 80 02            [24] 1113 	sjmp	00209$
      0003B7                       1114 00208$:
      0003B7 7F 00            [12] 1115 	mov	r7,#0x00
      0003B9                       1116 00209$:
                                   1117 ;	./src/angry_bird.c:211: if (but_up == 0 || but_down == 0)
      0003B9 30 A0 06         [24] 1118 	jnb	_P2_0,00112$
      0003BC 30 A1 03         [24] 1119 	jnb	_P2_1,00606$
      0003BF 02r04rB5         [24] 1120 	ljmp	00116$
      0003C2                       1121 00606$:
      0003C2                       1122 00112$:
                                   1123 ;	./src/angry_bird.c:213: if (which == 1)
      0003C2 BF 01 24         [24] 1124 	cjne	r7,#0x01,00106$
                                   1125 ;	./src/angry_bird.c:215: control_angle += 10;
      0003C5 74 0A            [12] 1126 	mov	a,#0x0a
      0003C7 25*0C            [12] 1127 	add	a,_control_angle
      0003C9 F5*0C            [12] 1128 	mov	_control_angle,a
      0003CB E4               [12] 1129 	clr	a
      0003CC 35*0D            [12] 1130 	addc	a,(_control_angle + 1)
      0003CE F5*0D            [12] 1131 	mov	(_control_angle + 1),a
                                   1132 ;	./src/angry_bird.c:216: if (control_angle > 90)
      0003D0 C3               [12] 1133 	clr	c
      0003D1 74 5A            [12] 1134 	mov	a,#0x5a
      0003D3 95*0C            [12] 1135 	subb	a,_control_angle
      0003D5 74 80            [12] 1136 	mov	a,#(0x00 ^ 0x80)
      0003D7 85*0D F0         [24] 1137 	mov	b,(_control_angle + 1)
      0003DA 63 F0 80         [24] 1138 	xrl	b,#0x80
      0003DD 95 F0            [12] 1139 	subb	a,b
      0003DF 50 1C            [24] 1140 	jnc	00107$
                                   1141 ;	./src/angry_bird.c:217: control_angle = 90;
      0003E1 75*0C 5A         [24] 1142 	mov	_control_angle,#0x5a
      0003E4 75*0D 00         [24] 1143 	mov	(_control_angle + 1),#0x00
      0003E7 80 14            [24] 1144 	sjmp	00107$
      0003E9                       1145 00106$:
                                   1146 ;	./src/angry_bird.c:221: control_angle -= 10;
      0003E9 E5*0C            [12] 1147 	mov	a,_control_angle
      0003EB 24 F6            [12] 1148 	add	a,#0xf6
      0003ED F5*0C            [12] 1149 	mov	_control_angle,a
      0003EF E5*0D            [12] 1150 	mov	a,(_control_angle + 1)
      0003F1 34 FF            [12] 1151 	addc	a,#0xff
                                   1152 ;	./src/angry_bird.c:222: if (control_angle < 0)
      0003F3 F5*0D            [12] 1153 	mov	(_control_angle + 1),a
      0003F5 30 E7 05         [24] 1154 	jnb	acc.7,00107$
                                   1155 ;	./src/angry_bird.c:223: control_angle = 0;
      0003F8 E4               [12] 1156 	clr	a
      0003F9 F5*0C            [12] 1157 	mov	_control_angle,a
      0003FB F5*0D            [12] 1158 	mov	(_control_angle + 1),a
      0003FD                       1159 00107$:
                                   1160 ;	./src/angry_bird.c:228: int i = 0;
                                   1161 ;	./src/angry_bird.c:229: if (control_angle < 0)
      0003FD E4               [12] 1162 	clr	a
      0003FE FE               [12] 1163 	mov	r6,a
      0003FF FF               [12] 1164 	mov	r7,a
      000400 E5*0D            [12] 1165 	mov	a,(_control_angle + 1)
      000402 30 E7 07         [24] 1166 	jnb	acc.7,00109$
                                   1167 ;	./src/angry_bird.c:230: control_angle_[i++] = '-';
      000405 7E 01            [12] 1168 	mov	r6,#0x01
      000407 7F 00            [12] 1169 	mov	r7,#0x00
      000409 75*29 2D         [24] 1170 	mov	_angrybird_game_state_control_angle__196609_65,#0x2d
      00040C                       1171 00109$:
                                   1172 ;	./src/angry_bird.c:231: int angle_ = (control_angle >= 0) ? control_angle : -1 * control_angle;
      00040C E5*0D            [12] 1173 	mov	a,(_control_angle + 1)
      00040E 33               [12] 1174 	rlc	a
      00040F 92*01            [24] 1175 	mov	_angrybird_game_state_sloc0_1_0,c
      000411 40 06            [24] 1176 	jc	00210$
      000413 AC*0C            [24] 1177 	mov	r4,_control_angle
      000415 AD*0D            [24] 1178 	mov	r5,(_control_angle + 1)
      000417 80 09            [24] 1179 	sjmp	00211$
      000419                       1180 00210$:
      000419 C3               [12] 1181 	clr	c
      00041A E4               [12] 1182 	clr	a
      00041B 95*0C            [12] 1183 	subb	a,_control_angle
      00041D FC               [12] 1184 	mov	r4,a
      00041E E4               [12] 1185 	clr	a
      00041F 95*0D            [12] 1186 	subb	a,(_control_angle + 1)
      000421 FD               [12] 1187 	mov	r5,a
      000422                       1188 00211$:
      000422 8C*2E            [24] 1189 	mov	_angrybird_game_state_angle__196610_66,r4
      000424 8D*2F            [24] 1190 	mov	(_angrybird_game_state_angle__196610_66 + 1),r5
                                   1191 ;	./src/angry_bird.c:232: if (angle_ % 100 / 10 != 0)
      000426 75*00 64         [24] 1192 	mov	__modsint_PARM_2,#0x64
      000429 75*01 00         [24] 1193 	mov	(__modsint_PARM_2 + 1),#0x00
      00042C 85*2E 82         [24] 1194 	mov	dpl,_angrybird_game_state_angle__196610_66
      00042F 85*2F 83         [24] 1195 	mov	dph,(_angrybird_game_state_angle__196610_66 + 1)
      000432 C0 07            [24] 1196 	push	ar7
      000434 C0 06            [24] 1197 	push	ar6
      000436 12r00r00         [24] 1198 	lcall	__modsint
      000439 75*00 0A         [24] 1199 	mov	__divsint_PARM_2,#0x0a
      00043C 75*01 00         [24] 1200 	mov	(__divsint_PARM_2 + 1),#0x00
      00043F 12r00r00         [24] 1201 	lcall	__divsint
      000442 AA 82            [24] 1202 	mov	r2,dpl
      000444 AB 83            [24] 1203 	mov	r3,dph
      000446 D0 06            [24] 1204 	pop	ar6
      000448 D0 07            [24] 1205 	pop	ar7
      00044A EA               [12] 1206 	mov	a,r2
      00044B 4B               [12] 1207 	orl	a,r3
      00044C 60 11            [24] 1208 	jz	00111$
                                   1209 ;	./src/angry_bird.c:233: control_angle_[i++] = '0' + angle_ % 100 / 10;
      00044E 8E 04            [24] 1210 	mov	ar4,r6
      000450 8F 05            [24] 1211 	mov	ar5,r7
      000452 0E               [12] 1212 	inc	r6
      000453 BE 00 01         [24] 1213 	cjne	r6,#0x00,00614$
      000456 0F               [12] 1214 	inc	r7
      000457                       1215 00614$:
      000457 EC               [12] 1216 	mov	a,r4
      000458 24r29            [12] 1217 	add	a,#_angrybird_game_state_control_angle__196609_65
      00045A F9               [12] 1218 	mov	r1,a
      00045B 74 30            [12] 1219 	mov	a,#0x30
      00045D 2A               [12] 1220 	add	a,r2
      00045E F7               [12] 1221 	mov	@r1,a
      00045F                       1222 00111$:
                                   1223 ;	./src/angry_bird.c:234: control_angle_[i++] = '0' + angle_ % 10;
      00045F 74 01            [12] 1224 	mov	a,#0x01
      000461 2E               [12] 1225 	add	a,r6
      000462 FC               [12] 1226 	mov	r4,a
      000463 E4               [12] 1227 	clr	a
      000464 3F               [12] 1228 	addc	a,r7
      000465 FD               [12] 1229 	mov	r5,a
      000466 EE               [12] 1230 	mov	a,r6
      000467 24r29            [12] 1231 	add	a,#_angrybird_game_state_control_angle__196609_65
      000469 F9               [12] 1232 	mov	r1,a
      00046A 75*00 0A         [24] 1233 	mov	__modsint_PARM_2,#0x0a
      00046D 75*01 00         [24] 1234 	mov	(__modsint_PARM_2 + 1),#0x00
      000470 85*2E 82         [24] 1235 	mov	dpl,_angrybird_game_state_angle__196610_66
      000473 85*2F 83         [24] 1236 	mov	dph,(_angrybird_game_state_angle__196610_66 + 1)
      000476 C0 05            [24] 1237 	push	ar5
      000478 C0 04            [24] 1238 	push	ar4
      00047A C0 01            [24] 1239 	push	ar1
      00047C 12r00r00         [24] 1240 	lcall	__modsint
      00047F AE 82            [24] 1241 	mov	r6,dpl
      000481 D0 01            [24] 1242 	pop	ar1
      000483 D0 04            [24] 1243 	pop	ar4
      000485 D0 05            [24] 1244 	pop	ar5
      000487 74 30            [12] 1245 	mov	a,#0x30
      000489 2E               [12] 1246 	add	a,r6
      00048A F7               [12] 1247 	mov	@r1,a
                                   1248 ;	./src/angry_bird.c:235: control_angle_[i++] = '\0';
      00048B EC               [12] 1249 	mov	a,r4
      00048C 24r29            [12] 1250 	add	a,#_angrybird_game_state_control_angle__196609_65
      00048E F8               [12] 1251 	mov	r0,a
      00048F 76 00            [12] 1252 	mov	@r0,#0x00
                                   1253 ;	./src/angry_bird.c:237: OLED_SetCursor(angle_text_row_cursor, angle_text_col_cursor);
      000491 75*00 1E         [24] 1254 	mov	_OLED_SetCursor_PARM_2,#0x1e
      000494 75 82 00         [24] 1255 	mov	dpl,#0x00
      000497 12r00r00         [24] 1256 	lcall	_OLED_SetCursor
                                   1257 ;	./src/angry_bird.c:238: OLED_DisplayString("   ");
      00049A 90r00r52         [24] 1258 	mov	dptr,#___str_4
      00049D 75 F0 80         [24] 1259 	mov	b,#0x80
      0004A0 12r00r00         [24] 1260 	lcall	_OLED_DisplayString
                                   1261 ;	./src/angry_bird.c:239: OLED_SetCursor(angle_text_row_cursor, angle_text_col_cursor);
      0004A3 75*00 1E         [24] 1262 	mov	_OLED_SetCursor_PARM_2,#0x1e
      0004A6 75 82 00         [24] 1263 	mov	dpl,#0x00
      0004A9 12r00r00         [24] 1264 	lcall	_OLED_SetCursor
                                   1265 ;	./src/angry_bird.c:240: OLED_DisplayString(control_angle_);
      0004AC 90r00r29         [24] 1266 	mov	dptr,#_angrybird_game_state_control_angle__196609_65
      0004AF 75 F0 40         [24] 1267 	mov	b,#0x40
      0004B2 12r00r00         [24] 1268 	lcall	_OLED_DisplayString
      0004B5                       1269 00116$:
                                   1270 ;	./src/angry_bird.c:245: if (((but_left == 0) && (prebut_left == 1)) || ((but_right == 0) && (prebut_right == 1)))
      0004B5 20 B2 0B         [24] 1271 	jb	_INT0,00134$
      0004B8 74 01            [12] 1272 	mov	a,#0x01
      0004BA B5*23 06         [24] 1273 	cjne	a,_prebut_left,00616$
      0004BD 14               [12] 1274 	dec	a
      0004BE B5*24 02         [24] 1275 	cjne	a,(_prebut_left + 1),00616$
      0004C1 80 14            [24] 1276 	sjmp	00130$
      0004C3                       1277 00616$:
      0004C3                       1278 00134$:
      0004C3 30 B3 03         [24] 1279 	jnb	_INT1,00617$
      0004C6 02r05r55         [24] 1280 	ljmp	00131$
      0004C9                       1281 00617$:
      0004C9 74 01            [12] 1282 	mov	a,#0x01
      0004CB B5*25 06         [24] 1283 	cjne	a,_prebut_right,00618$
      0004CE 14               [12] 1284 	dec	a
      0004CF B5*26 02         [24] 1285 	cjne	a,(_prebut_right + 1),00618$
      0004D2 80 03            [24] 1286 	sjmp	00619$
      0004D4                       1287 00618$:
      0004D4 02r05r55         [24] 1288 	ljmp	00131$
      0004D7                       1289 00619$:
      0004D7                       1290 00130$:
                                   1291 ;	./src/angry_bird.c:248: int which = (but_left == 0) ? 1 : 0;
      0004D7 20 B2 04         [24] 1292 	jb	_INT0,00212$
      0004DA 7F 01            [12] 1293 	mov	r7,#0x01
      0004DC 80 02            [24] 1294 	sjmp	00213$
      0004DE                       1295 00212$:
      0004DE 7F 00            [12] 1296 	mov	r7,#0x00
      0004E0                       1297 00213$:
                                   1298 ;	./src/angry_bird.c:249: if (but_left == 0 || but_right == 0)
      0004E0 30 B2 03         [24] 1299 	jnb	_INT0,00127$
      0004E3 20 B3 6F         [24] 1300 	jb	_INT1,00131$
      0004E6                       1301 00127$:
                                   1302 ;	./src/angry_bird.c:251: if (which == 1)
      0004E6 BF 01 1E         [24] 1303 	cjne	r7,#0x01,00125$
                                   1304 ;	./src/angry_bird.c:253: control_strength--;
      0004E9 15*0E            [12] 1305 	dec	_control_strength
      0004EB 74 FF            [12] 1306 	mov	a,#0xff
      0004ED B5*0E 02         [24] 1307 	cjne	a,_control_strength,00625$
      0004F0 15*0F            [12] 1308 	dec	(_control_strength + 1)
      0004F2                       1309 00625$:
                                   1310 ;	./src/angry_bird.c:254: if (control_strength < 1)
      0004F2 C3               [12] 1311 	clr	c
      0004F3 E5*0E            [12] 1312 	mov	a,_control_strength
      0004F5 94 01            [12] 1313 	subb	a,#0x01
      0004F7 E5*0F            [12] 1314 	mov	a,(_control_strength + 1)
      0004F9 64 80            [12] 1315 	xrl	a,#0x80
      0004FB 94 80            [12] 1316 	subb	a,#0x80
      0004FD 50 28            [24] 1317 	jnc	00126$
                                   1318 ;	./src/angry_bird.c:255: control_strength = 1;
      0004FF 75*0E 01         [24] 1319 	mov	_control_strength,#0x01
      000502 75*0F 00         [24] 1320 	mov	(_control_strength + 1),#0x00
      000505 80 20            [24] 1321 	sjmp	00126$
      000507                       1322 00125$:
                                   1323 ;	./src/angry_bird.c:259: control_strength--;
      000507 15*0E            [12] 1324 	dec	_control_strength
      000509 74 FF            [12] 1325 	mov	a,#0xff
      00050B B5*0E 02         [24] 1326 	cjne	a,_control_strength,00627$
      00050E 15*0F            [12] 1327 	dec	(_control_strength + 1)
      000510                       1328 00627$:
                                   1329 ;	./src/angry_bird.c:260: if (control_strength > 3)
      000510 C3               [12] 1330 	clr	c
      000511 74 03            [12] 1331 	mov	a,#0x03
      000513 95*0E            [12] 1332 	subb	a,_control_strength
      000515 74 80            [12] 1333 	mov	a,#(0x00 ^ 0x80)
      000517 85*0F F0         [24] 1334 	mov	b,(_control_strength + 1)
      00051A 63 F0 80         [24] 1335 	xrl	b,#0x80
      00051D 95 F0            [12] 1336 	subb	a,b
      00051F 50 06            [24] 1337 	jnc	00126$
                                   1338 ;	./src/angry_bird.c:261: control_strength = 3;
      000521 75*0E 03         [24] 1339 	mov	_control_strength,#0x03
      000524 75*0F 00         [24] 1340 	mov	(_control_strength + 1),#0x00
      000527                       1341 00126$:
                                   1342 ;	./src/angry_bird.c:266: control_strength_[0] = '0' + control_strength;
      000527 AF*0E            [24] 1343 	mov	r7,_control_strength
      000529 74 30            [12] 1344 	mov	a,#0x30
      00052B 2F               [12] 1345 	add	a,r7
      00052C F5*30            [12] 1346 	mov	_angrybird_game_state_control_strength__196609_71,a
                                   1347 ;	./src/angry_bird.c:267: control_strength_[1] = '\0';
      00052E 75*31 00         [24] 1348 	mov	(_angrybird_game_state_control_strength__196609_71 + 0x0001),#0x00
                                   1349 ;	./src/angry_bird.c:269: OLED_SetCursor(strength_text_row_cursor, strength_text_col_cursor);
      000531 75*00 0A         [24] 1350 	mov	_OLED_SetCursor_PARM_2,#0x0a
      000534 75 82 00         [24] 1351 	mov	dpl,#0x00
      000537 12r00r00         [24] 1352 	lcall	_OLED_SetCursor
                                   1353 ;	./src/angry_bird.c:270: OLED_DisplayString(" ");
      00053A 90r00r56         [24] 1354 	mov	dptr,#___str_5
      00053D 75 F0 80         [24] 1355 	mov	b,#0x80
      000540 12r00r00         [24] 1356 	lcall	_OLED_DisplayString
                                   1357 ;	./src/angry_bird.c:271: OLED_SetCursor(strength_text_row_cursor, strength_text_col_cursor);
      000543 75*00 0A         [24] 1358 	mov	_OLED_SetCursor_PARM_2,#0x0a
      000546 75 82 00         [24] 1359 	mov	dpl,#0x00
      000549 12r00r00         [24] 1360 	lcall	_OLED_SetCursor
                                   1361 ;	./src/angry_bird.c:272: OLED_DisplayString(control_strength_);
      00054C 90r00r30         [24] 1362 	mov	dptr,#_angrybird_game_state_control_strength__196609_71
      00054F 75 F0 40         [24] 1363 	mov	b,#0x40
      000552 12r00r00         [24] 1364 	lcall	_OLED_DisplayString
      000555                       1365 00131$:
                                   1366 ;	./src/angry_bird.c:277: if ((but_enter == 0) && (prebut_enter == 1))
      000555 30 A2 03         [24] 1367 	jnb	_P2_2,00629$
      000558 02r09rF5         [24] 1368 	ljmp	00159$
      00055B                       1369 00629$:
      00055B 74 01            [12] 1370 	mov	a,#0x01
      00055D B5*27 06         [24] 1371 	cjne	a,_prebut_enter,00630$
      000560 14               [12] 1372 	dec	a
      000561 B5*28 02         [24] 1373 	cjne	a,(_prebut_enter + 1),00630$
      000564 80 03            [24] 1374 	sjmp	00631$
      000566                       1375 00630$:
      000566 02r09rF5         [24] 1376 	ljmp	00159$
      000569                       1377 00631$:
                                   1378 ;	./src/angry_bird.c:279: delay_ms(10);
      000569 90 00 0A         [24] 1379 	mov	dptr,#0x000a
      00056C 12r00r00         [24] 1380 	lcall	_delay_ms
                                   1381 ;	./src/angry_bird.c:280: if (but_enter == 0)
      00056F 30 A2 03         [24] 1382 	jnb	_P2_2,00632$
      000572 02r09rF5         [24] 1383 	ljmp	00159$
      000575                       1384 00632$:
                                   1385 ;	./src/angry_bird.c:282: bird_amt--;
      000575 15*08            [12] 1386 	dec	_bird_amt
      000577 74 FF            [12] 1387 	mov	a,#0xff
      000579 B5*08 02         [24] 1388 	cjne	a,_bird_amt,00633$
      00057C 15*09            [12] 1389 	dec	(_bird_amt + 1)
      00057E                       1390 00633$:
                                   1391 ;	./src/angry_bird.c:284: row_offset = 0;
      00057E E4               [12] 1392 	clr	a
      00057F F5*04            [12] 1393 	mov	_row_offset,a
      000581 F5*05            [12] 1394 	mov	(_row_offset + 1),a
                                   1395 ;	./src/angry_bird.c:285: col_offset = bird_remain_col_cursor + (bird_total_amount - bird_amt - 1) * 8;
      000583 74 08            [12] 1396 	mov	a,#0x08
      000585 C3               [12] 1397 	clr	c
      000586 95*08            [12] 1398 	subb	a,_bird_amt
      000588 FE               [12] 1399 	mov	r6,a
      000589 E4               [12] 1400 	clr	a
      00058A 95*09            [12] 1401 	subb	a,(_bird_amt + 1)
      00058C C4               [12] 1402 	swap	a
      00058D 03               [12] 1403 	rr	a
      00058E 54 F8            [12] 1404 	anl	a,#0xf8
      000590 CE               [12] 1405 	xch	a,r6
      000591 C4               [12] 1406 	swap	a
      000592 03               [12] 1407 	rr	a
      000593 CE               [12] 1408 	xch	a,r6
      000594 6E               [12] 1409 	xrl	a,r6
      000595 CE               [12] 1410 	xch	a,r6
      000596 54 F8            [12] 1411 	anl	a,#0xf8
      000598 CE               [12] 1412 	xch	a,r6
      000599 6E               [12] 1413 	xrl	a,r6
      00059A FF               [12] 1414 	mov	r7,a
      00059B 74 32            [12] 1415 	mov	a,#0x32
      00059D 2E               [12] 1416 	add	a,r6
      00059E F5*06            [12] 1417 	mov	_col_offset,a
      0005A0 E4               [12] 1418 	clr	a
      0005A1 3F               [12] 1419 	addc	a,r7
      0005A2 F5*07            [12] 1420 	mov	(_col_offset + 1),a
                                   1421 ;	./src/angry_bird.c:286: for (int j = 0; j < bird_cul_size; j++)
      0005A4 7E 00            [12] 1422 	mov	r6,#0x00
      0005A6 7F 00            [12] 1423 	mov	r7,#0x00
      0005A8                       1424 00171$:
      0005A8 C3               [12] 1425 	clr	c
      0005A9 EE               [12] 1426 	mov	a,r6
      0005AA 94 08            [12] 1427 	subb	a,#0x08
      0005AC EF               [12] 1428 	mov	a,r7
      0005AD 64 80            [12] 1429 	xrl	a,#0x80
      0005AF 94 80            [12] 1430 	subb	a,#0x80
      0005B1 50 31            [24] 1431 	jnc	00136$
                                   1432 ;	./src/angry_bird.c:288: for (int i = 0; i < bird_row_size; i++)
      0005B3 7D 00            [12] 1433 	mov	r5,#0x00
      0005B5                       1434 00168$:
      0005B5 BD 01 00         [24] 1435 	cjne	r5,#0x01,00635$
      0005B8                       1436 00635$:
      0005B8 50 23            [24] 1437 	jnc	00172$
                                   1438 ;	./src/angry_bird.c:290: OLED_SetCursor(row_offset + i, col_offset + j);
      0005BA AC*04            [24] 1439 	mov	r4,_row_offset
      0005BC E4               [12] 1440 	clr	a
      0005BD 2C               [12] 1441 	add	a,r4
      0005BE F5 82            [12] 1442 	mov	dpl,a
      0005C0 AC*06            [24] 1443 	mov	r4,_col_offset
      0005C2 8E 03            [24] 1444 	mov	ar3,r6
      0005C4 EB               [12] 1445 	mov	a,r3
      0005C5 2C               [12] 1446 	add	a,r4
      0005C6 F5*00            [12] 1447 	mov	_OLED_SetCursor_PARM_2,a
      0005C8 C0 07            [24] 1448 	push	ar7
      0005CA C0 06            [24] 1449 	push	ar6
      0005CC 12r00r00         [24] 1450 	lcall	_OLED_SetCursor
                                   1451 ;	./src/angry_bird.c:291: oledSendData(0x00);
      0005CF 75 82 00         [24] 1452 	mov	dpl,#0x00
      0005D2 12r00r00         [24] 1453 	lcall	_oledSendData
      0005D5 D0 06            [24] 1454 	pop	ar6
      0005D7 D0 07            [24] 1455 	pop	ar7
                                   1456 ;	./src/angry_bird.c:288: for (int i = 0; i < bird_row_size; i++)
      0005D9 7D 01            [12] 1457 	mov	r5,#0x01
      0005DB 80 D8            [24] 1458 	sjmp	00168$
      0005DD                       1459 00172$:
                                   1460 ;	./src/angry_bird.c:286: for (int j = 0; j < bird_cul_size; j++)
      0005DD 0E               [12] 1461 	inc	r6
      0005DE BE 00 C7         [24] 1462 	cjne	r6,#0x00,00171$
      0005E1 0F               [12] 1463 	inc	r7
      0005E2 80 C4            [24] 1464 	sjmp	00171$
      0005E4                       1465 00136$:
                                   1466 ;	./src/angry_bird.c:298: float delta_y = (control_angle_value) / (SQRT_2 / 2) * getsine(control_angle);
      0005E4 85*0C 82         [24] 1467 	mov	dpl,_control_angle
      0005E7 85*0D 83         [24] 1468 	mov	dph,(_control_angle + 1)
      0005EA 12r0Ar46         [24] 1469 	lcall	_getsine
      0005ED AC 82            [24] 1470 	mov	r4,dpl
      0005EF AD 83            [24] 1471 	mov	r5,dph
      0005F1 AE F0            [24] 1472 	mov	r6,b
      0005F3 FF               [12] 1473 	mov	r7,a
      0005F4 C0 04            [24] 1474 	push	ar4
      0005F6 C0 05            [24] 1475 	push	ar5
      0005F8 C0 06            [24] 1476 	push	ar6
      0005FA C0 07            [24] 1477 	push	ar7
                                   1478 ;	./src/angry_bird.c:299: float delta_x = control_strength_value * control_strength - delta_y * 4;
      0005FC 90 C3 B7         [24] 1479 	mov	dptr,#0xc3b7
      0005FF 75 F0 07         [24] 1480 	mov	b,#0x07
      000602 74 41            [12] 1481 	mov	a,#0x41
      000604 12r00r00         [24] 1482 	lcall	___fsmul
      000607 85 82*32         [24] 1483 	mov	_angrybird_game_state_delta_y_196609_78,dpl
      00060A 85 83*33         [24] 1484 	mov	(_angrybird_game_state_delta_y_196609_78 + 1),dph
      00060D 85 F0*34         [24] 1485 	mov	(_angrybird_game_state_delta_y_196609_78 + 2),b
      000610 F5*35            [12] 1486 	mov	(_angrybird_game_state_delta_y_196609_78 + 3),a
      000612 E5 81            [12] 1487 	mov	a,sp
      000614 24 FC            [12] 1488 	add	a,#0xfc
      000616 F5 81            [12] 1489 	mov	sp,a
      000618 85*0E*00         [24] 1490 	mov	__mulint_PARM_2,_control_strength
      00061B 85*0F*01         [24] 1491 	mov	(__mulint_PARM_2 + 1),(_control_strength + 1)
      00061E 90 00 19         [24] 1492 	mov	dptr,#0x0019
      000621 12r00r00         [24] 1493 	lcall	__mulint
      000624 AA 82            [24] 1494 	mov	r2,dpl
      000626 AB 83            [24] 1495 	mov	r3,dph
      000628 C0 03            [24] 1496 	push	ar3
      00062A C0 02            [24] 1497 	push	ar2
      00062C C0*32            [24] 1498 	push	_angrybird_game_state_delta_y_196609_78
      00062E C0*33            [24] 1499 	push	(_angrybird_game_state_delta_y_196609_78 + 1)
      000630 C0*34            [24] 1500 	push	(_angrybird_game_state_delta_y_196609_78 + 2)
      000632 C0*35            [24] 1501 	push	(_angrybird_game_state_delta_y_196609_78 + 3)
      000634 90 00 00         [24] 1502 	mov	dptr,#0x0000
      000637 75 F0 80         [24] 1503 	mov	b,#0x80
      00063A 74 40            [12] 1504 	mov	a,#0x40
      00063C 12r00r00         [24] 1505 	lcall	___fsmul
      00063F 85 82*4A         [24] 1506 	mov	_angrybird_game_state_sloc1_1_0,dpl
      000642 85 83*4B         [24] 1507 	mov	(_angrybird_game_state_sloc1_1_0 + 1),dph
      000645 85 F0*4C         [24] 1508 	mov	(_angrybird_game_state_sloc1_1_0 + 2),b
      000648 F5*4D            [12] 1509 	mov	(_angrybird_game_state_sloc1_1_0 + 3),a
      00064A E5 81            [12] 1510 	mov	a,sp
      00064C 24 FC            [12] 1511 	add	a,#0xfc
      00064E F5 81            [12] 1512 	mov	sp,a
      000650 D0 02            [24] 1513 	pop	ar2
      000652 D0 03            [24] 1514 	pop	ar3
      000654 8A 82            [24] 1515 	mov	dpl,r2
      000656 8B 83            [24] 1516 	mov	dph,r3
      000658 12r00r00         [24] 1517 	lcall	___sint2fs
      00065B AA 82            [24] 1518 	mov	r2,dpl
      00065D AB 83            [24] 1519 	mov	r3,dph
      00065F AE F0            [24] 1520 	mov	r6,b
      000661 FF               [12] 1521 	mov	r7,a
      000662 C0*4A            [24] 1522 	push	_angrybird_game_state_sloc1_1_0
      000664 C0*4B            [24] 1523 	push	(_angrybird_game_state_sloc1_1_0 + 1)
      000666 C0*4C            [24] 1524 	push	(_angrybird_game_state_sloc1_1_0 + 2)
      000668 C0*4D            [24] 1525 	push	(_angrybird_game_state_sloc1_1_0 + 3)
                                   1526 ;	./src/angry_bird.c:300: float peak_x = bird_init_col_cursor + delta_x;
      00066A 8A 82            [24] 1527 	mov	dpl,r2
      00066C 8B 83            [24] 1528 	mov	dph,r3
      00066E 8E F0            [24] 1529 	mov	b,r6
      000670 EF               [12] 1530 	mov	a,r7
      000671 12r00r00         [24] 1531 	lcall	___fssub
      000674 85 82*36         [24] 1532 	mov	_angrybird_game_state_delta_x_196609_78,dpl
      000677 85 83*37         [24] 1533 	mov	(_angrybird_game_state_delta_x_196609_78 + 1),dph
      00067A 85 F0*38         [24] 1534 	mov	(_angrybird_game_state_delta_x_196609_78 + 2),b
      00067D F5*39            [12] 1535 	mov	(_angrybird_game_state_delta_x_196609_78 + 3),a
      00067F E5 81            [12] 1536 	mov	a,sp
      000681 24 FC            [12] 1537 	add	a,#0xfc
      000683 F5 81            [12] 1538 	mov	sp,a
      000685 E4               [12] 1539 	clr	a
      000686 C0 E0            [24] 1540 	push	acc
      000688 C0 E0            [24] 1541 	push	acc
      00068A C0 E0            [24] 1542 	push	acc
      00068C 74 41            [12] 1543 	mov	a,#0x41
      00068E C0 E0            [24] 1544 	push	acc
                                   1545 ;	./src/angry_bird.c:301: float peak_y = bird_init_row_cursor - delta_y;
      000690 85*36 82         [24] 1546 	mov	dpl,_angrybird_game_state_delta_x_196609_78
      000693 85*37 83         [24] 1547 	mov	dph,(_angrybird_game_state_delta_x_196609_78 + 1)
      000696 85*38 F0         [24] 1548 	mov	b,(_angrybird_game_state_delta_x_196609_78 + 2)
      000699 E5*39            [12] 1549 	mov	a,(_angrybird_game_state_delta_x_196609_78 + 3)
      00069B 12r00r00         [24] 1550 	lcall	___fsadd
      00069E 85 82*3A         [24] 1551 	mov	_angrybird_game_state_peak_x_196609_78,dpl
      0006A1 85 83*3B         [24] 1552 	mov	(_angrybird_game_state_peak_x_196609_78 + 1),dph
      0006A4 85 F0*3C         [24] 1553 	mov	(_angrybird_game_state_peak_x_196609_78 + 2),b
      0006A7 F5*3D            [12] 1554 	mov	(_angrybird_game_state_peak_x_196609_78 + 3),a
      0006A9 E5 81            [12] 1555 	mov	a,sp
      0006AB 24 FC            [12] 1556 	add	a,#0xfc
      0006AD F5 81            [12] 1557 	mov	sp,a
      0006AF C0*32            [24] 1558 	push	_angrybird_game_state_delta_y_196609_78
      0006B1 C0*33            [24] 1559 	push	(_angrybird_game_state_delta_y_196609_78 + 1)
      0006B3 C0*34            [24] 1560 	push	(_angrybird_game_state_delta_y_196609_78 + 2)
      0006B5 C0*35            [24] 1561 	push	(_angrybird_game_state_delta_y_196609_78 + 3)
                                   1562 ;	./src/angry_bird.c:302: float a = delta_y / pow_2(delta_x);
      0006B7 90 00 00         [24] 1563 	mov	dptr,#0x0000
      0006BA 75 F0 E0         [24] 1564 	mov	b,#0xe0
      0006BD 74 40            [12] 1565 	mov	a,#0x40
      0006BF 12r00r00         [24] 1566 	lcall	___fssub
      0006C2 85 82*3E         [24] 1567 	mov	_angrybird_game_state_peak_y_196609_78,dpl
      0006C5 85 83*3F         [24] 1568 	mov	(_angrybird_game_state_peak_y_196609_78 + 1),dph
      0006C8 85 F0*40         [24] 1569 	mov	(_angrybird_game_state_peak_y_196609_78 + 2),b
      0006CB F5*41            [12] 1570 	mov	(_angrybird_game_state_peak_y_196609_78 + 3),a
      0006CD E5 81            [12] 1571 	mov	a,sp
      0006CF 24 FC            [12] 1572 	add	a,#0xfc
      0006D1 F5 81            [12] 1573 	mov	sp,a
      0006D3 85*36 82         [24] 1574 	mov	dpl,_angrybird_game_state_delta_x_196609_78
      0006D6 85*37 83         [24] 1575 	mov	dph,(_angrybird_game_state_delta_x_196609_78 + 1)
      0006D9 85*38 F0         [24] 1576 	mov	b,(_angrybird_game_state_delta_x_196609_78 + 2)
      0006DC E5*39            [12] 1577 	mov	a,(_angrybird_game_state_delta_x_196609_78 + 3)
      0006DE 12r0Br21         [24] 1578 	lcall	_pow_2
      0006E1 AA 82            [24] 1579 	mov	r2,dpl
      0006E3 AB 83            [24] 1580 	mov	r3,dph
      0006E5 AE F0            [24] 1581 	mov	r6,b
      0006E7 FF               [12] 1582 	mov	r7,a
      0006E8 C0 02            [24] 1583 	push	ar2
      0006EA C0 03            [24] 1584 	push	ar3
      0006EC C0 06            [24] 1585 	push	ar6
      0006EE C0 07            [24] 1586 	push	ar7
                                   1587 ;	./src/angry_bird.c:304: row_offset = bird_init_row_cursor;
      0006F0 85*32 82         [24] 1588 	mov	dpl,_angrybird_game_state_delta_y_196609_78
      0006F3 85*33 83         [24] 1589 	mov	dph,(_angrybird_game_state_delta_y_196609_78 + 1)
      0006F6 85*34 F0         [24] 1590 	mov	b,(_angrybird_game_state_delta_y_196609_78 + 2)
      0006F9 E5*35            [12] 1591 	mov	a,(_angrybird_game_state_delta_y_196609_78 + 3)
      0006FB 12r00r00         [24] 1592 	lcall	___fsdiv
      0006FE 85 82*42         [24] 1593 	mov	_angrybird_game_state_a_196609_78,dpl
      000701 85 83*43         [24] 1594 	mov	(_angrybird_game_state_a_196609_78 + 1),dph
      000704 85 F0*44         [24] 1595 	mov	(_angrybird_game_state_a_196609_78 + 2),b
      000707 F5*45            [12] 1596 	mov	(_angrybird_game_state_a_196609_78 + 3),a
      000709 E5 81            [12] 1597 	mov	a,sp
      00070B 24 FC            [12] 1598 	add	a,#0xfc
      00070D F5 81            [12] 1599 	mov	sp,a
      00070F 75*04 07         [24] 1600 	mov	_row_offset,#0x07
      000712 75*05 00         [24] 1601 	mov	(_row_offset + 1),#0x00
                                   1602 ;	./src/angry_bird.c:305: col_offset = bird_init_col_cursor;
      000715 75*06 08         [24] 1603 	mov	_col_offset,#0x08
      000718 75*07 00         [24] 1604 	mov	(_col_offset + 1),#0x00
                                   1605 ;	./src/angry_bird.c:306: for (int j = 0; j < bird_cul_size; j++)
      00071B 7A 00            [12] 1606 	mov	r2,#0x00
      00071D 7B 00            [12] 1607 	mov	r3,#0x00
      00071F                       1608 00177$:
      00071F C3               [12] 1609 	clr	c
      000720 EA               [12] 1610 	mov	a,r2
      000721 94 08            [12] 1611 	subb	a,#0x08
      000723 EB               [12] 1612 	mov	a,r3
      000724 64 80            [12] 1613 	xrl	a,#0x80
      000726 94 80            [12] 1614 	subb	a,#0x80
      000728 50 31            [24] 1615 	jnc	00138$
                                   1616 ;	./src/angry_bird.c:308: for (int i = 0; i < bird_row_size; i++)
      00072A 7F 00            [12] 1617 	mov	r7,#0x00
      00072C                       1618 00174$:
      00072C BF 01 00         [24] 1619 	cjne	r7,#0x01,00639$
      00072F                       1620 00639$:
      00072F 50 23            [24] 1621 	jnc	00178$
                                   1622 ;	./src/angry_bird.c:310: OLED_SetCursor(row_offset + i, col_offset + j);
      000731 AE*04            [24] 1623 	mov	r6,_row_offset
      000733 E4               [12] 1624 	clr	a
      000734 2E               [12] 1625 	add	a,r6
      000735 F5 82            [12] 1626 	mov	dpl,a
      000737 AE*06            [24] 1627 	mov	r6,_col_offset
      000739 8A 05            [24] 1628 	mov	ar5,r2
      00073B ED               [12] 1629 	mov	a,r5
      00073C 2E               [12] 1630 	add	a,r6
      00073D F5*00            [12] 1631 	mov	_OLED_SetCursor_PARM_2,a
      00073F C0 03            [24] 1632 	push	ar3
      000741 C0 02            [24] 1633 	push	ar2
      000743 12r00r00         [24] 1634 	lcall	_OLED_SetCursor
                                   1635 ;	./src/angry_bird.c:311: oledSendData(0x00);
      000746 75 82 00         [24] 1636 	mov	dpl,#0x00
      000749 12r00r00         [24] 1637 	lcall	_oledSendData
      00074C D0 02            [24] 1638 	pop	ar2
      00074E D0 03            [24] 1639 	pop	ar3
                                   1640 ;	./src/angry_bird.c:308: for (int i = 0; i < bird_row_size; i++)
      000750 7F 01            [12] 1641 	mov	r7,#0x01
      000752 80 D8            [24] 1642 	sjmp	00174$
      000754                       1643 00178$:
                                   1644 ;	./src/angry_bird.c:306: for (int j = 0; j < bird_cul_size; j++)
      000754 0A               [12] 1645 	inc	r2
      000755 BA 00 C7         [24] 1646 	cjne	r2,#0x00,00177$
      000758 0B               [12] 1647 	inc	r3
      000759 80 C4            [24] 1648 	sjmp	00177$
      00075B                       1649 00138$:
                                   1650 ;	./src/angry_bird.c:315: for (int i = 16; i <= 119; i += 8)
      00075B 75*46 10         [24] 1651 	mov	_angrybird_game_state_i_262145_83,#0x10
      00075E 75*47 00         [24] 1652 	mov	(_angrybird_game_state_i_262145_83 + 1),#0x00
      000761                       1653 00198$:
      000761 C3               [12] 1654 	clr	c
      000762 74 77            [12] 1655 	mov	a,#0x77
      000764 95*46            [12] 1656 	subb	a,_angrybird_game_state_i_262145_83
      000766 74 80            [12] 1657 	mov	a,#(0x00 ^ 0x80)
      000768 85*47 F0         [24] 1658 	mov	b,(_angrybird_game_state_i_262145_83 + 1)
      00076B 63 F0 80         [24] 1659 	xrl	b,#0x80
      00076E 95 F0            [12] 1660 	subb	a,b
      000770 50 03            [24] 1661 	jnc	00642$
      000772 02r09r95         [24] 1662 	ljmp	00153$
      000775                       1663 00642$:
                                   1664 ;	./src/angry_bird.c:317: int output_row = a * pow_2(i - peak_x) + peak_y;
      000775 85*46 82         [24] 1665 	mov	dpl,_angrybird_game_state_i_262145_83
      000778 85*47 83         [24] 1666 	mov	dph,(_angrybird_game_state_i_262145_83 + 1)
      00077B 12r00r00         [24] 1667 	lcall	___sint2fs
      00077E AA 82            [24] 1668 	mov	r2,dpl
      000780 AB 83            [24] 1669 	mov	r3,dph
      000782 AC F0            [24] 1670 	mov	r4,b
      000784 FD               [12] 1671 	mov	r5,a
      000785 C0*3A            [24] 1672 	push	_angrybird_game_state_peak_x_196609_78
      000787 C0*3B            [24] 1673 	push	(_angrybird_game_state_peak_x_196609_78 + 1)
      000789 C0*3C            [24] 1674 	push	(_angrybird_game_state_peak_x_196609_78 + 2)
      00078B C0*3D            [24] 1675 	push	(_angrybird_game_state_peak_x_196609_78 + 3)
      00078D 8A 82            [24] 1676 	mov	dpl,r2
      00078F 8B 83            [24] 1677 	mov	dph,r3
      000791 8C F0            [24] 1678 	mov	b,r4
      000793 ED               [12] 1679 	mov	a,r5
      000794 12r00r00         [24] 1680 	lcall	___fssub
      000797 AA 82            [24] 1681 	mov	r2,dpl
      000799 AB 83            [24] 1682 	mov	r3,dph
      00079B AC F0            [24] 1683 	mov	r4,b
      00079D FD               [12] 1684 	mov	r5,a
      00079E E5 81            [12] 1685 	mov	a,sp
      0007A0 24 FC            [12] 1686 	add	a,#0xfc
      0007A2 F5 81            [12] 1687 	mov	sp,a
      0007A4 8A 82            [24] 1688 	mov	dpl,r2
      0007A6 8B 83            [24] 1689 	mov	dph,r3
      0007A8 8C F0            [24] 1690 	mov	b,r4
      0007AA ED               [12] 1691 	mov	a,r5
      0007AB 12r0Br21         [24] 1692 	lcall	_pow_2
      0007AE AA 82            [24] 1693 	mov	r2,dpl
      0007B0 AB 83            [24] 1694 	mov	r3,dph
      0007B2 AC F0            [24] 1695 	mov	r4,b
      0007B4 FD               [12] 1696 	mov	r5,a
      0007B5 C0 02            [24] 1697 	push	ar2
      0007B7 C0 03            [24] 1698 	push	ar3
      0007B9 C0 04            [24] 1699 	push	ar4
      0007BB C0 05            [24] 1700 	push	ar5
      0007BD 85*42 82         [24] 1701 	mov	dpl,_angrybird_game_state_a_196609_78
      0007C0 85*43 83         [24] 1702 	mov	dph,(_angrybird_game_state_a_196609_78 + 1)
      0007C3 85*44 F0         [24] 1703 	mov	b,(_angrybird_game_state_a_196609_78 + 2)
      0007C6 E5*45            [12] 1704 	mov	a,(_angrybird_game_state_a_196609_78 + 3)
      0007C8 12r00r00         [24] 1705 	lcall	___fsmul
      0007CB AA 82            [24] 1706 	mov	r2,dpl
      0007CD AB 83            [24] 1707 	mov	r3,dph
      0007CF AC F0            [24] 1708 	mov	r4,b
      0007D1 FD               [12] 1709 	mov	r5,a
      0007D2 E5 81            [12] 1710 	mov	a,sp
      0007D4 24 FC            [12] 1711 	add	a,#0xfc
      0007D6 F5 81            [12] 1712 	mov	sp,a
      0007D8 C0*3E            [24] 1713 	push	_angrybird_game_state_peak_y_196609_78
      0007DA C0*3F            [24] 1714 	push	(_angrybird_game_state_peak_y_196609_78 + 1)
      0007DC C0*40            [24] 1715 	push	(_angrybird_game_state_peak_y_196609_78 + 2)
      0007DE C0*41            [24] 1716 	push	(_angrybird_game_state_peak_y_196609_78 + 3)
      0007E0 8A 82            [24] 1717 	mov	dpl,r2
      0007E2 8B 83            [24] 1718 	mov	dph,r3
      0007E4 8C F0            [24] 1719 	mov	b,r4
      0007E6 ED               [12] 1720 	mov	a,r5
      0007E7 12r00r00         [24] 1721 	lcall	___fsadd
      0007EA AA 82            [24] 1722 	mov	r2,dpl
      0007EC AB 83            [24] 1723 	mov	r3,dph
      0007EE AC F0            [24] 1724 	mov	r4,b
      0007F0 FD               [12] 1725 	mov	r5,a
      0007F1 E5 81            [12] 1726 	mov	a,sp
      0007F3 24 FC            [12] 1727 	add	a,#0xfc
      0007F5 F5 81            [12] 1728 	mov	sp,a
      0007F7 8A 82            [24] 1729 	mov	dpl,r2
      0007F9 8B 83            [24] 1730 	mov	dph,r3
      0007FB 8C F0            [24] 1731 	mov	b,r4
      0007FD ED               [12] 1732 	mov	a,r5
      0007FE 12r00r00         [24] 1733 	lcall	___fs2sint
      000801 85 82*48         [24] 1734 	mov	_angrybird_game_state_output_row_327681_84,dpl
      000804 85 83*49         [24] 1735 	mov	(_angrybird_game_state_output_row_327681_84 + 1),dph
                                   1736 ;	./src/angry_bird.c:319: if (1 <= output_row && output_row <= 7)
      000807 C3               [12] 1737 	clr	c
      000808 E5*48            [12] 1738 	mov	a,_angrybird_game_state_output_row_327681_84
      00080A 94 01            [12] 1739 	subb	a,#0x01
      00080C E5*49            [12] 1740 	mov	a,(_angrybird_game_state_output_row_327681_84 + 1)
      00080E 64 80            [12] 1741 	xrl	a,#0x80
      000810 94 80            [12] 1742 	subb	a,#0x80
      000812 50 03            [24] 1743 	jnc	00643$
      000814 02r09r87         [24] 1744 	ljmp	00199$
      000817                       1745 00643$:
      000817 C3               [12] 1746 	clr	c
      000818 74 07            [12] 1747 	mov	a,#0x07
      00081A 95*48            [12] 1748 	subb	a,_angrybird_game_state_output_row_327681_84
      00081C 74 80            [12] 1749 	mov	a,#(0x00 ^ 0x80)
      00081E 85*49 F0         [24] 1750 	mov	b,(_angrybird_game_state_output_row_327681_84 + 1)
      000821 63 F0 80         [24] 1751 	xrl	b,#0x80
      000824 95 F0            [12] 1752 	subb	a,b
      000826 50 03            [24] 1753 	jnc	00644$
      000828 02r09r87         [24] 1754 	ljmp	00199$
      00082B                       1755 00644$:
                                   1756 ;	./src/angry_bird.c:322: row_offset = output_row;
      00082B 85*48*04         [24] 1757 	mov	_row_offset,_angrybird_game_state_output_row_327681_84
      00082E 85*49*05         [24] 1758 	mov	(_row_offset + 1),(_angrybird_game_state_output_row_327681_84 + 1)
                                   1759 ;	./src/angry_bird.c:323: col_offset = bird_init_col_cursor + i;
      000831 74 08            [12] 1760 	mov	a,#0x08
      000833 25*46            [12] 1761 	add	a,_angrybird_game_state_i_262145_83
      000835 F5*06            [12] 1762 	mov	_col_offset,a
      000837 E4               [12] 1763 	clr	a
      000838 35*47            [12] 1764 	addc	a,(_angrybird_game_state_i_262145_83 + 1)
      00083A F5*07            [12] 1765 	mov	(_col_offset + 1),a
                                   1766 ;	./src/angry_bird.c:324: for (int j = 0; j < bird_cul_size; j++)
      00083C 7A 00            [12] 1767 	mov	r2,#0x00
      00083E 7B 00            [12] 1768 	mov	r3,#0x00
      000840                       1769 00183$:
      000840 C3               [12] 1770 	clr	c
      000841 EA               [12] 1771 	mov	a,r2
      000842 94 08            [12] 1772 	subb	a,#0x08
      000844 EB               [12] 1773 	mov	a,r3
      000845 64 80            [12] 1774 	xrl	a,#0x80
      000847 94 80            [12] 1775 	subb	a,#0x80
      000849 50 4D            [24] 1776 	jnc	00140$
                                   1777 ;	./src/angry_bird.c:326: for (int i = 0; i < bird_row_size; i++)
      00084B 7D 00            [12] 1778 	mov	r5,#0x00
      00084D                       1779 00180$:
      00084D BD 01 00         [24] 1780 	cjne	r5,#0x01,00646$
      000850                       1781 00646$:
      000850 50 3F            [24] 1782 	jnc	00184$
                                   1783 ;	./src/angry_bird.c:328: OLED_SetCursor(row_offset + i, col_offset + j);
      000852 AC*04            [24] 1784 	mov	r4,_row_offset
      000854 E4               [12] 1785 	clr	a
      000855 2C               [12] 1786 	add	a,r4
      000856 F5 82            [12] 1787 	mov	dpl,a
      000858 AC*06            [24] 1788 	mov	r4,_col_offset
      00085A 8A 07            [24] 1789 	mov	ar7,r2
      00085C EF               [12] 1790 	mov	a,r7
      00085D 2C               [12] 1791 	add	a,r4
      00085E F5*00            [12] 1792 	mov	_OLED_SetCursor_PARM_2,a
      000860 C0 07            [24] 1793 	push	ar7
      000862 C0 03            [24] 1794 	push	ar3
      000864 C0 02            [24] 1795 	push	ar2
      000866 12r00r00         [24] 1796 	lcall	_OLED_SetCursor
      000869 D0 02            [24] 1797 	pop	ar2
      00086B D0 03            [24] 1798 	pop	ar3
      00086D D0 07            [24] 1799 	pop	ar7
                                   1800 ;	./src/angry_bird.c:329: oledSendData(bird_logo[bird_cul_size * i + j]);
      00086F EF               [12] 1801 	mov	a,r7
      000870 33               [12] 1802 	rlc	a
      000871 95 E0            [12] 1803 	subb	a,acc
      000873 FE               [12] 1804 	mov	r6,a
      000874 EF               [12] 1805 	mov	a,r7
      000875 24r28            [12] 1806 	add	a,#_bird_logo
      000877 F5 82            [12] 1807 	mov	dpl,a
      000879 EE               [12] 1808 	mov	a,r6
      00087A 34s00            [12] 1809 	addc	a,#(_bird_logo >> 8)
      00087C F5 83            [12] 1810 	mov	dph,a
      00087E E4               [12] 1811 	clr	a
      00087F 93               [24] 1812 	movc	a,@a+dptr
      000880 F5 82            [12] 1813 	mov	dpl,a
      000882 C0 03            [24] 1814 	push	ar3
      000884 C0 02            [24] 1815 	push	ar2
      000886 12r00r00         [24] 1816 	lcall	_oledSendData
      000889 D0 02            [24] 1817 	pop	ar2
      00088B D0 03            [24] 1818 	pop	ar3
                                   1819 ;	./src/angry_bird.c:326: for (int i = 0; i < bird_row_size; i++)
      00088D 7D 01            [12] 1820 	mov	r5,#0x01
      00088F 80 BC            [24] 1821 	sjmp	00180$
      000891                       1822 00184$:
                                   1823 ;	./src/angry_bird.c:324: for (int j = 0; j < bird_cul_size; j++)
      000891 0A               [12] 1824 	inc	r2
      000892 BA 00 AB         [24] 1825 	cjne	r2,#0x00,00183$
      000895 0B               [12] 1826 	inc	r3
      000896 80 A8            [24] 1827 	sjmp	00183$
      000898                       1828 00140$:
                                   1829 ;	./src/angry_bird.c:332: delay_ms(400);
      000898 90 01 90         [24] 1830 	mov	dptr,#0x0190
      00089B 12r00r00         [24] 1831 	lcall	_delay_ms
                                   1832 ;	./src/angry_bird.c:356: if (pig1_row_cursor <= row_offset && row_offset <= pig1_row_cursor + 1 && pig1_col_cursor - 8 < col_offset && col_offset < pig1_col_cursor + 12)
      00089E C3               [12] 1833 	clr	c
      00089F E5*04            [12] 1834 	mov	a,_row_offset
      0008A1 94 03            [12] 1835 	subb	a,#0x03
      0008A3 E5*05            [12] 1836 	mov	a,(_row_offset + 1)
      0008A5 64 80            [12] 1837 	xrl	a,#0x80
      0008A7 94 80            [12] 1838 	subb	a,#0x80
      0008A9 50 03            [24] 1839 	jnc	00649$
      0008AB 02r09r36         [24] 1840 	ljmp	00144$
      0008AE                       1841 00649$:
      0008AE C3               [12] 1842 	clr	c
      0008AF 74 04            [12] 1843 	mov	a,#0x04
      0008B1 95*04            [12] 1844 	subb	a,_row_offset
      0008B3 74 80            [12] 1845 	mov	a,#(0x00 ^ 0x80)
      0008B5 85*05 F0         [24] 1846 	mov	b,(_row_offset + 1)
      0008B8 63 F0 80         [24] 1847 	xrl	b,#0x80
      0008BB 95 F0            [12] 1848 	subb	a,b
      0008BD 40 77            [24] 1849 	jc	00144$
      0008BF 74 48            [12] 1850 	mov	a,#0x48
      0008C1 95*06            [12] 1851 	subb	a,_col_offset
      0008C3 74 80            [12] 1852 	mov	a,#(0x00 ^ 0x80)
      0008C5 85*07 F0         [24] 1853 	mov	b,(_col_offset + 1)
      0008C8 63 F0 80         [24] 1854 	xrl	b,#0x80
      0008CB 95 F0            [12] 1855 	subb	a,b
      0008CD 50 67            [24] 1856 	jnc	00144$
      0008CF C3               [12] 1857 	clr	c
      0008D0 E5*06            [12] 1858 	mov	a,_col_offset
      0008D2 94 5C            [12] 1859 	subb	a,#0x5c
      0008D4 E5*07            [12] 1860 	mov	a,(_col_offset + 1)
      0008D6 64 80            [12] 1861 	xrl	a,#0x80
      0008D8 94 80            [12] 1862 	subb	a,#0x80
      0008DA 50 5A            [24] 1863 	jnc	00144$
                                   1864 ;	./src/angry_bird.c:358: pig_amt--;
      0008DC 15*0A            [12] 1865 	dec	_pig_amt
      0008DE 74 FF            [12] 1866 	mov	a,#0xff
      0008E0 B5*0A 02         [24] 1867 	cjne	a,_pig_amt,00653$
      0008E3 15*0B            [12] 1868 	dec	(_pig_amt + 1)
      0008E5                       1869 00653$:
                                   1870 ;	./src/angry_bird.c:359: row_offset = pig1_row_cursor;
      0008E5 75*04 03         [24] 1871 	mov	_row_offset,#0x03
      0008E8 75*05 00         [24] 1872 	mov	(_row_offset + 1),#0x00
                                   1873 ;	./src/angry_bird.c:360: col_offset = pig1_col_cursor;
      0008EB 75*06 50         [24] 1874 	mov	_col_offset,#0x50
      0008EE 75*07 00         [24] 1875 	mov	(_col_offset + 1),#0x00
                                   1876 ;	./src/angry_bird.c:361: for (int j = 0; j < pig_cul_size; j++)
      0008F1 7E 00            [12] 1877 	mov	r6,#0x00
      0008F3 7F 00            [12] 1878 	mov	r7,#0x00
      0008F5                       1879 00189$:
      0008F5 C3               [12] 1880 	clr	c
      0008F6 EE               [12] 1881 	mov	a,r6
      0008F7 94 0C            [12] 1882 	subb	a,#0x0c
      0008F9 EF               [12] 1883 	mov	a,r7
      0008FA 64 80            [12] 1884 	xrl	a,#0x80
      0008FC 94 80            [12] 1885 	subb	a,#0x80
      0008FE 50 36            [24] 1886 	jnc	00144$
                                   1887 ;	./src/angry_bird.c:363: for (int i = 0; i < pig_row_size; i++)
      000900 7D 00            [12] 1888 	mov	r5,#0x00
      000902                       1889 00186$:
      000902 BD 02 00         [24] 1890 	cjne	r5,#0x02,00655$
      000905                       1891 00655$:
      000905 50 28            [24] 1892 	jnc	00190$
                                   1893 ;	./src/angry_bird.c:365: OLED_SetCursor(row_offset + i, col_offset + j);
      000907 AC*04            [24] 1894 	mov	r4,_row_offset
      000909 8D 03            [24] 1895 	mov	ar3,r5
      00090B EB               [12] 1896 	mov	a,r3
      00090C 2C               [12] 1897 	add	a,r4
      00090D F5 82            [12] 1898 	mov	dpl,a
      00090F AC*06            [24] 1899 	mov	r4,_col_offset
      000911 8E 03            [24] 1900 	mov	ar3,r6
      000913 EB               [12] 1901 	mov	a,r3
      000914 2C               [12] 1902 	add	a,r4
      000915 F5*00            [12] 1903 	mov	_OLED_SetCursor_PARM_2,a
      000917 C0 07            [24] 1904 	push	ar7
      000919 C0 06            [24] 1905 	push	ar6
      00091B C0 05            [24] 1906 	push	ar5
      00091D 12r00r00         [24] 1907 	lcall	_OLED_SetCursor
                                   1908 ;	./src/angry_bird.c:366: oledSendData(0x00);
      000920 75 82 00         [24] 1909 	mov	dpl,#0x00
      000923 12r00r00         [24] 1910 	lcall	_oledSendData
      000926 D0 05            [24] 1911 	pop	ar5
      000928 D0 06            [24] 1912 	pop	ar6
      00092A D0 07            [24] 1913 	pop	ar7
                                   1914 ;	./src/angry_bird.c:363: for (int i = 0; i < pig_row_size; i++)
      00092C 0D               [12] 1915 	inc	r5
      00092D 80 D3            [24] 1916 	sjmp	00186$
      00092F                       1917 00190$:
                                   1918 ;	./src/angry_bird.c:361: for (int j = 0; j < pig_cul_size; j++)
      00092F 0E               [12] 1919 	inc	r6
      000930 BE 00 C2         [24] 1920 	cjne	r6,#0x00,00189$
      000933 0F               [12] 1921 	inc	r7
      000934 80 BF            [24] 1922 	sjmp	00189$
      000936                       1923 00144$:
                                   1924 ;	./src/angry_bird.c:371: row_offset = output_row;
      000936 85*48*04         [24] 1925 	mov	_row_offset,_angrybird_game_state_output_row_327681_84
      000939 85*49*05         [24] 1926 	mov	(_row_offset + 1),(_angrybird_game_state_output_row_327681_84 + 1)
                                   1927 ;	./src/angry_bird.c:372: col_offset = bird_init_col_cursor + i;
      00093C 74 08            [12] 1928 	mov	a,#0x08
      00093E 25*46            [12] 1929 	add	a,_angrybird_game_state_i_262145_83
      000940 F5*06            [12] 1930 	mov	_col_offset,a
      000942 E4               [12] 1931 	clr	a
      000943 35*47            [12] 1932 	addc	a,(_angrybird_game_state_i_262145_83 + 1)
      000945 F5*07            [12] 1933 	mov	(_col_offset + 1),a
                                   1934 ;	./src/angry_bird.c:373: for (int j = 0; j < bird_cul_size; j++)
      000947 7E 00            [12] 1935 	mov	r6,#0x00
      000949 7F 00            [12] 1936 	mov	r7,#0x00
      00094B                       1937 00195$:
      00094B C3               [12] 1938 	clr	c
      00094C EE               [12] 1939 	mov	a,r6
      00094D 94 08            [12] 1940 	subb	a,#0x08
      00094F EF               [12] 1941 	mov	a,r7
      000950 64 80            [12] 1942 	xrl	a,#0x80
      000952 94 80            [12] 1943 	subb	a,#0x80
      000954 50 31            [24] 1944 	jnc	00199$
                                   1945 ;	./src/angry_bird.c:375: for (int i = 0; i < bird_row_size; i++)
      000956 7D 00            [12] 1946 	mov	r5,#0x00
      000958                       1947 00192$:
      000958 BD 01 00         [24] 1948 	cjne	r5,#0x01,00659$
      00095B                       1949 00659$:
      00095B 50 23            [24] 1950 	jnc	00196$
                                   1951 ;	./src/angry_bird.c:377: OLED_SetCursor(row_offset + i, col_offset + j);
      00095D AC*04            [24] 1952 	mov	r4,_row_offset
      00095F E4               [12] 1953 	clr	a
      000960 2C               [12] 1954 	add	a,r4
      000961 F5 82            [12] 1955 	mov	dpl,a
      000963 AC*06            [24] 1956 	mov	r4,_col_offset
      000965 8E 03            [24] 1957 	mov	ar3,r6
      000967 EB               [12] 1958 	mov	a,r3
      000968 2C               [12] 1959 	add	a,r4
      000969 F5*00            [12] 1960 	mov	_OLED_SetCursor_PARM_2,a
      00096B C0 07            [24] 1961 	push	ar7
      00096D C0 06            [24] 1962 	push	ar6
      00096F 12r00r00         [24] 1963 	lcall	_OLED_SetCursor
                                   1964 ;	./src/angry_bird.c:378: oledSendData(0x00);
      000972 75 82 00         [24] 1965 	mov	dpl,#0x00
      000975 12r00r00         [24] 1966 	lcall	_oledSendData
      000978 D0 06            [24] 1967 	pop	ar6
      00097A D0 07            [24] 1968 	pop	ar7
                                   1969 ;	./src/angry_bird.c:375: for (int i = 0; i < bird_row_size; i++)
      00097C 7D 01            [12] 1970 	mov	r5,#0x01
      00097E 80 D8            [24] 1971 	sjmp	00192$
      000980                       1972 00196$:
                                   1973 ;	./src/angry_bird.c:373: for (int j = 0; j < bird_cul_size; j++)
      000980 0E               [12] 1974 	inc	r6
      000981 BE 00 C7         [24] 1975 	cjne	r6,#0x00,00195$
      000984 0F               [12] 1976 	inc	r7
      000985 80 C4            [24] 1977 	sjmp	00195$
      000987                       1978 00199$:
                                   1979 ;	./src/angry_bird.c:315: for (int i = 16; i <= 119; i += 8)
      000987 74 08            [12] 1980 	mov	a,#0x08
      000989 25*46            [12] 1981 	add	a,_angrybird_game_state_i_262145_83
      00098B F5*46            [12] 1982 	mov	_angrybird_game_state_i_262145_83,a
      00098D E4               [12] 1983 	clr	a
      00098E 35*47            [12] 1984 	addc	a,(_angrybird_game_state_i_262145_83 + 1)
      000990 F5*47            [12] 1985 	mov	(_angrybird_game_state_i_262145_83 + 1),a
      000992 02r07r61         [24] 1986 	ljmp	00198$
      000995                       1987 00153$:
                                   1988 ;	./src/angry_bird.c:385: row_offset = bird_init_row_cursor;
      000995 75*04 07         [24] 1989 	mov	_row_offset,#0x07
      000998 75*05 00         [24] 1990 	mov	(_row_offset + 1),#0x00
                                   1991 ;	./src/angry_bird.c:386: col_offset = bird_init_col_cursor;
      00099B 75*06 08         [24] 1992 	mov	_col_offset,#0x08
      00099E 75*07 00         [24] 1993 	mov	(_col_offset + 1),#0x00
                                   1994 ;	./src/angry_bird.c:387: for (int j = 0; j < bird_cul_size; j++)
      0009A1 7E 00            [12] 1995 	mov	r6,#0x00
      0009A3 7F 00            [12] 1996 	mov	r7,#0x00
      0009A5                       1997 00204$:
      0009A5 C3               [12] 1998 	clr	c
      0009A6 EE               [12] 1999 	mov	a,r6
      0009A7 94 08            [12] 2000 	subb	a,#0x08
      0009A9 EF               [12] 2001 	mov	a,r7
      0009AA 64 80            [12] 2002 	xrl	a,#0x80
      0009AC 94 80            [12] 2003 	subb	a,#0x80
      0009AE 50 45            [24] 2004 	jnc	00159$
                                   2005 ;	./src/angry_bird.c:389: for (int i = 0; i < bird_row_size; i++)
      0009B0 7D 00            [12] 2006 	mov	r5,#0x00
      0009B2                       2007 00201$:
      0009B2 BD 01 00         [24] 2008 	cjne	r5,#0x01,00663$
      0009B5                       2009 00663$:
      0009B5 50 37            [24] 2010 	jnc	00205$
                                   2011 ;	./src/angry_bird.c:391: OLED_SetCursor(row_offset + i, col_offset + j);
      0009B7 AC*04            [24] 2012 	mov	r4,_row_offset
      0009B9 E4               [12] 2013 	clr	a
      0009BA 2C               [12] 2014 	add	a,r4
      0009BB F5 82            [12] 2015 	mov	dpl,a
      0009BD AC*06            [24] 2016 	mov	r4,_col_offset
      0009BF 8E 03            [24] 2017 	mov	ar3,r6
      0009C1 EB               [12] 2018 	mov	a,r3
      0009C2 2C               [12] 2019 	add	a,r4
      0009C3 F5*00            [12] 2020 	mov	_OLED_SetCursor_PARM_2,a
      0009C5 C0 07            [24] 2021 	push	ar7
      0009C7 C0 06            [24] 2022 	push	ar6
      0009C9 C0 03            [24] 2023 	push	ar3
      0009CB 12r00r00         [24] 2024 	lcall	_OLED_SetCursor
      0009CE D0 03            [24] 2025 	pop	ar3
                                   2026 ;	./src/angry_bird.c:392: oledSendData(bird_logo[bird_cul_size * i + j]);
      0009D0 EB               [12] 2027 	mov	a,r3
      0009D1 33               [12] 2028 	rlc	a
      0009D2 95 E0            [12] 2029 	subb	a,acc
      0009D4 FC               [12] 2030 	mov	r4,a
      0009D5 EB               [12] 2031 	mov	a,r3
      0009D6 24r28            [12] 2032 	add	a,#_bird_logo
      0009D8 F5 82            [12] 2033 	mov	dpl,a
      0009DA EC               [12] 2034 	mov	a,r4
      0009DB 34s00            [12] 2035 	addc	a,#(_bird_logo >> 8)
      0009DD F5 83            [12] 2036 	mov	dph,a
      0009DF E4               [12] 2037 	clr	a
      0009E0 93               [24] 2038 	movc	a,@a+dptr
      0009E1 F5 82            [12] 2039 	mov	dpl,a
      0009E3 12r00r00         [24] 2040 	lcall	_oledSendData
      0009E6 D0 06            [24] 2041 	pop	ar6
      0009E8 D0 07            [24] 2042 	pop	ar7
                                   2043 ;	./src/angry_bird.c:389: for (int i = 0; i < bird_row_size; i++)
      0009EA 7D 01            [12] 2044 	mov	r5,#0x01
      0009EC 80 C4            [24] 2045 	sjmp	00201$
      0009EE                       2046 00205$:
                                   2047 ;	./src/angry_bird.c:387: for (int j = 0; j < bird_cul_size; j++)
      0009EE 0E               [12] 2048 	inc	r6
      0009EF BE 00 B3         [24] 2049 	cjne	r6,#0x00,00204$
      0009F2 0F               [12] 2050 	inc	r7
      0009F3 80 B0            [24] 2051 	sjmp	00204$
      0009F5                       2052 00159$:
                                   2053 ;	./src/angry_bird.c:410: if (pig_amt == 0 || bird_amt == 0)
      0009F5 E5*0A            [12] 2054 	mov	a,_pig_amt
      0009F7 45*0B            [12] 2055 	orl	a,(_pig_amt + 1)
      0009F9 60 06            [24] 2056 	jz	00163$
      0009FB E5*08            [12] 2057 	mov	a,_bird_amt
      0009FD 45*09            [12] 2058 	orl	a,(_bird_amt + 1)
      0009FF 70 12            [24] 2059 	jnz	00165$
                                   2060 ;	./src/angry_bird.c:416: else if (bird_amt == 0)
      000A01                       2061 00163$:
                                   2062 ;	./src/angry_bird.c:420: delay_ms(3000);
      000A01 90 0B B8         [24] 2063 	mov	dptr,#0x0bb8
      000A04 12r00r00         [24] 2064 	lcall	_delay_ms
                                   2065 ;	./src/angry_bird.c:421: cur_state = STATE_HOME;
      000A07 75*1D 01         [24] 2066 	mov	_cur_state,#0x01
      000A0A 75*1E 00         [24] 2067 	mov	(_cur_state + 1),#0x00
                                   2068 ;	./src/angry_bird.c:423: send_data = cur_state;
      000A0D 75*00 01         [24] 2069 	mov	_send_data,#0x01
                                   2070 ;	./src/angry_bird.c:424: send_flag = 1;
      000A10 75*01 01         [24] 2071 	mov	_send_flag,#0x01
      000A13                       2072 00165$:
                                   2073 ;	./src/angry_bird.c:428: prebut_enter = but_enter;
      000A13 A2 A2            [12] 2074 	mov	c,_P2_2
      000A15 E4               [12] 2075 	clr	a
      000A16 33               [12] 2076 	rlc	a
      000A17 F5*27            [12] 2077 	mov	_prebut_enter,a
      000A19 75*28 00         [24] 2078 	mov	(_prebut_enter + 1),#0x00
                                   2079 ;	./src/angry_bird.c:429: prebut_up = but_up;
      000A1C A2 A0            [12] 2080 	mov	c,_P2_0
      000A1E E4               [12] 2081 	clr	a
      000A1F 33               [12] 2082 	rlc	a
      000A20 F5*1F            [12] 2083 	mov	_prebut_up,a
      000A22 75*20 00         [24] 2084 	mov	(_prebut_up + 1),#0x00
                                   2085 ;	./src/angry_bird.c:430: prebut_down = but_down;
      000A25 A2 A1            [12] 2086 	mov	c,_P2_1
      000A27 E4               [12] 2087 	clr	a
      000A28 33               [12] 2088 	rlc	a
      000A29 F5*21            [12] 2089 	mov	_prebut_down,a
      000A2B 75*22 00         [24] 2090 	mov	(_prebut_down + 1),#0x00
                                   2091 ;	./src/angry_bird.c:431: prebut_left = but_left;
      000A2E A2 B2            [12] 2092 	mov	c,_INT0
      000A30 E4               [12] 2093 	clr	a
      000A31 33               [12] 2094 	rlc	a
      000A32 F5*23            [12] 2095 	mov	_prebut_left,a
      000A34 75*24 00         [24] 2096 	mov	(_prebut_left + 1),#0x00
                                   2097 ;	./src/angry_bird.c:432: prebut_right = but_right;
      000A37 A2 B3            [12] 2098 	mov	c,_INT1
      000A39 E4               [12] 2099 	clr	a
      000A3A 33               [12] 2100 	rlc	a
      000A3B F5*25            [12] 2101 	mov	_prebut_right,a
      000A3D 75*26 00         [24] 2102 	mov	(_prebut_right + 1),#0x00
                                   2103 ;	./src/angry_bird.c:433: delay_ms(10);
      000A40 90 00 0A         [24] 2104 	mov	dptr,#0x000a
                                   2105 ;	./src/angry_bird.c:434: }
      000A43 02r00r00         [24] 2106 	ljmp	_delay_ms
                                   2107 ;------------------------------------------------------------
                                   2108 ;Allocation info for local variables in function 'getsine'
                                   2109 ;------------------------------------------------------------
                                   2110 ;angle                     Allocated to registers r6 r7 
                                   2111 ;index                     Allocated to registers r6 r7 
                                   2112 ;------------------------------------------------------------
                                   2113 ;	./src/angry_bird.c:440: float getsine(int angle)
                                   2114 ;	-----------------------------------------
                                   2115 ;	 function getsine
                                   2116 ;	-----------------------------------------
      000A46                       2117 _getsine:
      000A46 AE 82            [24] 2118 	mov	r6,dpl
      000A48 AF 83            [24] 2119 	mov	r7,dph
                                   2120 ;	./src/angry_bird.c:442: int index = (angle > 0) ? (angle / 10) : (-angle / 10);
      000A4A C3               [12] 2121 	clr	c
      000A4B E4               [12] 2122 	clr	a
      000A4C 9E               [12] 2123 	subb	a,r6
      000A4D 74 80            [12] 2124 	mov	a,#(0x00 ^ 0x80)
      000A4F 8F F0            [24] 2125 	mov	b,r7
      000A51 63 F0 80         [24] 2126 	xrl	b,#0x80
      000A54 95 F0            [12] 2127 	subb	a,b
      000A56 E4               [12] 2128 	clr	a
      000A57 33               [12] 2129 	rlc	a
      000A58 FD               [12] 2130 	mov	r5,a
      000A59 60 17            [24] 2131 	jz	00103$
      000A5B 75*00 0A         [24] 2132 	mov	__divsint_PARM_2,#0x0a
      000A5E 75*01 00         [24] 2133 	mov	(__divsint_PARM_2 + 1),#0x00
      000A61 8E 82            [24] 2134 	mov	dpl,r6
      000A63 8F 83            [24] 2135 	mov	dph,r7
      000A65 C0 05            [24] 2136 	push	ar5
      000A67 12r00r00         [24] 2137 	lcall	__divsint
      000A6A AB 82            [24] 2138 	mov	r3,dpl
      000A6C AC 83            [24] 2139 	mov	r4,dph
      000A6E D0 05            [24] 2140 	pop	ar5
      000A70 80 1A            [24] 2141 	sjmp	00104$
      000A72                       2142 00103$:
      000A72 C3               [12] 2143 	clr	c
      000A73 E4               [12] 2144 	clr	a
      000A74 9E               [12] 2145 	subb	a,r6
      000A75 F5 82            [12] 2146 	mov	dpl,a
      000A77 E4               [12] 2147 	clr	a
      000A78 9F               [12] 2148 	subb	a,r7
      000A79 F5 83            [12] 2149 	mov	dph,a
      000A7B 75*00 0A         [24] 2150 	mov	__divsint_PARM_2,#0x0a
      000A7E 75*01 00         [24] 2151 	mov	(__divsint_PARM_2 + 1),#0x00
      000A81 C0 05            [24] 2152 	push	ar5
      000A83 12r00r00         [24] 2153 	lcall	__divsint
      000A86 AB 82            [24] 2154 	mov	r3,dpl
      000A88 AC 83            [24] 2155 	mov	r4,dph
      000A8A D0 05            [24] 2156 	pop	ar5
      000A8C                       2157 00104$:
      000A8C 8B 06            [24] 2158 	mov	ar6,r3
      000A8E 8C 07            [24] 2159 	mov	ar7,r4
                                   2160 ;	./src/angry_bird.c:443: return (angle > 0) ? sine_table[index] : -sine_table[index];
      000A90 ED               [12] 2161 	mov	a,r5
      000A91 60 27            [24] 2162 	jz	00105$
      000A93 EE               [12] 2163 	mov	a,r6
      000A94 2E               [12] 2164 	add	a,r6
      000A95 FC               [12] 2165 	mov	r4,a
      000A96 EF               [12] 2166 	mov	a,r7
      000A97 33               [12] 2167 	rlc	a
      000A98 FD               [12] 2168 	mov	r5,a
      000A99 EC               [12] 2169 	mov	a,r4
      000A9A 2C               [12] 2170 	add	a,r4
      000A9B FC               [12] 2171 	mov	r4,a
      000A9C ED               [12] 2172 	mov	a,r5
      000A9D 33               [12] 2173 	rlc	a
      000A9E FD               [12] 2174 	mov	r5,a
      000A9F EC               [12] 2175 	mov	a,r4
      000AA0 24r4F            [12] 2176 	add	a,#_sine_table
      000AA2 F5 82            [12] 2177 	mov	dpl,a
      000AA4 ED               [12] 2178 	mov	a,r5
      000AA5 34s0B            [12] 2179 	addc	a,#(_sine_table >> 8)
      000AA7 F5 83            [12] 2180 	mov	dph,a
      000AA9 E4               [12] 2181 	clr	a
      000AAA 93               [24] 2182 	movc	a,@a+dptr
      000AAB FA               [12] 2183 	mov	r2,a
      000AAC A3               [24] 2184 	inc	dptr
      000AAD E4               [12] 2185 	clr	a
      000AAE 93               [24] 2186 	movc	a,@a+dptr
      000AAF FB               [12] 2187 	mov	r3,a
      000AB0 A3               [24] 2188 	inc	dptr
      000AB1 E4               [12] 2189 	clr	a
      000AB2 93               [24] 2190 	movc	a,@a+dptr
      000AB3 FC               [12] 2191 	mov	r4,a
      000AB4 A3               [24] 2192 	inc	dptr
      000AB5 E4               [12] 2193 	clr	a
      000AB6 93               [24] 2194 	movc	a,@a+dptr
      000AB7 FD               [12] 2195 	mov	r5,a
      000AB8 80 2F            [24] 2196 	sjmp	00106$
      000ABA                       2197 00105$:
      000ABA EE               [12] 2198 	mov	a,r6
      000ABB 2E               [12] 2199 	add	a,r6
      000ABC FE               [12] 2200 	mov	r6,a
      000ABD EF               [12] 2201 	mov	a,r7
      000ABE 33               [12] 2202 	rlc	a
      000ABF FF               [12] 2203 	mov	r7,a
      000AC0 EE               [12] 2204 	mov	a,r6
      000AC1 2E               [12] 2205 	add	a,r6
      000AC2 FE               [12] 2206 	mov	r6,a
      000AC3 EF               [12] 2207 	mov	a,r7
      000AC4 33               [12] 2208 	rlc	a
      000AC5 FF               [12] 2209 	mov	r7,a
      000AC6 EE               [12] 2210 	mov	a,r6
      000AC7 24r4F            [12] 2211 	add	a,#_sine_table
      000AC9 F5 82            [12] 2212 	mov	dpl,a
      000ACB EF               [12] 2213 	mov	a,r7
      000ACC 34s0B            [12] 2214 	addc	a,#(_sine_table >> 8)
      000ACE F5 83            [12] 2215 	mov	dph,a
      000AD0 E4               [12] 2216 	clr	a
      000AD1 93               [24] 2217 	movc	a,@a+dptr
      000AD2 F8               [12] 2218 	mov	r0,a
      000AD3 A3               [24] 2219 	inc	dptr
      000AD4 E4               [12] 2220 	clr	a
      000AD5 93               [24] 2221 	movc	a,@a+dptr
      000AD6 F9               [12] 2222 	mov	r1,a
      000AD7 A3               [24] 2223 	inc	dptr
      000AD8 E4               [12] 2224 	clr	a
      000AD9 93               [24] 2225 	movc	a,@a+dptr
      000ADA FE               [12] 2226 	mov	r6,a
      000ADB A3               [24] 2227 	inc	dptr
      000ADC E4               [12] 2228 	clr	a
      000ADD 93               [24] 2229 	movc	a,@a+dptr
      000ADE FF               [12] 2230 	mov	r7,a
      000ADF 88 02            [24] 2231 	mov	ar2,r0
      000AE1 89 03            [24] 2232 	mov	ar3,r1
      000AE3 8E 04            [24] 2233 	mov	ar4,r6
      000AE5 EF               [12] 2234 	mov	a,r7
      000AE6 B2 E7            [12] 2235 	cpl	acc.7
      000AE8 FD               [12] 2236 	mov	r5,a
      000AE9                       2237 00106$:
      000AE9 8A 82            [24] 2238 	mov	dpl,r2
      000AEB 8B 83            [24] 2239 	mov	dph,r3
      000AED 8C F0            [24] 2240 	mov	b,r4
      000AEF ED               [12] 2241 	mov	a,r5
                                   2242 ;	./src/angry_bird.c:444: }
      000AF0 22               [24] 2243 	ret
                                   2244 ;------------------------------------------------------------
                                   2245 ;Allocation info for local variables in function 'getcosine'
                                   2246 ;------------------------------------------------------------
                                   2247 ;angle                     Allocated to registers r6 r7 
                                   2248 ;------------------------------------------------------------
                                   2249 ;	./src/angry_bird.c:445: float getcosine(int angle)
                                   2250 ;	-----------------------------------------
                                   2251 ;	 function getcosine
                                   2252 ;	-----------------------------------------
      000AF1                       2253 _getcosine:
      000AF1 AE 82            [24] 2254 	mov	r6,dpl
      000AF3 AF 83            [24] 2255 	mov	r7,dph
                                   2256 ;	./src/angry_bird.c:447: return getsine((angle > 0) ? -angle + 90 : angle + 90);
      000AF5 C3               [12] 2257 	clr	c
      000AF6 E4               [12] 2258 	clr	a
      000AF7 9E               [12] 2259 	subb	a,r6
      000AF8 74 80            [12] 2260 	mov	a,#(0x00 ^ 0x80)
      000AFA 8F F0            [24] 2261 	mov	b,r7
      000AFC 63 F0 80         [24] 2262 	xrl	b,#0x80
      000AFF 95 F0            [12] 2263 	subb	a,b
      000B01 50 10            [24] 2264 	jnc	00103$
      000B03 C3               [12] 2265 	clr	c
      000B04 E4               [12] 2266 	clr	a
      000B05 9E               [12] 2267 	subb	a,r6
      000B06 FC               [12] 2268 	mov	r4,a
      000B07 E4               [12] 2269 	clr	a
      000B08 9F               [12] 2270 	subb	a,r7
      000B09 FD               [12] 2271 	mov	r5,a
      000B0A 74 5A            [12] 2272 	mov	a,#0x5a
      000B0C 2C               [12] 2273 	add	a,r4
      000B0D FC               [12] 2274 	mov	r4,a
      000B0E E4               [12] 2275 	clr	a
      000B0F 3D               [12] 2276 	addc	a,r5
      000B10 FD               [12] 2277 	mov	r5,a
      000B11 80 07            [24] 2278 	sjmp	00104$
      000B13                       2279 00103$:
      000B13 74 5A            [12] 2280 	mov	a,#0x5a
      000B15 2E               [12] 2281 	add	a,r6
      000B16 FC               [12] 2282 	mov	r4,a
      000B17 E4               [12] 2283 	clr	a
      000B18 3F               [12] 2284 	addc	a,r7
      000B19 FD               [12] 2285 	mov	r5,a
      000B1A                       2286 00104$:
      000B1A 8C 82            [24] 2287 	mov	dpl,r4
      000B1C 8D 83            [24] 2288 	mov	dph,r5
                                   2289 ;	./src/angry_bird.c:448: }
      000B1E 02r0Ar46         [24] 2290 	ljmp	_getsine
                                   2291 ;------------------------------------------------------------
                                   2292 ;Allocation info for local variables in function 'pow_2'
                                   2293 ;------------------------------------------------------------
                                   2294 ;n                         Allocated to registers r4 r5 r6 r7 
                                   2295 ;------------------------------------------------------------
                                   2296 ;	./src/angry_bird.c:449: float pow_2(float n)
                                   2297 ;	-----------------------------------------
                                   2298 ;	 function pow_2
                                   2299 ;	-----------------------------------------
      000B21                       2300 _pow_2:
      000B21 AC 82            [24] 2301 	mov	r4,dpl
      000B23 AD 83            [24] 2302 	mov	r5,dph
      000B25 AE F0            [24] 2303 	mov	r6,b
      000B27 FF               [12] 2304 	mov	r7,a
                                   2305 ;	./src/angry_bird.c:451: return n * n;
      000B28 C0 04            [24] 2306 	push	ar4
      000B2A C0 05            [24] 2307 	push	ar5
      000B2C C0 06            [24] 2308 	push	ar6
      000B2E C0 07            [24] 2309 	push	ar7
      000B30 8C 82            [24] 2310 	mov	dpl,r4
      000B32 8D 83            [24] 2311 	mov	dph,r5
      000B34 8E F0            [24] 2312 	mov	b,r6
      000B36 EF               [12] 2313 	mov	a,r7
      000B37 12r00r00         [24] 2314 	lcall	___fsmul
      000B3A AC 82            [24] 2315 	mov	r4,dpl
      000B3C AD 83            [24] 2316 	mov	r5,dph
      000B3E AE F0            [24] 2317 	mov	r6,b
      000B40 FF               [12] 2318 	mov	r7,a
      000B41 E5 81            [12] 2319 	mov	a,sp
      000B43 24 FC            [12] 2320 	add	a,#0xfc
      000B45 F5 81            [12] 2321 	mov	sp,a
      000B47 8C 82            [24] 2322 	mov	dpl,r4
      000B49 8D 83            [24] 2323 	mov	dph,r5
      000B4B 8E F0            [24] 2324 	mov	b,r6
      000B4D EF               [12] 2325 	mov	a,r7
                                   2326 ;	./src/angry_bird.c:452: }
      000B4E 22               [24] 2327 	ret
                                   2328 	.area CSEG    (CODE)
                                   2329 	.area CONST   (CODE)
      000000                       2330 _shooter_logo:
      000000 00                    2331 	.db #0x00	; 0
      000001 FF                    2332 	.db #0xff	; 255
      000002 FF                    2333 	.db #0xff	; 255
      000003 F6                    2334 	.db #0xf6	; 246
      000004 00                    2335 	.db #0x00	; 0
      000005 FE                    2336 	.db #0xfe	; 254
      000006 FF                    2337 	.db #0xff	; 255
      000007 FE                    2338 	.db #0xfe	; 254
      000008 00                    2339 	.db #0x00	; 0
      000009 01                    2340 	.db #0x01	; 1
      00000A 07                    2341 	.db #0x07	; 7
      00000B FF                    2342 	.db #0xff	; 255
      00000C FE                    2343 	.db #0xfe	; 254
      00000D FF                    2344 	.db #0xff	; 255
      00000E 07                    2345 	.db #0x07	; 7
      00000F 00                    2346 	.db #0x00	; 0
      000010                       2347 _pig_logo:
      000010 C0                    2348 	.db #0xc0	; 192
      000011 30                    2349 	.db #0x30	; 48	'0'
      000012 38                    2350 	.db #0x38	; 56	'8'
      000013 FC                    2351 	.db #0xfc	; 252
      000014 FF                    2352 	.db #0xff	; 255
      000015 FF                    2353 	.db #0xff	; 255
      000016 FC                    2354 	.db #0xfc	; 252
      000017 FC                    2355 	.db #0xfc	; 252
      000018 3E                    2356 	.db #0x3e	; 62
      000019 3E                    2357 	.db #0x3e	; 62
      00001A F0                    2358 	.db #0xf0	; 240
      00001B C0                    2359 	.db #0xc0	; 192
      00001C 01                    2360 	.db #0x01	; 1
      00001D 03                    2361 	.db #0x03	; 3
      00001E 07                    2362 	.db #0x07	; 7
      00001F 0F                    2363 	.db #0x0f	; 15
      000020 0F                    2364 	.db #0x0f	; 15
      000021 0F                    2365 	.db #0x0f	; 15
      000022 0F                    2366 	.db #0x0f	; 15
      000023 0F                    2367 	.db #0x0f	; 15
      000024 0F                    2368 	.db #0x0f	; 15
      000025 07                    2369 	.db #0x07	; 7
      000026 03                    2370 	.db #0x03	; 3
      000027 01                    2371 	.db #0x01	; 1
      000028                       2372 _bird_logo:
      000028 7E                    2373 	.db #0x7e	; 126
      000029 C3                    2374 	.db #0xc3	; 195
      00002A 81                    2375 	.db #0x81	; 129
      00002B 81                    2376 	.db #0x81	; 129
      00002C 81                    2377 	.db #0x81	; 129
      00002D 81                    2378 	.db #0x81	; 129
      00002E C3                    2379 	.db #0xc3	; 195
      00002F 7E                    2380 	.db #0x7e	; 126
                                   2381 	.area CONST   (CODE)
      000030                       2382 ___str_0:
      000030 53 20                 2383 	.ascii "S "
      000032 00                    2384 	.db 0x00
                                   2385 	.area CSEG    (CODE)
                                   2386 	.area CONST   (CODE)
      000033                       2387 ___str_1:
      000033 41 20                 2388 	.ascii "A "
      000035 00                    2389 	.db 0x00
                                   2390 	.area CSEG    (CODE)
                                   2391 	.area CONST   (CODE)
      000036                       2392 ___str_2:
      000036 20 20 20 20 20 20 20  2393 	.ascii "             "
             20 20 20 20 20 20
      000043 00                    2394 	.db 0x00
                                   2395 	.area CSEG    (CODE)
                                   2396 	.area CONST   (CODE)
      000044                       2397 ___str_3:
      000044 57 61 69 74 69 6E 67  2398 	.ascii "Waiting .... "
             20 2E 2E 2E 2E 20
      000051 00                    2399 	.db 0x00
                                   2400 	.area CSEG    (CODE)
      000B4F                       2401 _sine_table:
      000B4F 00 00 00 00           2402 	.byte #0x00, #0x00, #0x00, #0x00	;  0.000000e+00
      000B53 33 C4 31 3E           2403 	.byte #0x33, #0xc4, #0x31, #0x3e	;  1.736000e-01
      000B57 A0 1A AF 3E           2404 	.byte #0xa0, #0x1a, #0xaf, #0x3e	;  3.420000e-01
      000B5B 00 00 00 3F           2405 	.byte #0x00, #0x00, #0x00, #0x3f	;  5.000000e-01
      000B5F 8A 8E 24 3F           2406 	.byte #0x8a, #0x8e, #0x24, #0x3f	;  6.428000e-01
      000B63 93 18 44 3F           2407 	.byte #0x93, #0x18, #0x44, #0x3f	;  7.660000e-01
      000B67 2D B2 5D 3F           2408 	.byte #0x2d, #0xb2, #0x5d, #0x3f	;  8.660000e-01
      000B6B 2E 90 70 3F           2409 	.byte #0x2e, #0x90, #0x70, #0x3f	;  9.397000e-01
      000B6F DA 1B 7C 3F           2410 	.byte #0xda, #0x1b, #0x7c, #0x3f	;  9.848000e-01
      000B73 00 00 80 3F           2411 	.byte #0x00, #0x00, #0x80, #0x3f	;  1.000000e+00
                                   2412 	.area CONST   (CODE)
      000052                       2413 ___str_4:
      000052 20 20 20              2414 	.ascii "   "
      000055 00                    2415 	.db 0x00
                                   2416 	.area CSEG    (CODE)
                                   2417 	.area CONST   (CODE)
      000056                       2418 ___str_5:
      000056 20                    2419 	.ascii " "
      000057 00                    2420 	.db 0x00
                                   2421 	.area CSEG    (CODE)
                                   2422 	.area XINIT   (CODE)
                                   2423 	.area CABS    (ABS,CODE)
