                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.2 #14362 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module angry_bird
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _sine_table
                                     12 	.globl _over_page
                                     13 	.globl _win_page
                                     14 	.globl _bird_logo
                                     15 	.globl _pig_logo
                                     16 	.globl _shooter_logo
                                     17 	.globl _I2C_Stop
                                     18 	.globl _I2C_Start
                                     19 	.globl _oledSendData
                                     20 	.globl _OLED_SetCursor
                                     21 	.globl _OLED_Clear
                                     22 	.globl _OLED_DisplayString
                                     23 	.globl _OLED_Init
                                     24 	.globl _delay_ms
                                     25 	.globl _CY
                                     26 	.globl _AC
                                     27 	.globl _F0
                                     28 	.globl _RS1
                                     29 	.globl _RS0
                                     30 	.globl _OV
                                     31 	.globl _F1
                                     32 	.globl _P
                                     33 	.globl _PS
                                     34 	.globl _PT1
                                     35 	.globl _PX1
                                     36 	.globl _PT0
                                     37 	.globl _PX0
                                     38 	.globl _RD
                                     39 	.globl _WR
                                     40 	.globl _T1
                                     41 	.globl _T0
                                     42 	.globl _INT1
                                     43 	.globl _INT0
                                     44 	.globl _TXD
                                     45 	.globl _RXD
                                     46 	.globl _P3_7
                                     47 	.globl _P3_6
                                     48 	.globl _P3_5
                                     49 	.globl _P3_4
                                     50 	.globl _P3_3
                                     51 	.globl _P3_2
                                     52 	.globl _P3_1
                                     53 	.globl _P3_0
                                     54 	.globl _EA
                                     55 	.globl _ES
                                     56 	.globl _ET1
                                     57 	.globl _EX1
                                     58 	.globl _ET0
                                     59 	.globl _EX0
                                     60 	.globl _P2_7
                                     61 	.globl _P2_6
                                     62 	.globl _P2_5
                                     63 	.globl _P2_4
                                     64 	.globl _P2_3
                                     65 	.globl _P2_2
                                     66 	.globl _P2_1
                                     67 	.globl _P2_0
                                     68 	.globl _SM0
                                     69 	.globl _SM1
                                     70 	.globl _SM2
                                     71 	.globl _REN
                                     72 	.globl _TB8
                                     73 	.globl _RB8
                                     74 	.globl _TI
                                     75 	.globl _RI
                                     76 	.globl _P1_7
                                     77 	.globl _P1_6
                                     78 	.globl _P1_5
                                     79 	.globl _P1_4
                                     80 	.globl _P1_3
                                     81 	.globl _P1_2
                                     82 	.globl _P1_1
                                     83 	.globl _P1_0
                                     84 	.globl _TF1
                                     85 	.globl _TR1
                                     86 	.globl _TF0
                                     87 	.globl _TR0
                                     88 	.globl _IE1
                                     89 	.globl _IT1
                                     90 	.globl _IE0
                                     91 	.globl _IT0
                                     92 	.globl _P0_7
                                     93 	.globl _P0_6
                                     94 	.globl _P0_5
                                     95 	.globl _P0_4
                                     96 	.globl _P0_3
                                     97 	.globl _P0_2
                                     98 	.globl _P0_1
                                     99 	.globl _P0_0
                                    100 	.globl _B
                                    101 	.globl _ACC
                                    102 	.globl _PSW
                                    103 	.globl _IP
                                    104 	.globl _P3
                                    105 	.globl _IE
                                    106 	.globl _P2
                                    107 	.globl _SBUF
                                    108 	.globl _SCON
                                    109 	.globl _P1
                                    110 	.globl _TH1
                                    111 	.globl _TH0
                                    112 	.globl _TL1
                                    113 	.globl _TL0
                                    114 	.globl _TMOD
                                    115 	.globl _TCON
                                    116 	.globl _PCON
                                    117 	.globl _DPH
                                    118 	.globl _DPL
                                    119 	.globl _SP
                                    120 	.globl _P0
                                    121 	.globl _prebut_enter
                                    122 	.globl _prebut_right
                                    123 	.globl _prebut_left
                                    124 	.globl _prebut_down
                                    125 	.globl _prebut_up
                                    126 	.globl _cur_state
                                    127 	.globl _led_cur_state
                                    128 	.globl _control_strength
                                    129 	.globl _control_angle
                                    130 	.globl _pig_amt
                                    131 	.globl _bird_amt
                                    132 	.globl _col_offset
                                    133 	.globl _row_offset
                                    134 	.globl _received_flag
                                    135 	.globl _received_data
                                    136 	.globl _send_flag
                                    137 	.globl _send_data
                                    138 	.globl _angrybird_display_game
                                    139 	.globl _angrybird_state_machine
                                    140 	.globl _angrybird_game_state
                                    141 	.globl _getsine
                                    142 	.globl _getcosine
                                    143 	.globl _pow_2
                                    144 ;--------------------------------------------------------
                                    145 ; special function registers
                                    146 ;--------------------------------------------------------
                                    147 	.area RSEG    (ABS,DATA)
      000000                        148 	.org 0x0000
                           000080   149 _P0	=	0x0080
                           000081   150 _SP	=	0x0081
                           000082   151 _DPL	=	0x0082
                           000083   152 _DPH	=	0x0083
                           000087   153 _PCON	=	0x0087
                           000088   154 _TCON	=	0x0088
                           000089   155 _TMOD	=	0x0089
                           00008A   156 _TL0	=	0x008a
                           00008B   157 _TL1	=	0x008b
                           00008C   158 _TH0	=	0x008c
                           00008D   159 _TH1	=	0x008d
                           000090   160 _P1	=	0x0090
                           000098   161 _SCON	=	0x0098
                           000099   162 _SBUF	=	0x0099
                           0000A0   163 _P2	=	0x00a0
                           0000A8   164 _IE	=	0x00a8
                           0000B0   165 _P3	=	0x00b0
                           0000B8   166 _IP	=	0x00b8
                           0000D0   167 _PSW	=	0x00d0
                           0000E0   168 _ACC	=	0x00e0
                           0000F0   169 _B	=	0x00f0
                                    170 ;--------------------------------------------------------
                                    171 ; special function bits
                                    172 ;--------------------------------------------------------
                                    173 	.area RSEG    (ABS,DATA)
      000000                        174 	.org 0x0000
                           000080   175 _P0_0	=	0x0080
                           000081   176 _P0_1	=	0x0081
                           000082   177 _P0_2	=	0x0082
                           000083   178 _P0_3	=	0x0083
                           000084   179 _P0_4	=	0x0084
                           000085   180 _P0_5	=	0x0085
                           000086   181 _P0_6	=	0x0086
                           000087   182 _P0_7	=	0x0087
                           000088   183 _IT0	=	0x0088
                           000089   184 _IE0	=	0x0089
                           00008A   185 _IT1	=	0x008a
                           00008B   186 _IE1	=	0x008b
                           00008C   187 _TR0	=	0x008c
                           00008D   188 _TF0	=	0x008d
                           00008E   189 _TR1	=	0x008e
                           00008F   190 _TF1	=	0x008f
                           000090   191 _P1_0	=	0x0090
                           000091   192 _P1_1	=	0x0091
                           000092   193 _P1_2	=	0x0092
                           000093   194 _P1_3	=	0x0093
                           000094   195 _P1_4	=	0x0094
                           000095   196 _P1_5	=	0x0095
                           000096   197 _P1_6	=	0x0096
                           000097   198 _P1_7	=	0x0097
                           000098   199 _RI	=	0x0098
                           000099   200 _TI	=	0x0099
                           00009A   201 _RB8	=	0x009a
                           00009B   202 _TB8	=	0x009b
                           00009C   203 _REN	=	0x009c
                           00009D   204 _SM2	=	0x009d
                           00009E   205 _SM1	=	0x009e
                           00009F   206 _SM0	=	0x009f
                           0000A0   207 _P2_0	=	0x00a0
                           0000A1   208 _P2_1	=	0x00a1
                           0000A2   209 _P2_2	=	0x00a2
                           0000A3   210 _P2_3	=	0x00a3
                           0000A4   211 _P2_4	=	0x00a4
                           0000A5   212 _P2_5	=	0x00a5
                           0000A6   213 _P2_6	=	0x00a6
                           0000A7   214 _P2_7	=	0x00a7
                           0000A8   215 _EX0	=	0x00a8
                           0000A9   216 _ET0	=	0x00a9
                           0000AA   217 _EX1	=	0x00aa
                           0000AB   218 _ET1	=	0x00ab
                           0000AC   219 _ES	=	0x00ac
                           0000AF   220 _EA	=	0x00af
                           0000B0   221 _P3_0	=	0x00b0
                           0000B1   222 _P3_1	=	0x00b1
                           0000B2   223 _P3_2	=	0x00b2
                           0000B3   224 _P3_3	=	0x00b3
                           0000B4   225 _P3_4	=	0x00b4
                           0000B5   226 _P3_5	=	0x00b5
                           0000B6   227 _P3_6	=	0x00b6
                           0000B7   228 _P3_7	=	0x00b7
                           0000B0   229 _RXD	=	0x00b0
                           0000B1   230 _TXD	=	0x00b1
                           0000B2   231 _INT0	=	0x00b2
                           0000B3   232 _INT1	=	0x00b3
                           0000B4   233 _T0	=	0x00b4
                           0000B5   234 _T1	=	0x00b5
                           0000B6   235 _WR	=	0x00b6
                           0000B7   236 _RD	=	0x00b7
                           0000B8   237 _PX0	=	0x00b8
                           0000B9   238 _PT0	=	0x00b9
                           0000BA   239 _PX1	=	0x00ba
                           0000BB   240 _PT1	=	0x00bb
                           0000BC   241 _PS	=	0x00bc
                           0000D0   242 _P	=	0x00d0
                           0000D1   243 _F1	=	0x00d1
                           0000D2   244 _OV	=	0x00d2
                           0000D3   245 _RS0	=	0x00d3
                           0000D4   246 _RS1	=	0x00d4
                           0000D5   247 _F0	=	0x00d5
                           0000D6   248 _AC	=	0x00d6
                           0000D7   249 _CY	=	0x00d7
                                    250 ;--------------------------------------------------------
                                    251 ; overlayable register banks
                                    252 ;--------------------------------------------------------
                                    253 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        254 	.ds 8
                                    255 ;--------------------------------------------------------
                                    256 ; internal ram data
                                    257 ;--------------------------------------------------------
                                    258 	.area DSEG    (DATA)
      000000                        259 _send_data::
      000000                        260 	.ds 1
      000001                        261 _send_flag::
      000001                        262 	.ds 1
      000002                        263 _received_data::
      000002                        264 	.ds 1
      000003                        265 _received_flag::
      000003                        266 	.ds 1
      000004                        267 _row_offset::
      000004                        268 	.ds 2
      000006                        269 _col_offset::
      000006                        270 	.ds 2
      000008                        271 _bird_amt::
      000008                        272 	.ds 2
      00000A                        273 _pig_amt::
      00000A                        274 	.ds 2
      00000C                        275 _control_angle::
      00000C                        276 	.ds 2
      00000E                        277 _control_strength::
      00000E                        278 	.ds 2
      000010                        279 _angrybird_display_game_control_strength__65537_30:
      000010                        280 	.ds 2
      000012                        281 _angrybird_display_game_control_angle__65537_30:
      000012                        282 	.ds 5
      000017                        283 _angrybird_display_game_angle__65539_32:
      000017                        284 	.ds 2
      000019                        285 _angrybird_display_game_k_131075_33:
      000019                        286 	.ds 2
      00001B                        287 _led_cur_state::
      00001B                        288 	.ds 2
      00001D                        289 _cur_state::
      00001D                        290 	.ds 2
      00001F                        291 _prebut_up::
      00001F                        292 	.ds 2
      000021                        293 _prebut_down::
      000021                        294 	.ds 2
      000023                        295 _prebut_left::
      000023                        296 	.ds 2
      000025                        297 _prebut_right::
      000025                        298 	.ds 2
      000027                        299 _prebut_enter::
      000027                        300 	.ds 2
      000029                        301 _angrybird_game_state_control_angle__196609_62:
      000029                        302 	.ds 5
      00002E                        303 _angrybird_game_state_angle__196610_63:
      00002E                        304 	.ds 2
      000030                        305 _angrybird_game_state_control_strength__196609_68:
      000030                        306 	.ds 2
      000032                        307 _angrybird_game_state_delta_y_196609_75:
      000032                        308 	.ds 4
      000036                        309 _angrybird_game_state_delta_x_196609_75:
      000036                        310 	.ds 4
      00003A                        311 _angrybird_game_state_peak_x_196609_75:
      00003A                        312 	.ds 4
      00003E                        313 _angrybird_game_state_peak_y_196609_75:
      00003E                        314 	.ds 4
      000042                        315 _angrybird_game_state_a_196609_75:
      000042                        316 	.ds 4
      000046                        317 _angrybird_game_state_i_262145_80:
      000046                        318 	.ds 2
      000048                        319 _angrybird_game_state_output_row_327681_81:
      000048                        320 	.ds 2
      00004A                        321 _angrybird_game_state_sloc1_1_0:
      00004A                        322 	.ds 4
                                    323 ;--------------------------------------------------------
                                    324 ; overlayable items in internal ram
                                    325 ;--------------------------------------------------------
                                    326 ;--------------------------------------------------------
                                    327 ; indirectly addressable internal ram data
                                    328 ;--------------------------------------------------------
                                    329 	.area ISEG    (DATA)
                                    330 ;--------------------------------------------------------
                                    331 ; absolute internal ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area IABS    (ABS,DATA)
                                    334 	.area IABS    (ABS,DATA)
                                    335 ;--------------------------------------------------------
                                    336 ; bit data
                                    337 ;--------------------------------------------------------
                                    338 	.area BSEG    (BIT)
      000000                        339 _angrybird_display_game_sloc0_1_0:
      000000                        340 	.ds 1
      000001                        341 _angrybird_game_state_sloc0_1_0:
      000001                        342 	.ds 1
                                    343 ;--------------------------------------------------------
                                    344 ; paged external ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area PSEG    (PAG,XDATA)
                                    347 ;--------------------------------------------------------
                                    348 ; uninitialized external ram data
                                    349 ;--------------------------------------------------------
                                    350 	.area XSEG    (XDATA)
                                    351 ;--------------------------------------------------------
                                    352 ; absolute external ram data
                                    353 ;--------------------------------------------------------
                                    354 	.area XABS    (ABS,XDATA)
                                    355 ;--------------------------------------------------------
                                    356 ; initialized external ram data
                                    357 ;--------------------------------------------------------
                                    358 	.area XISEG   (XDATA)
                                    359 	.area HOME    (CODE)
                                    360 	.area GSINIT0 (CODE)
                                    361 	.area GSINIT1 (CODE)
                                    362 	.area GSINIT2 (CODE)
                                    363 	.area GSINIT3 (CODE)
                                    364 	.area GSINIT4 (CODE)
                                    365 	.area GSINIT5 (CODE)
                                    366 	.area GSINIT  (CODE)
                                    367 	.area GSFINAL (CODE)
                                    368 	.area CSEG    (CODE)
                                    369 ;--------------------------------------------------------
                                    370 ; global & static initialisations
                                    371 ;--------------------------------------------------------
                                    372 	.area HOME    (CODE)
                                    373 	.area GSINIT  (CODE)
                                    374 	.area GSFINAL (CODE)
                                    375 	.area GSINIT  (CODE)
                                    376 ;	./src/angry_bird.c:146: int led_cur_state = 1;
      000000 75*1B 01         [24]  377 	mov	_led_cur_state,#0x01
      000003 75*1C 00         [24]  378 	mov	(_led_cur_state + 1),#0x00
                                    379 ;	./src/angry_bird.c:164: int cur_state = 0;
      000006 E4               [12]  380 	clr	a
      000007 F5*1D            [12]  381 	mov	_cur_state,a
      000009 F5*1E            [12]  382 	mov	(_cur_state + 1),a
                                    383 ;	./src/angry_bird.c:214: unsigned int prebut_up = 0;
      00000B F5*1F            [12]  384 	mov	_prebut_up,a
      00000D F5*20            [12]  385 	mov	(_prebut_up + 1),a
                                    386 ;	./src/angry_bird.c:215: unsigned int prebut_down = 0;
      00000F F5*21            [12]  387 	mov	_prebut_down,a
      000011 F5*22            [12]  388 	mov	(_prebut_down + 1),a
                                    389 ;	./src/angry_bird.c:216: unsigned int prebut_left = 0;
      000013 F5*23            [12]  390 	mov	_prebut_left,a
      000015 F5*24            [12]  391 	mov	(_prebut_left + 1),a
                                    392 ;	./src/angry_bird.c:217: unsigned int prebut_right = 0;
      000017 F5*25            [12]  393 	mov	_prebut_right,a
      000019 F5*26            [12]  394 	mov	(_prebut_right + 1),a
                                    395 ;	./src/angry_bird.c:218: unsigned int prebut_enter = 0;
      00001B F5*27            [12]  396 	mov	_prebut_enter,a
      00001D F5*28            [12]  397 	mov	(_prebut_enter + 1),a
                                    398 ;--------------------------------------------------------
                                    399 ; Home
                                    400 ;--------------------------------------------------------
                                    401 	.area HOME    (CODE)
                                    402 	.area HOME    (CODE)
                                    403 ;--------------------------------------------------------
                                    404 ; code
                                    405 ;--------------------------------------------------------
                                    406 	.area CSEG    (CODE)
                                    407 ;------------------------------------------------------------
                                    408 ;Allocation info for local variables in function 'angrybird_display_game'
                                    409 ;------------------------------------------------------------
                                    410 ;control_strength_         Allocated with name '_angrybird_display_game_control_strength__65537_30'
                                    411 ;control_angle_            Allocated with name '_angrybird_display_game_control_angle__65537_30'
                                    412 ;i                         Allocated to registers r4 r5 
                                    413 ;angle_                    Allocated with name '_angrybird_display_game_angle__65539_32'
                                    414 ;k                         Allocated with name '_angrybird_display_game_k_131075_33'
                                    415 ;j                         Allocated to registers r4 r5 
                                    416 ;i                         Allocated to registers r3 
                                    417 ;j                         Allocated to registers r6 r7 
                                    418 ;i                         Allocated to registers r5 
                                    419 ;j                         Allocated to registers r6 r7 
                                    420 ;i                         Allocated to registers r5 
                                    421 ;j                         Allocated to registers r6 r7 
                                    422 ;i                         Allocated to registers r5 
                                    423 ;------------------------------------------------------------
                                    424 ;	./src/angry_bird.c:44: void angrybird_display_game(void)
                                    425 ;	-----------------------------------------
                                    426 ;	 function angrybird_display_game
                                    427 ;	-----------------------------------------
      000000                        428 _angrybird_display_game:
                           000007   429 	ar7 = 0x07
                           000006   430 	ar6 = 0x06
                           000005   431 	ar5 = 0x05
                           000004   432 	ar4 = 0x04
                           000003   433 	ar3 = 0x03
                           000002   434 	ar2 = 0x02
                           000001   435 	ar1 = 0x01
                           000000   436 	ar0 = 0x00
                                    437 ;	./src/angry_bird.c:46: bird_amt = bird_total_amount;
      000000 75*08 09         [24]  438 	mov	_bird_amt,#0x09
      000003 75*09 00         [24]  439 	mov	(_bird_amt + 1),#0x00
                                    440 ;	./src/angry_bird.c:47: pig_amt = pig_total_amount;
      000006 75*0A 03         [24]  441 	mov	_pig_amt,#0x03
      000009 75*0B 00         [24]  442 	mov	(_pig_amt + 1),#0x00
                                    443 ;	./src/angry_bird.c:48: control_angle = 60;
      00000C 75*0C 3C         [24]  444 	mov	_control_angle,#0x3c
      00000F 75*0D 00         [24]  445 	mov	(_control_angle + 1),#0x00
                                    446 ;	./src/angry_bird.c:49: control_strength = 3;
      000012 75*0E 03         [24]  447 	mov	_control_strength,#0x03
      000015 75*0F 00         [24]  448 	mov	(_control_strength + 1),#0x00
                                    449 ;	./src/angry_bird.c:51: OLED_Clear();
      000018 12r00r00         [24]  450 	lcall	_OLED_Clear
                                    451 ;	./src/angry_bird.c:55: control_strength_[0] = '0' + control_strength;
      00001B AF*0E            [24]  452 	mov	r7,_control_strength
      00001D 74 30            [12]  453 	mov	a,#0x30
      00001F 2F               [12]  454 	add	a,r7
      000020 F5*10            [12]  455 	mov	_angrybird_display_game_control_strength__65537_30,a
                                    456 ;	./src/angry_bird.c:56: control_strength_[1] = '\0';
                                    457 ;	./src/angry_bird.c:58: int i = 0;
                                    458 ;	./src/angry_bird.c:59: if (control_angle < 0)
      000022 E4               [12]  459 	clr	a
      000023 F5*11            [12]  460 	mov	(_angrybird_display_game_control_strength__65537_30 + 0x0001),a
      000025 FE               [12]  461 	mov	r6,a
      000026 FF               [12]  462 	mov	r7,a
      000027 E5*0D            [12]  463 	mov	a,(_control_angle + 1)
      000029 30 E7 07         [24]  464 	jnb	acc.7,00102$
                                    465 ;	./src/angry_bird.c:60: control_angle_[i++] = '-';
      00002C 7E 01            [12]  466 	mov	r6,#0x01
      00002E 7F 00            [12]  467 	mov	r7,#0x00
      000030 75*12 2D         [24]  468 	mov	_angrybird_display_game_control_angle__65537_30,#0x2d
      000033                        469 00102$:
                                    470 ;	./src/angry_bird.c:61: int angle_ = (control_angle >= 0) ? control_angle : -1 * control_angle;
      000033 E5*0D            [12]  471 	mov	a,(_control_angle + 1)
      000035 33               [12]  472 	rlc	a
      000036 92*00            [24]  473 	mov	_angrybird_display_game_sloc0_1_0,c
      000038 40 06            [24]  474 	jc	00143$
      00003A AC*0C            [24]  475 	mov	r4,_control_angle
      00003C AD*0D            [24]  476 	mov	r5,(_control_angle + 1)
      00003E 80 09            [24]  477 	sjmp	00144$
      000040                        478 00143$:
      000040 C3               [12]  479 	clr	c
      000041 E4               [12]  480 	clr	a
      000042 95*0C            [12]  481 	subb	a,_control_angle
      000044 FC               [12]  482 	mov	r4,a
      000045 E4               [12]  483 	clr	a
      000046 95*0D            [12]  484 	subb	a,(_control_angle + 1)
      000048 FD               [12]  485 	mov	r5,a
      000049                        486 00144$:
      000049 8C*17            [24]  487 	mov	_angrybird_display_game_angle__65539_32,r4
      00004B 8D*18            [24]  488 	mov	(_angrybird_display_game_angle__65539_32 + 1),r5
                                    489 ;	./src/angry_bird.c:62: if (angle_ % 100 / 10 != 0)
      00004D 75*00 64         [24]  490 	mov	__modsint_PARM_2,#0x64
      000050 75*01 00         [24]  491 	mov	(__modsint_PARM_2 + 1),#0x00
      000053 85*17 82         [24]  492 	mov	dpl,_angrybird_display_game_angle__65539_32
      000056 85*18 83         [24]  493 	mov	dph,(_angrybird_display_game_angle__65539_32 + 1)
      000059 C0 07            [24]  494 	push	ar7
      00005B C0 06            [24]  495 	push	ar6
      00005D 12r00r00         [24]  496 	lcall	__modsint
      000060 75*00 0A         [24]  497 	mov	__divsint_PARM_2,#0x0a
      000063 75*01 00         [24]  498 	mov	(__divsint_PARM_2 + 1),#0x00
      000066 12r00r00         [24]  499 	lcall	__divsint
      000069 AA 82            [24]  500 	mov	r2,dpl
      00006B AB 83            [24]  501 	mov	r3,dph
      00006D D0 06            [24]  502 	pop	ar6
      00006F D0 07            [24]  503 	pop	ar7
      000071 EA               [12]  504 	mov	a,r2
      000072 4B               [12]  505 	orl	a,r3
      000073 60 11            [24]  506 	jz	00104$
                                    507 ;	./src/angry_bird.c:63: control_angle_[i++] = '0' + angle_ % 100 / 10;
      000075 8E 04            [24]  508 	mov	ar4,r6
      000077 8F 05            [24]  509 	mov	ar5,r7
      000079 0E               [12]  510 	inc	r6
      00007A BE 00 01         [24]  511 	cjne	r6,#0x00,00304$
      00007D 0F               [12]  512 	inc	r7
      00007E                        513 00304$:
      00007E EC               [12]  514 	mov	a,r4
      00007F 24r12            [12]  515 	add	a,#_angrybird_display_game_control_angle__65537_30
      000081 F9               [12]  516 	mov	r1,a
      000082 74 30            [12]  517 	mov	a,#0x30
      000084 2A               [12]  518 	add	a,r2
      000085 F7               [12]  519 	mov	@r1,a
      000086                        520 00104$:
                                    521 ;	./src/angry_bird.c:64: control_angle_[i++] = '0' + angle_ % 10;
      000086 74 01            [12]  522 	mov	a,#0x01
      000088 2E               [12]  523 	add	a,r6
      000089 FC               [12]  524 	mov	r4,a
      00008A E4               [12]  525 	clr	a
      00008B 3F               [12]  526 	addc	a,r7
      00008C FD               [12]  527 	mov	r5,a
      00008D EE               [12]  528 	mov	a,r6
      00008E 24r12            [12]  529 	add	a,#_angrybird_display_game_control_angle__65537_30
      000090 F9               [12]  530 	mov	r1,a
      000091 75*00 0A         [24]  531 	mov	__modsint_PARM_2,#0x0a
      000094 75*01 00         [24]  532 	mov	(__modsint_PARM_2 + 1),#0x00
      000097 85*17 82         [24]  533 	mov	dpl,_angrybird_display_game_angle__65539_32
      00009A 85*18 83         [24]  534 	mov	dph,(_angrybird_display_game_angle__65539_32 + 1)
      00009D C0 05            [24]  535 	push	ar5
      00009F C0 04            [24]  536 	push	ar4
      0000A1 C0 01            [24]  537 	push	ar1
      0000A3 12r00r00         [24]  538 	lcall	__modsint
      0000A6 AE 82            [24]  539 	mov	r6,dpl
      0000A8 D0 01            [24]  540 	pop	ar1
      0000AA D0 04            [24]  541 	pop	ar4
      0000AC D0 05            [24]  542 	pop	ar5
      0000AE 74 30            [12]  543 	mov	a,#0x30
      0000B0 2E               [12]  544 	add	a,r6
      0000B1 F7               [12]  545 	mov	@r1,a
                                    546 ;	./src/angry_bird.c:65: control_angle_[i++] = '\0';
      0000B2 EC               [12]  547 	mov	a,r4
      0000B3 24r12            [12]  548 	add	a,#_angrybird_display_game_control_angle__65537_30
      0000B5 F8               [12]  549 	mov	r0,a
      0000B6 76 00            [12]  550 	mov	@r0,#0x00
                                    551 ;	./src/angry_bird.c:67: OLED_SetCursor(strength_text_row_cursor, 0);
      0000B8 75*00 00         [24]  552 	mov	_OLED_SetCursor_PARM_2,#0x00
      0000BB 75 82 00         [24]  553 	mov	dpl,#0x00
      0000BE 12r00r00         [24]  554 	lcall	_OLED_SetCursor
                                    555 ;	./src/angry_bird.c:68: OLED_DisplayString("S ");
      0000C1 90r01r30         [24]  556 	mov	dptr,#___str_0
      0000C4 75 F0 80         [24]  557 	mov	b,#0x80
      0000C7 12r00r00         [24]  558 	lcall	_OLED_DisplayString
                                    559 ;	./src/angry_bird.c:69: OLED_SetCursor(strength_text_row_cursor, strength_text_col_cursor);
      0000CA 75*00 0A         [24]  560 	mov	_OLED_SetCursor_PARM_2,#0x0a
      0000CD 75 82 00         [24]  561 	mov	dpl,#0x00
      0000D0 12r00r00         [24]  562 	lcall	_OLED_SetCursor
                                    563 ;	./src/angry_bird.c:70: OLED_DisplayString(control_strength_);
      0000D3 90r00r10         [24]  564 	mov	dptr,#_angrybird_display_game_control_strength__65537_30
      0000D6 75 F0 40         [24]  565 	mov	b,#0x40
      0000D9 12r00r00         [24]  566 	lcall	_OLED_DisplayString
                                    567 ;	./src/angry_bird.c:72: OLED_SetCursor(strength_text_row_cursor, 20);
      0000DC 75*00 14         [24]  568 	mov	_OLED_SetCursor_PARM_2,#0x14
      0000DF 75 82 00         [24]  569 	mov	dpl,#0x00
      0000E2 12r00r00         [24]  570 	lcall	_OLED_SetCursor
                                    571 ;	./src/angry_bird.c:73: OLED_DisplayString("A ");
      0000E5 90r01r33         [24]  572 	mov	dptr,#___str_1
      0000E8 75 F0 80         [24]  573 	mov	b,#0x80
      0000EB 12r00r00         [24]  574 	lcall	_OLED_DisplayString
                                    575 ;	./src/angry_bird.c:74: OLED_SetCursor(angle_text_row_cursor, angle_text_col_cursor);
      0000EE 75*00 1E         [24]  576 	mov	_OLED_SetCursor_PARM_2,#0x1e
      0000F1 75 82 00         [24]  577 	mov	dpl,#0x00
      0000F4 12r00r00         [24]  578 	lcall	_OLED_SetCursor
                                    579 ;	./src/angry_bird.c:75: OLED_DisplayString(control_angle_);
      0000F7 90r00r12         [24]  580 	mov	dptr,#_angrybird_display_game_control_angle__65537_30
      0000FA 75 F0 40         [24]  581 	mov	b,#0x40
      0000FD 12r00r00         [24]  582 	lcall	_OLED_DisplayString
                                    583 ;	./src/angry_bird.c:78: for (int k = 0; k < bird_total_amount; k++)
      000100 E4               [12]  584 	clr	a
      000101 F5*19            [12]  585 	mov	_angrybird_display_game_k_131075_33,a
      000103 F5*1A            [12]  586 	mov	(_angrybird_display_game_k_131075_33 + 1),a
      000105                        587 00121$:
      000105 C3               [12]  588 	clr	c
      000106 E5*19            [12]  589 	mov	a,_angrybird_display_game_k_131075_33
      000108 94 09            [12]  590 	subb	a,#0x09
      00010A E5*1A            [12]  591 	mov	a,(_angrybird_display_game_k_131075_33 + 1)
      00010C 64 80            [12]  592 	xrl	a,#0x80
      00010E 94 80            [12]  593 	subb	a,#0x80
      000110 40 03            [24]  594 	jc	00305$
      000112 02r01r9D         [24]  595 	ljmp	00107$
      000115                        596 00305$:
                                    597 ;	./src/angry_bird.c:80: row_offset = 0;
      000115 E4               [12]  598 	clr	a
      000116 F5*04            [12]  599 	mov	_row_offset,a
      000118 F5*05            [12]  600 	mov	(_row_offset + 1),a
                                    601 ;	./src/angry_bird.c:81: col_offset = bird_remain_col_cursor + k * 8;
      00011A AC*19            [24]  602 	mov	r4,_angrybird_display_game_k_131075_33
      00011C E5*1A            [12]  603 	mov	a,(_angrybird_display_game_k_131075_33 + 1)
      00011E C4               [12]  604 	swap	a
      00011F 03               [12]  605 	rr	a
      000120 54 F8            [12]  606 	anl	a,#0xf8
      000122 CC               [12]  607 	xch	a,r4
      000123 C4               [12]  608 	swap	a
      000124 03               [12]  609 	rr	a
      000125 CC               [12]  610 	xch	a,r4
      000126 6C               [12]  611 	xrl	a,r4
      000127 CC               [12]  612 	xch	a,r4
      000128 54 F8            [12]  613 	anl	a,#0xf8
      00012A CC               [12]  614 	xch	a,r4
      00012B 6C               [12]  615 	xrl	a,r4
      00012C FD               [12]  616 	mov	r5,a
      00012D 74 32            [12]  617 	mov	a,#0x32
      00012F 2C               [12]  618 	add	a,r4
      000130 F5*06            [12]  619 	mov	_col_offset,a
      000132 E4               [12]  620 	clr	a
      000133 3D               [12]  621 	addc	a,r5
      000134 F5*07            [12]  622 	mov	(_col_offset + 1),a
                                    623 ;	./src/angry_bird.c:82: for (int j = 0; j < bird_cul_size; j++)
      000136 7C 00            [12]  624 	mov	r4,#0x00
      000138 7D 00            [12]  625 	mov	r5,#0x00
      00013A                        626 00118$:
      00013A C3               [12]  627 	clr	c
      00013B EC               [12]  628 	mov	a,r4
      00013C 94 08            [12]  629 	subb	a,#0x08
      00013E ED               [12]  630 	mov	a,r5
      00013F 64 80            [12]  631 	xrl	a,#0x80
      000141 94 80            [12]  632 	subb	a,#0x80
      000143 50 4D            [24]  633 	jnc	00122$
                                    634 ;	./src/angry_bird.c:84: for (int i = 0; i < bird_row_size; i++)
      000145 7B 00            [12]  635 	mov	r3,#0x00
      000147                        636 00115$:
      000147 BB 01 00         [24]  637 	cjne	r3,#0x01,00307$
      00014A                        638 00307$:
      00014A 50 3F            [24]  639 	jnc	00119$
                                    640 ;	./src/angry_bird.c:86: OLED_SetCursor(row_offset + i, col_offset + j);
      00014C AA*04            [24]  641 	mov	r2,_row_offset
      00014E E4               [12]  642 	clr	a
      00014F 2A               [12]  643 	add	a,r2
      000150 F5 82            [12]  644 	mov	dpl,a
      000152 AA*06            [24]  645 	mov	r2,_col_offset
      000154 8C 07            [24]  646 	mov	ar7,r4
      000156 EF               [12]  647 	mov	a,r7
      000157 2A               [12]  648 	add	a,r2
      000158 F5*00            [12]  649 	mov	_OLED_SetCursor_PARM_2,a
      00015A C0 07            [24]  650 	push	ar7
      00015C C0 05            [24]  651 	push	ar5
      00015E C0 04            [24]  652 	push	ar4
      000160 12r00r00         [24]  653 	lcall	_OLED_SetCursor
      000163 D0 04            [24]  654 	pop	ar4
      000165 D0 05            [24]  655 	pop	ar5
      000167 D0 07            [24]  656 	pop	ar7
                                    657 ;	./src/angry_bird.c:87: oledSendData(bird_logo[bird_cul_size * i + j]);
      000169 EF               [12]  658 	mov	a,r7
      00016A 33               [12]  659 	rlc	a
      00016B 95 E0            [12]  660 	subb	a,acc
      00016D FE               [12]  661 	mov	r6,a
      00016E EF               [12]  662 	mov	a,r7
      00016F 24r28            [12]  663 	add	a,#_bird_logo
      000171 F5 82            [12]  664 	mov	dpl,a
      000173 EE               [12]  665 	mov	a,r6
      000174 34s00            [12]  666 	addc	a,#(_bird_logo >> 8)
      000176 F5 83            [12]  667 	mov	dph,a
      000178 E4               [12]  668 	clr	a
      000179 93               [24]  669 	movc	a,@a+dptr
      00017A F5 82            [12]  670 	mov	dpl,a
      00017C C0 05            [24]  671 	push	ar5
      00017E C0 04            [24]  672 	push	ar4
      000180 12r00r00         [24]  673 	lcall	_oledSendData
      000183 D0 04            [24]  674 	pop	ar4
      000185 D0 05            [24]  675 	pop	ar5
                                    676 ;	./src/angry_bird.c:84: for (int i = 0; i < bird_row_size; i++)
      000187 7B 01            [12]  677 	mov	r3,#0x01
      000189 80 BC            [24]  678 	sjmp	00115$
      00018B                        679 00119$:
                                    680 ;	./src/angry_bird.c:82: for (int j = 0; j < bird_cul_size; j++)
      00018B 0C               [12]  681 	inc	r4
      00018C BC 00 AB         [24]  682 	cjne	r4,#0x00,00118$
      00018F 0D               [12]  683 	inc	r5
      000190 80 A8            [24]  684 	sjmp	00118$
      000192                        685 00122$:
                                    686 ;	./src/angry_bird.c:78: for (int k = 0; k < bird_total_amount; k++)
      000192 05*19            [12]  687 	inc	_angrybird_display_game_k_131075_33
      000194 E4               [12]  688 	clr	a
      000195 B5*19 02         [24]  689 	cjne	a,_angrybird_display_game_k_131075_33,00310$
      000198 05*1A            [12]  690 	inc	(_angrybird_display_game_k_131075_33 + 1)
      00019A                        691 00310$:
      00019A 02r01r05         [24]  692 	ljmp	00121$
      00019D                        693 00107$:
                                    694 ;	./src/angry_bird.c:93: row_offset = shoot_row_cursor;
      00019D 75*04 06         [24]  695 	mov	_row_offset,#0x06
                                    696 ;	./src/angry_bird.c:94: col_offset = shoot_col_cursor;
      0001A0 E4               [12]  697 	clr	a
      0001A1 F5*05            [12]  698 	mov	(_row_offset + 1),a
      0001A3 F5*06            [12]  699 	mov	_col_offset,a
      0001A5 F5*07            [12]  700 	mov	(_col_offset + 1),a
                                    701 ;	./src/angry_bird.c:95: for (int j = 0; j < shoot_cul_size; j++)
      0001A7 FE               [12]  702 	mov	r6,a
      0001A8 FF               [12]  703 	mov	r7,a
      0001A9                        704 00127$:
      0001A9 C3               [12]  705 	clr	c
      0001AA EE               [12]  706 	mov	a,r6
      0001AB 94 08            [12]  707 	subb	a,#0x08
      0001AD EF               [12]  708 	mov	a,r7
      0001AE 64 80            [12]  709 	xrl	a,#0x80
      0001B0 94 80            [12]  710 	subb	a,#0x80
      0001B2 50 54            [24]  711 	jnc	00109$
                                    712 ;	./src/angry_bird.c:97: for (int i = 0; i < shoot_row_size; i++)
      0001B4 7D 00            [12]  713 	mov	r5,#0x00
      0001B6                        714 00124$:
      0001B6 BD 02 00         [24]  715 	cjne	r5,#0x02,00312$
      0001B9                        716 00312$:
      0001B9 50 46            [24]  717 	jnc	00128$
                                    718 ;	./src/angry_bird.c:99: OLED_SetCursor(row_offset + i, col_offset + j);
      0001BB AC*04            [24]  719 	mov	r4,_row_offset
      0001BD 8D 03            [24]  720 	mov	ar3,r5
      0001BF EB               [12]  721 	mov	a,r3
      0001C0 2C               [12]  722 	add	a,r4
      0001C1 F5 82            [12]  723 	mov	dpl,a
      0001C3 AC*06            [24]  724 	mov	r4,_col_offset
      0001C5 8E 02            [24]  725 	mov	ar2,r6
      0001C7 EA               [12]  726 	mov	a,r2
      0001C8 2C               [12]  727 	add	a,r4
      0001C9 F5*00            [12]  728 	mov	_OLED_SetCursor_PARM_2,a
      0001CB C0 07            [24]  729 	push	ar7
      0001CD C0 06            [24]  730 	push	ar6
      0001CF C0 05            [24]  731 	push	ar5
      0001D1 C0 03            [24]  732 	push	ar3
      0001D3 C0 02            [24]  733 	push	ar2
      0001D5 12r00r00         [24]  734 	lcall	_OLED_SetCursor
      0001D8 D0 02            [24]  735 	pop	ar2
      0001DA D0 03            [24]  736 	pop	ar3
                                    737 ;	./src/angry_bird.c:100: oledSendData(shooter_logo[shoot_cul_size * i + j]);
      0001DC EB               [12]  738 	mov	a,r3
      0001DD C4               [12]  739 	swap	a
      0001DE 03               [12]  740 	rr	a
      0001DF 54 F8            [12]  741 	anl	a,#0xf8
      0001E1 2A               [12]  742 	add	a,r2
      0001E2 FA               [12]  743 	mov	r2,a
      0001E3 33               [12]  744 	rlc	a
      0001E4 95 E0            [12]  745 	subb	a,acc
      0001E6 FC               [12]  746 	mov	r4,a
      0001E7 EA               [12]  747 	mov	a,r2
      0001E8 24r00            [12]  748 	add	a,#_shooter_logo
      0001EA F5 82            [12]  749 	mov	dpl,a
      0001EC EC               [12]  750 	mov	a,r4
      0001ED 34s00            [12]  751 	addc	a,#(_shooter_logo >> 8)
      0001EF F5 83            [12]  752 	mov	dph,a
      0001F1 E4               [12]  753 	clr	a
      0001F2 93               [24]  754 	movc	a,@a+dptr
      0001F3 F5 82            [12]  755 	mov	dpl,a
      0001F5 12r00r00         [24]  756 	lcall	_oledSendData
      0001F8 D0 05            [24]  757 	pop	ar5
      0001FA D0 06            [24]  758 	pop	ar6
      0001FC D0 07            [24]  759 	pop	ar7
                                    760 ;	./src/angry_bird.c:97: for (int i = 0; i < shoot_row_size; i++)
      0001FE 0D               [12]  761 	inc	r5
      0001FF 80 B5            [24]  762 	sjmp	00124$
      000201                        763 00128$:
                                    764 ;	./src/angry_bird.c:95: for (int j = 0; j < shoot_cul_size; j++)
      000201 0E               [12]  765 	inc	r6
      000202 BE 00 A4         [24]  766 	cjne	r6,#0x00,00127$
      000205 0F               [12]  767 	inc	r7
      000206 80 A1            [24]  768 	sjmp	00127$
      000208                        769 00109$:
                                    770 ;	./src/angry_bird.c:105: row_offset = bird_init_row_cursor;
      000208 75*04 07         [24]  771 	mov	_row_offset,#0x07
      00020B 75*05 00         [24]  772 	mov	(_row_offset + 1),#0x00
                                    773 ;	./src/angry_bird.c:106: col_offset = bird_init_col_cursor;
      00020E 75*06 08         [24]  774 	mov	_col_offset,#0x08
      000211 75*07 00         [24]  775 	mov	(_col_offset + 1),#0x00
                                    776 ;	./src/angry_bird.c:107: for (int j = 0; j < bird_cul_size; j++)
      000214 7E 00            [12]  777 	mov	r6,#0x00
      000216 7F 00            [12]  778 	mov	r7,#0x00
      000218                        779 00133$:
      000218 C3               [12]  780 	clr	c
      000219 EE               [12]  781 	mov	a,r6
      00021A 94 08            [12]  782 	subb	a,#0x08
      00021C EF               [12]  783 	mov	a,r7
      00021D 64 80            [12]  784 	xrl	a,#0x80
      00021F 94 80            [12]  785 	subb	a,#0x80
      000221 50 45            [24]  786 	jnc	00111$
                                    787 ;	./src/angry_bird.c:109: for (int i = 0; i < bird_row_size; i++)
      000223 7D 00            [12]  788 	mov	r5,#0x00
      000225                        789 00130$:
      000225 BD 01 00         [24]  790 	cjne	r5,#0x01,00316$
      000228                        791 00316$:
      000228 50 37            [24]  792 	jnc	00134$
                                    793 ;	./src/angry_bird.c:111: OLED_SetCursor(row_offset + i, col_offset + j);
      00022A AC*04            [24]  794 	mov	r4,_row_offset
      00022C E4               [12]  795 	clr	a
      00022D 2C               [12]  796 	add	a,r4
      00022E F5 82            [12]  797 	mov	dpl,a
      000230 AC*06            [24]  798 	mov	r4,_col_offset
      000232 8E 03            [24]  799 	mov	ar3,r6
      000234 EB               [12]  800 	mov	a,r3
      000235 2C               [12]  801 	add	a,r4
      000236 F5*00            [12]  802 	mov	_OLED_SetCursor_PARM_2,a
      000238 C0 07            [24]  803 	push	ar7
      00023A C0 06            [24]  804 	push	ar6
      00023C C0 03            [24]  805 	push	ar3
      00023E 12r00r00         [24]  806 	lcall	_OLED_SetCursor
      000241 D0 03            [24]  807 	pop	ar3
                                    808 ;	./src/angry_bird.c:112: oledSendData(bird_logo[bird_cul_size * i + j]);
      000243 EB               [12]  809 	mov	a,r3
      000244 33               [12]  810 	rlc	a
      000245 95 E0            [12]  811 	subb	a,acc
      000247 FC               [12]  812 	mov	r4,a
      000248 EB               [12]  813 	mov	a,r3
      000249 24r28            [12]  814 	add	a,#_bird_logo
      00024B F5 82            [12]  815 	mov	dpl,a
      00024D EC               [12]  816 	mov	a,r4
      00024E 34s00            [12]  817 	addc	a,#(_bird_logo >> 8)
      000250 F5 83            [12]  818 	mov	dph,a
      000252 E4               [12]  819 	clr	a
      000253 93               [24]  820 	movc	a,@a+dptr
      000254 F5 82            [12]  821 	mov	dpl,a
      000256 12r00r00         [24]  822 	lcall	_oledSendData
      000259 D0 06            [24]  823 	pop	ar6
      00025B D0 07            [24]  824 	pop	ar7
                                    825 ;	./src/angry_bird.c:109: for (int i = 0; i < bird_row_size; i++)
      00025D 7D 01            [12]  826 	mov	r5,#0x01
      00025F 80 C4            [24]  827 	sjmp	00130$
      000261                        828 00134$:
                                    829 ;	./src/angry_bird.c:107: for (int j = 0; j < bird_cul_size; j++)
      000261 0E               [12]  830 	inc	r6
      000262 BE 00 B3         [24]  831 	cjne	r6,#0x00,00133$
      000265 0F               [12]  832 	inc	r7
      000266 80 B0            [24]  833 	sjmp	00133$
      000268                        834 00111$:
                                    835 ;	./src/angry_bird.c:134: row_offset = pig1_row_cursor;
      000268 75*04 03         [24]  836 	mov	_row_offset,#0x03
      00026B 75*05 00         [24]  837 	mov	(_row_offset + 1),#0x00
                                    838 ;	./src/angry_bird.c:135: col_offset = pig1_col_cursor;
      00026E 75*06 50         [24]  839 	mov	_col_offset,#0x50
      000271 75*07 00         [24]  840 	mov	(_col_offset + 1),#0x00
                                    841 ;	./src/angry_bird.c:136: for (int j = 0; j < pig_cul_size; j++)
      000274 7E 00            [12]  842 	mov	r6,#0x00
      000276 7F 00            [12]  843 	mov	r7,#0x00
      000278                        844 00139$:
      000278 C3               [12]  845 	clr	c
      000279 EE               [12]  846 	mov	a,r6
      00027A 94 0C            [12]  847 	subb	a,#0x0c
      00027C EF               [12]  848 	mov	a,r7
      00027D 64 80            [12]  849 	xrl	a,#0x80
      00027F 94 80            [12]  850 	subb	a,#0x80
      000281 50 54            [24]  851 	jnc	00141$
                                    852 ;	./src/angry_bird.c:138: for (int i = 0; i < pig_row_size; i++)
      000283 7D 00            [12]  853 	mov	r5,#0x00
      000285                        854 00136$:
      000285 BD 02 00         [24]  855 	cjne	r5,#0x02,00320$
      000288                        856 00320$:
      000288 50 46            [24]  857 	jnc	00140$
                                    858 ;	./src/angry_bird.c:140: OLED_SetCursor(row_offset + i, col_offset + j);
      00028A AC*04            [24]  859 	mov	r4,_row_offset
      00028C 8D 03            [24]  860 	mov	ar3,r5
      00028E EB               [12]  861 	mov	a,r3
      00028F 2C               [12]  862 	add	a,r4
      000290 F5 82            [12]  863 	mov	dpl,a
      000292 AC*06            [24]  864 	mov	r4,_col_offset
      000294 8E 02            [24]  865 	mov	ar2,r6
      000296 EA               [12]  866 	mov	a,r2
      000297 2C               [12]  867 	add	a,r4
      000298 F5*00            [12]  868 	mov	_OLED_SetCursor_PARM_2,a
      00029A C0 07            [24]  869 	push	ar7
      00029C C0 06            [24]  870 	push	ar6
      00029E C0 05            [24]  871 	push	ar5
      0002A0 C0 03            [24]  872 	push	ar3
      0002A2 C0 02            [24]  873 	push	ar2
      0002A4 12r00r00         [24]  874 	lcall	_OLED_SetCursor
      0002A7 D0 02            [24]  875 	pop	ar2
      0002A9 D0 03            [24]  876 	pop	ar3
                                    877 ;	./src/angry_bird.c:141: oledSendData(pig_logo[pig_cul_size * i + j]);
      0002AB EB               [12]  878 	mov	a,r3
      0002AC 75 F0 0C         [24]  879 	mov	b,#0x0c
      0002AF A4               [48]  880 	mul	ab
      0002B0 2A               [12]  881 	add	a,r2
      0002B1 FA               [12]  882 	mov	r2,a
      0002B2 33               [12]  883 	rlc	a
      0002B3 95 E0            [12]  884 	subb	a,acc
      0002B5 FC               [12]  885 	mov	r4,a
      0002B6 EA               [12]  886 	mov	a,r2
      0002B7 24r10            [12]  887 	add	a,#_pig_logo
      0002B9 F5 82            [12]  888 	mov	dpl,a
      0002BB EC               [12]  889 	mov	a,r4
      0002BC 34s00            [12]  890 	addc	a,#(_pig_logo >> 8)
      0002BE F5 83            [12]  891 	mov	dph,a
      0002C0 E4               [12]  892 	clr	a
      0002C1 93               [24]  893 	movc	a,@a+dptr
      0002C2 F5 82            [12]  894 	mov	dpl,a
      0002C4 12r00r00         [24]  895 	lcall	_oledSendData
      0002C7 D0 05            [24]  896 	pop	ar5
      0002C9 D0 06            [24]  897 	pop	ar6
      0002CB D0 07            [24]  898 	pop	ar7
                                    899 ;	./src/angry_bird.c:138: for (int i = 0; i < pig_row_size; i++)
      0002CD 0D               [12]  900 	inc	r5
      0002CE 80 B5            [24]  901 	sjmp	00136$
      0002D0                        902 00140$:
                                    903 ;	./src/angry_bird.c:136: for (int j = 0; j < pig_cul_size; j++)
      0002D0 0E               [12]  904 	inc	r6
      0002D1 BE 00 A4         [24]  905 	cjne	r6,#0x00,00139$
      0002D4 0F               [12]  906 	inc	r7
      0002D5 80 A1            [24]  907 	sjmp	00139$
      0002D7                        908 00141$:
                                    909 ;	./src/angry_bird.c:144: }
      0002D7 22               [24]  910 	ret
                                    911 ;------------------------------------------------------------
                                    912 ;Allocation info for local variables in function 'angrybird_state_machine'
                                    913 ;------------------------------------------------------------
                                    914 ;	./src/angry_bird.c:165: void angrybird_state_machine(void)
                                    915 ;	-----------------------------------------
                                    916 ;	 function angrybird_state_machine
                                    917 ;	-----------------------------------------
      0002D8                        918 _angrybird_state_machine:
                                    919 ;	./src/angry_bird.c:167: switch (cur_state)
      0002D8 74 03            [12]  920 	mov	a,#0x03
      0002DA B5*1D 06         [24]  921 	cjne	a,_cur_state,00155$
      0002DD E4               [12]  922 	clr	a
      0002DE B5*1E 02         [24]  923 	cjne	a,(_cur_state + 1),00155$
      0002E1 80 0D            [24]  924 	sjmp	00102$
      0002E3                        925 00155$:
      0002E3 74 04            [12]  926 	mov	a,#0x04
      0002E5 B5*1D 06         [24]  927 	cjne	a,_cur_state,00156$
      0002E8 E4               [12]  928 	clr	a
      0002E9 B5*1E 02         [24]  929 	cjne	a,(_cur_state + 1),00156$
      0002EC 80 02            [24]  930 	sjmp	00157$
      0002EE                        931 00156$:
      0002EE 80 07            [24]  932 	sjmp	00103$
      0002F0                        933 00157$:
                                    934 ;	./src/angry_bird.c:170: case STATE_PLAY_HARD:
      0002F0                        935 00102$:
                                    936 ;	./src/angry_bird.c:171: P1_0 = 0;
                                    937 ;	assignBit
      0002F0 C2 90            [12]  938 	clr	_P1_0
                                    939 ;	./src/angry_bird.c:172: angrybird_game_state();
      0002F2 12r03r64         [24]  940 	lcall	_angrybird_game_state
                                    941 ;	./src/angry_bird.c:173: break;
                                    942 ;	./src/angry_bird.c:175: default:
      0002F5 80 2D            [24]  943 	sjmp	00109$
      0002F7                        944 00103$:
                                    945 ;	./src/angry_bird.c:176: if (led_cur_state == 0)
      0002F7 E5*1B            [12]  946 	mov	a,_led_cur_state
      0002F9 45*1C            [12]  947 	orl	a,(_led_cur_state + 1)
                                    948 ;	./src/angry_bird.c:177: led_cur_state = 1;
      0002FB 70 07            [24]  949 	jnz	00107$
      0002FD 75*1B 01         [24]  950 	mov	_led_cur_state,#0x01
      000300 F5*1C            [12]  951 	mov	(_led_cur_state + 1),a
      000302 80 12            [24]  952 	sjmp	00108$
      000304                        953 00107$:
                                    954 ;	./src/angry_bird.c:178: else if (led_cur_state == 1)
      000304 74 01            [12]  955 	mov	a,#0x01
      000306 B5*1B 06         [24]  956 	cjne	a,_led_cur_state,00159$
      000309 14               [12]  957 	dec	a
      00030A B5*1C 02         [24]  958 	cjne	a,(_led_cur_state + 1),00159$
      00030D 80 02            [24]  959 	sjmp	00160$
      00030F                        960 00159$:
      00030F 80 05            [24]  961 	sjmp	00108$
      000311                        962 00160$:
                                    963 ;	./src/angry_bird.c:179: led_cur_state = 0;
      000311 E4               [12]  964 	clr	a
      000312 F5*1B            [12]  965 	mov	_led_cur_state,a
      000314 F5*1C            [12]  966 	mov	(_led_cur_state + 1),a
      000316                        967 00108$:
                                    968 ;	./src/angry_bird.c:180: P1_0 = led_cur_state;
                                    969 ;	assignBit
      000316 E5*1B            [12]  970 	mov	a,_led_cur_state
      000318 45*1C            [12]  971 	orl	a,(_led_cur_state + 1)
      00031A 24 FF            [12]  972 	add	a,#0xff
      00031C 92 90            [24]  973 	mov	_P1_0,c
                                    974 ;	./src/angry_bird.c:182: delay_ms(500);
      00031E 90 01 F4         [24]  975 	mov	dptr,#0x01f4
      000321 12r00r00         [24]  976 	lcall	_delay_ms
                                    977 ;	./src/angry_bird.c:184: }
      000324                        978 00109$:
                                    979 ;	./src/angry_bird.c:187: if (received_flag == 1)
      000324 74 01            [12]  980 	mov	a,#0x01
      000326 B5*03 2C         [24]  981 	cjne	a,_received_flag,00114$
                                    982 ;	./src/angry_bird.c:189: cur_state = received_data;
      000329 85*02*1D         [24]  983 	mov	_cur_state,_received_data
      00032C 75*1E 00         [24]  984 	mov	(_cur_state + 1),#0x00
                                    985 ;	./src/angry_bird.c:190: received_flag = 0;
      00032F 75*03 00         [24]  986 	mov	_received_flag,#0x00
                                    987 ;	./src/angry_bird.c:191: P1_0 = 0;
                                    988 ;	assignBit
      000332 C2 90            [12]  989 	clr	_P1_0
                                    990 ;	./src/angry_bird.c:193: I2C_Start();
      000334 12r00r00         [24]  991 	lcall	_I2C_Start
                                    992 ;	./src/angry_bird.c:194: OLED_Init();
      000337 12r00r00         [24]  993 	lcall	_OLED_Init
                                    994 ;	./src/angry_bird.c:197: if (cur_state == STATE_PLAY_EASY || cur_state == STATE_PLAY_HARD)
      00033A 74 03            [12]  995 	mov	a,#0x03
      00033C B5*1D 06         [24]  996 	cjne	a,_cur_state,00163$
      00033F E4               [12]  997 	clr	a
      000340 B5*1E 02         [24]  998 	cjne	a,(_cur_state + 1),00163$
      000343 80 0D            [24]  999 	sjmp	00110$
      000345                       1000 00163$:
      000345 74 04            [12] 1001 	mov	a,#0x04
      000347 B5*1D 06         [24] 1002 	cjne	a,_cur_state,00164$
      00034A E4               [12] 1003 	clr	a
      00034B B5*1E 02         [24] 1004 	cjne	a,(_cur_state + 1),00164$
      00034E 80 02            [24] 1005 	sjmp	00165$
      000350                       1006 00164$:
      000350 80 03            [24] 1007 	sjmp	00114$
      000352                       1008 00165$:
      000352                       1009 00110$:
                                   1010 ;	./src/angry_bird.c:198: angrybird_display_game();
      000352 12r00r00         [24] 1011 	lcall	_angrybird_display_game
      000355                       1012 00114$:
                                   1013 ;	./src/angry_bird.c:202: if (send_flag == 1)
      000355 74 01            [12] 1014 	mov	a,#0x01
      000357 B5*01 09         [24] 1015 	cjne	a,_send_flag,00117$
                                   1016 ;	./src/angry_bird.c:204: I2C_Stop();
      00035A 12r00r00         [24] 1017 	lcall	_I2C_Stop
                                   1018 ;	./src/angry_bird.c:205: SBUF = send_data; // send data to SBUF
      00035D 85*00 99         [24] 1019 	mov	_SBUF,_send_data
                                   1020 ;	./src/angry_bird.c:206: send_flag = 0;
      000360 75*01 00         [24] 1021 	mov	_send_flag,#0x00
      000363                       1022 00117$:
                                   1023 ;	./src/angry_bird.c:212: }
      000363 22               [24] 1024 	ret
                                   1025 ;------------------------------------------------------------
                                   1026 ;Allocation info for local variables in function 'angrybird_game_state'
                                   1027 ;------------------------------------------------------------
                                   1028 ;which                     Allocated to registers r7 
                                   1029 ;control_angle_            Allocated with name '_angrybird_game_state_control_angle__196609_62'
                                   1030 ;i                         Allocated to registers r4 r5 
                                   1031 ;angle_                    Allocated with name '_angrybird_game_state_angle__196610_63'
                                   1032 ;which                     Allocated to registers r7 
                                   1033 ;control_strength_         Allocated with name '_angrybird_game_state_control_strength__196609_68'
                                   1034 ;j                         Allocated to registers r6 r7 
                                   1035 ;i                         Allocated to registers r5 
                                   1036 ;delta_y                   Allocated with name '_angrybird_game_state_delta_y_196609_75'
                                   1037 ;delta_x                   Allocated with name '_angrybird_game_state_delta_x_196609_75'
                                   1038 ;peak_x                    Allocated with name '_angrybird_game_state_peak_x_196609_75'
                                   1039 ;peak_y                    Allocated with name '_angrybird_game_state_peak_y_196609_75'
                                   1040 ;a                         Allocated with name '_angrybird_game_state_a_196609_75'
                                   1041 ;j                         Allocated to registers r2 r3 
                                   1042 ;i                         Allocated to registers r7 
                                   1043 ;i                         Allocated with name '_angrybird_game_state_i_262145_80'
                                   1044 ;output_row                Allocated with name '_angrybird_game_state_output_row_327681_81'
                                   1045 ;j                         Allocated to registers r2 r3 
                                   1046 ;i                         Allocated to registers r5 
                                   1047 ;j                         Allocated to registers r6 r7 
                                   1048 ;i                         Allocated to registers r5 
                                   1049 ;j                         Allocated to registers r6 r7 
                                   1050 ;i                         Allocated to registers r5 
                                   1051 ;j                         Allocated to registers r6 r7 
                                   1052 ;i                         Allocated to registers r5 
                                   1053 ;j                         Allocated to registers r6 r7 
                                   1054 ;i                         Allocated to registers r4 r5 
                                   1055 ;j                         Allocated to registers r6 r7 
                                   1056 ;i                         Allocated to registers r4 r5 
                                   1057 ;sloc1                     Allocated with name '_angrybird_game_state_sloc1_1_0'
                                   1058 ;------------------------------------------------------------
                                   1059 ;	./src/angry_bird.c:222: void angrybird_game_state(void)
                                   1060 ;	-----------------------------------------
                                   1061 ;	 function angrybird_game_state
                                   1062 ;	-----------------------------------------
      000364                       1063 _angrybird_game_state:
                                   1064 ;	./src/angry_bird.c:225: if (((but_up == 0) && (prebut_up == 1)) || ((but_down == 0) && (prebut_down == 1)))
      000364 20 A0 0B         [24] 1065 	jb	_P2_0,00119$
      000367 74 01            [12] 1066 	mov	a,#0x01
      000369 B5*1F 06         [24] 1067 	cjne	a,_prebut_up,00691$
      00036C 14               [12] 1068 	dec	a
      00036D B5*20 02         [24] 1069 	cjne	a,(_prebut_up + 1),00691$
      000370 80 14            [24] 1070 	sjmp	00115$
      000372                       1071 00691$:
      000372                       1072 00119$:
      000372 30 A1 03         [24] 1073 	jnb	_P2_1,00692$
      000375 02r04r8B         [24] 1074 	ljmp	00116$
      000378                       1075 00692$:
      000378 74 01            [12] 1076 	mov	a,#0x01
      00037A B5*21 06         [24] 1077 	cjne	a,_prebut_down,00693$
      00037D 14               [12] 1078 	dec	a
      00037E B5*22 02         [24] 1079 	cjne	a,(_prebut_down + 1),00693$
      000381 80 03            [24] 1080 	sjmp	00694$
      000383                       1081 00693$:
      000383 02r04r8B         [24] 1082 	ljmp	00116$
      000386                       1083 00694$:
      000386                       1084 00115$:
                                   1085 ;	./src/angry_bird.c:228: int which = (but_up == 0) ? 1 : 0;
      000386 20 A0 04         [24] 1086 	jb	_P2_0,00226$
      000389 7F 01            [12] 1087 	mov	r7,#0x01
      00038B 80 02            [24] 1088 	sjmp	00227$
      00038D                       1089 00226$:
      00038D 7F 00            [12] 1090 	mov	r7,#0x00
      00038F                       1091 00227$:
                                   1092 ;	./src/angry_bird.c:229: if (but_up == 0 || but_down == 0)
      00038F 30 A0 06         [24] 1093 	jnb	_P2_0,00112$
      000392 30 A1 03         [24] 1094 	jnb	_P2_1,00697$
      000395 02r04r8B         [24] 1095 	ljmp	00116$
      000398                       1096 00697$:
      000398                       1097 00112$:
                                   1098 ;	./src/angry_bird.c:231: if (which == 1)
      000398 BF 01 24         [24] 1099 	cjne	r7,#0x01,00106$
                                   1100 ;	./src/angry_bird.c:233: control_angle += 10;
      00039B 74 0A            [12] 1101 	mov	a,#0x0a
      00039D 25*0C            [12] 1102 	add	a,_control_angle
      00039F F5*0C            [12] 1103 	mov	_control_angle,a
      0003A1 E4               [12] 1104 	clr	a
      0003A2 35*0D            [12] 1105 	addc	a,(_control_angle + 1)
      0003A4 F5*0D            [12] 1106 	mov	(_control_angle + 1),a
                                   1107 ;	./src/angry_bird.c:234: if (control_angle > 90)
      0003A6 C3               [12] 1108 	clr	c
      0003A7 74 5A            [12] 1109 	mov	a,#0x5a
      0003A9 95*0C            [12] 1110 	subb	a,_control_angle
      0003AB 74 80            [12] 1111 	mov	a,#(0x00 ^ 0x80)
      0003AD 85*0D F0         [24] 1112 	mov	b,(_control_angle + 1)
      0003B0 63 F0 80         [24] 1113 	xrl	b,#0x80
      0003B3 95 F0            [12] 1114 	subb	a,b
      0003B5 50 1C            [24] 1115 	jnc	00107$
                                   1116 ;	./src/angry_bird.c:235: control_angle = 90;
      0003B7 75*0C 5A         [24] 1117 	mov	_control_angle,#0x5a
      0003BA 75*0D 00         [24] 1118 	mov	(_control_angle + 1),#0x00
      0003BD 80 14            [24] 1119 	sjmp	00107$
      0003BF                       1120 00106$:
                                   1121 ;	./src/angry_bird.c:239: control_angle -= 10;
      0003BF E5*0C            [12] 1122 	mov	a,_control_angle
      0003C1 24 F6            [12] 1123 	add	a,#0xf6
      0003C3 F5*0C            [12] 1124 	mov	_control_angle,a
      0003C5 E5*0D            [12] 1125 	mov	a,(_control_angle + 1)
      0003C7 34 FF            [12] 1126 	addc	a,#0xff
                                   1127 ;	./src/angry_bird.c:240: if (control_angle < 0)
      0003C9 F5*0D            [12] 1128 	mov	(_control_angle + 1),a
      0003CB 30 E7 05         [24] 1129 	jnb	acc.7,00107$
                                   1130 ;	./src/angry_bird.c:241: control_angle = 0;
      0003CE E4               [12] 1131 	clr	a
      0003CF F5*0C            [12] 1132 	mov	_control_angle,a
      0003D1 F5*0D            [12] 1133 	mov	(_control_angle + 1),a
      0003D3                       1134 00107$:
                                   1135 ;	./src/angry_bird.c:246: int i = 0;
                                   1136 ;	./src/angry_bird.c:247: if (control_angle < 0)
      0003D3 E4               [12] 1137 	clr	a
      0003D4 FE               [12] 1138 	mov	r6,a
      0003D5 FF               [12] 1139 	mov	r7,a
      0003D6 E5*0D            [12] 1140 	mov	a,(_control_angle + 1)
      0003D8 30 E7 07         [24] 1141 	jnb	acc.7,00109$
                                   1142 ;	./src/angry_bird.c:248: control_angle_[i++] = '-';
      0003DB 7E 01            [12] 1143 	mov	r6,#0x01
      0003DD 7F 00            [12] 1144 	mov	r7,#0x00
      0003DF 75*29 2D         [24] 1145 	mov	_angrybird_game_state_control_angle__196609_62,#0x2d
      0003E2                       1146 00109$:
                                   1147 ;	./src/angry_bird.c:249: int angle_ = (control_angle >= 0) ? control_angle : -1 * control_angle;
      0003E2 E5*0D            [12] 1148 	mov	a,(_control_angle + 1)
      0003E4 33               [12] 1149 	rlc	a
      0003E5 92*01            [24] 1150 	mov	_angrybird_game_state_sloc0_1_0,c
      0003E7 40 06            [24] 1151 	jc	00228$
      0003E9 AC*0C            [24] 1152 	mov	r4,_control_angle
      0003EB AD*0D            [24] 1153 	mov	r5,(_control_angle + 1)
      0003ED 80 09            [24] 1154 	sjmp	00229$
      0003EF                       1155 00228$:
      0003EF C3               [12] 1156 	clr	c
      0003F0 E4               [12] 1157 	clr	a
      0003F1 95*0C            [12] 1158 	subb	a,_control_angle
      0003F3 FC               [12] 1159 	mov	r4,a
      0003F4 E4               [12] 1160 	clr	a
      0003F5 95*0D            [12] 1161 	subb	a,(_control_angle + 1)
      0003F7 FD               [12] 1162 	mov	r5,a
      0003F8                       1163 00229$:
      0003F8 8C*2E            [24] 1164 	mov	_angrybird_game_state_angle__196610_63,r4
      0003FA 8D*2F            [24] 1165 	mov	(_angrybird_game_state_angle__196610_63 + 1),r5
                                   1166 ;	./src/angry_bird.c:250: if (angle_ % 100 / 10 != 0)
      0003FC 75*00 64         [24] 1167 	mov	__modsint_PARM_2,#0x64
      0003FF 75*01 00         [24] 1168 	mov	(__modsint_PARM_2 + 1),#0x00
      000402 85*2E 82         [24] 1169 	mov	dpl,_angrybird_game_state_angle__196610_63
      000405 85*2F 83         [24] 1170 	mov	dph,(_angrybird_game_state_angle__196610_63 + 1)
      000408 C0 07            [24] 1171 	push	ar7
      00040A C0 06            [24] 1172 	push	ar6
      00040C 12r00r00         [24] 1173 	lcall	__modsint
      00040F 75*00 0A         [24] 1174 	mov	__divsint_PARM_2,#0x0a
      000412 75*01 00         [24] 1175 	mov	(__divsint_PARM_2 + 1),#0x00
      000415 12r00r00         [24] 1176 	lcall	__divsint
      000418 AA 82            [24] 1177 	mov	r2,dpl
      00041A AB 83            [24] 1178 	mov	r3,dph
      00041C D0 06            [24] 1179 	pop	ar6
      00041E D0 07            [24] 1180 	pop	ar7
      000420 EA               [12] 1181 	mov	a,r2
      000421 4B               [12] 1182 	orl	a,r3
      000422 60 11            [24] 1183 	jz	00111$
                                   1184 ;	./src/angry_bird.c:251: control_angle_[i++] = '0' + angle_ % 100 / 10;
      000424 8E 04            [24] 1185 	mov	ar4,r6
      000426 8F 05            [24] 1186 	mov	ar5,r7
      000428 0E               [12] 1187 	inc	r6
      000429 BE 00 01         [24] 1188 	cjne	r6,#0x00,00705$
      00042C 0F               [12] 1189 	inc	r7
      00042D                       1190 00705$:
      00042D EC               [12] 1191 	mov	a,r4
      00042E 24r29            [12] 1192 	add	a,#_angrybird_game_state_control_angle__196609_62
      000430 F9               [12] 1193 	mov	r1,a
      000431 74 30            [12] 1194 	mov	a,#0x30
      000433 2A               [12] 1195 	add	a,r2
      000434 F7               [12] 1196 	mov	@r1,a
      000435                       1197 00111$:
                                   1198 ;	./src/angry_bird.c:252: control_angle_[i++] = '0' + angle_ % 10;
      000435 74 01            [12] 1199 	mov	a,#0x01
      000437 2E               [12] 1200 	add	a,r6
      000438 FC               [12] 1201 	mov	r4,a
      000439 E4               [12] 1202 	clr	a
      00043A 3F               [12] 1203 	addc	a,r7
      00043B FD               [12] 1204 	mov	r5,a
      00043C EE               [12] 1205 	mov	a,r6
      00043D 24r29            [12] 1206 	add	a,#_angrybird_game_state_control_angle__196609_62
      00043F F9               [12] 1207 	mov	r1,a
      000440 75*00 0A         [24] 1208 	mov	__modsint_PARM_2,#0x0a
      000443 75*01 00         [24] 1209 	mov	(__modsint_PARM_2 + 1),#0x00
      000446 85*2E 82         [24] 1210 	mov	dpl,_angrybird_game_state_angle__196610_63
      000449 85*2F 83         [24] 1211 	mov	dph,(_angrybird_game_state_angle__196610_63 + 1)
      00044C C0 05            [24] 1212 	push	ar5
      00044E C0 04            [24] 1213 	push	ar4
      000450 C0 01            [24] 1214 	push	ar1
      000452 12r00r00         [24] 1215 	lcall	__modsint
      000455 AE 82            [24] 1216 	mov	r6,dpl
      000457 D0 01            [24] 1217 	pop	ar1
      000459 D0 04            [24] 1218 	pop	ar4
      00045B D0 05            [24] 1219 	pop	ar5
      00045D 74 30            [12] 1220 	mov	a,#0x30
      00045F 2E               [12] 1221 	add	a,r6
      000460 F7               [12] 1222 	mov	@r1,a
                                   1223 ;	./src/angry_bird.c:253: control_angle_[i++] = '\0';
      000461 EC               [12] 1224 	mov	a,r4
      000462 24r29            [12] 1225 	add	a,#_angrybird_game_state_control_angle__196609_62
      000464 F8               [12] 1226 	mov	r0,a
      000465 76 00            [12] 1227 	mov	@r0,#0x00
                                   1228 ;	./src/angry_bird.c:255: OLED_SetCursor(angle_text_row_cursor, angle_text_col_cursor);
      000467 75*00 1E         [24] 1229 	mov	_OLED_SetCursor_PARM_2,#0x1e
      00046A 75 82 00         [24] 1230 	mov	dpl,#0x00
      00046D 12r00r00         [24] 1231 	lcall	_OLED_SetCursor
                                   1232 ;	./src/angry_bird.c:256: OLED_DisplayString("   ");
      000470 90r01r36         [24] 1233 	mov	dptr,#___str_2
      000473 75 F0 80         [24] 1234 	mov	b,#0x80
      000476 12r00r00         [24] 1235 	lcall	_OLED_DisplayString
                                   1236 ;	./src/angry_bird.c:257: OLED_SetCursor(angle_text_row_cursor, angle_text_col_cursor);
      000479 75*00 1E         [24] 1237 	mov	_OLED_SetCursor_PARM_2,#0x1e
      00047C 75 82 00         [24] 1238 	mov	dpl,#0x00
      00047F 12r00r00         [24] 1239 	lcall	_OLED_SetCursor
                                   1240 ;	./src/angry_bird.c:258: OLED_DisplayString(control_angle_);
      000482 90r00r29         [24] 1241 	mov	dptr,#_angrybird_game_state_control_angle__196609_62
      000485 75 F0 40         [24] 1242 	mov	b,#0x40
      000488 12r00r00         [24] 1243 	lcall	_OLED_DisplayString
      00048B                       1244 00116$:
                                   1245 ;	./src/angry_bird.c:263: if (((but_left == 0) && (prebut_left == 1)) || ((but_right == 0) && (prebut_right == 1)))
      00048B 20 B2 0B         [24] 1246 	jb	_INT0,00134$
      00048E 74 01            [12] 1247 	mov	a,#0x01
      000490 B5*23 06         [24] 1248 	cjne	a,_prebut_left,00707$
      000493 14               [12] 1249 	dec	a
      000494 B5*24 02         [24] 1250 	cjne	a,(_prebut_left + 1),00707$
      000497 80 14            [24] 1251 	sjmp	00130$
      000499                       1252 00707$:
      000499                       1253 00134$:
      000499 30 B3 03         [24] 1254 	jnb	_INT1,00708$
      00049C 02r05r2A         [24] 1255 	ljmp	00131$
      00049F                       1256 00708$:
      00049F 74 01            [12] 1257 	mov	a,#0x01
      0004A1 B5*25 06         [24] 1258 	cjne	a,_prebut_right,00709$
      0004A4 14               [12] 1259 	dec	a
      0004A5 B5*26 02         [24] 1260 	cjne	a,(_prebut_right + 1),00709$
      0004A8 80 03            [24] 1261 	sjmp	00710$
      0004AA                       1262 00709$:
      0004AA 02r05r2A         [24] 1263 	ljmp	00131$
      0004AD                       1264 00710$:
      0004AD                       1265 00130$:
                                   1266 ;	./src/angry_bird.c:266: int which = (but_left == 0) ? 1 : 0;
      0004AD 20 B2 04         [24] 1267 	jb	_INT0,00230$
      0004B0 7F 01            [12] 1268 	mov	r7,#0x01
      0004B2 80 02            [24] 1269 	sjmp	00231$
      0004B4                       1270 00230$:
      0004B4 7F 00            [12] 1271 	mov	r7,#0x00
      0004B6                       1272 00231$:
                                   1273 ;	./src/angry_bird.c:267: if (but_left == 0 || but_right == 0)
      0004B6 30 B2 03         [24] 1274 	jnb	_INT0,00127$
      0004B9 20 B3 6E         [24] 1275 	jb	_INT1,00131$
      0004BC                       1276 00127$:
                                   1277 ;	./src/angry_bird.c:269: if (which == 1)
      0004BC BF 01 1E         [24] 1278 	cjne	r7,#0x01,00125$
                                   1279 ;	./src/angry_bird.c:271: control_strength--;
      0004BF 15*0E            [12] 1280 	dec	_control_strength
      0004C1 74 FF            [12] 1281 	mov	a,#0xff
      0004C3 B5*0E 02         [24] 1282 	cjne	a,_control_strength,00716$
      0004C6 15*0F            [12] 1283 	dec	(_control_strength + 1)
      0004C8                       1284 00716$:
                                   1285 ;	./src/angry_bird.c:272: if (control_strength < 1)
      0004C8 C3               [12] 1286 	clr	c
      0004C9 E5*0E            [12] 1287 	mov	a,_control_strength
      0004CB 94 01            [12] 1288 	subb	a,#0x01
      0004CD E5*0F            [12] 1289 	mov	a,(_control_strength + 1)
      0004CF 64 80            [12] 1290 	xrl	a,#0x80
      0004D1 94 80            [12] 1291 	subb	a,#0x80
      0004D3 50 27            [24] 1292 	jnc	00126$
                                   1293 ;	./src/angry_bird.c:273: control_strength = 1;
      0004D5 75*0E 01         [24] 1294 	mov	_control_strength,#0x01
      0004D8 75*0F 00         [24] 1295 	mov	(_control_strength + 1),#0x00
      0004DB 80 1F            [24] 1296 	sjmp	00126$
      0004DD                       1297 00125$:
                                   1298 ;	./src/angry_bird.c:277: control_strength++;
      0004DD 05*0E            [12] 1299 	inc	_control_strength
      0004DF E4               [12] 1300 	clr	a
      0004E0 B5*0E 02         [24] 1301 	cjne	a,_control_strength,00718$
      0004E3 05*0F            [12] 1302 	inc	(_control_strength + 1)
      0004E5                       1303 00718$:
                                   1304 ;	./src/angry_bird.c:278: if (control_strength > 3)
      0004E5 C3               [12] 1305 	clr	c
      0004E6 74 03            [12] 1306 	mov	a,#0x03
      0004E8 95*0E            [12] 1307 	subb	a,_control_strength
      0004EA 74 80            [12] 1308 	mov	a,#(0x00 ^ 0x80)
      0004EC 85*0F F0         [24] 1309 	mov	b,(_control_strength + 1)
      0004EF 63 F0 80         [24] 1310 	xrl	b,#0x80
      0004F2 95 F0            [12] 1311 	subb	a,b
      0004F4 50 06            [24] 1312 	jnc	00126$
                                   1313 ;	./src/angry_bird.c:279: control_strength = 3;
      0004F6 75*0E 03         [24] 1314 	mov	_control_strength,#0x03
      0004F9 75*0F 00         [24] 1315 	mov	(_control_strength + 1),#0x00
      0004FC                       1316 00126$:
                                   1317 ;	./src/angry_bird.c:284: control_strength_[0] = '0' + control_strength;
      0004FC AF*0E            [24] 1318 	mov	r7,_control_strength
      0004FE 74 30            [12] 1319 	mov	a,#0x30
      000500 2F               [12] 1320 	add	a,r7
      000501 F5*30            [12] 1321 	mov	_angrybird_game_state_control_strength__196609_68,a
                                   1322 ;	./src/angry_bird.c:285: control_strength_[1] = '\0';
      000503 75*31 00         [24] 1323 	mov	(_angrybird_game_state_control_strength__196609_68 + 0x0001),#0x00
                                   1324 ;	./src/angry_bird.c:287: OLED_SetCursor(strength_text_row_cursor, strength_text_col_cursor);
      000506 75*00 0A         [24] 1325 	mov	_OLED_SetCursor_PARM_2,#0x0a
      000509 75 82 00         [24] 1326 	mov	dpl,#0x00
      00050C 12r00r00         [24] 1327 	lcall	_OLED_SetCursor
                                   1328 ;	./src/angry_bird.c:288: OLED_DisplayString(" ");
      00050F 90r01r3A         [24] 1329 	mov	dptr,#___str_3
      000512 75 F0 80         [24] 1330 	mov	b,#0x80
      000515 12r00r00         [24] 1331 	lcall	_OLED_DisplayString
                                   1332 ;	./src/angry_bird.c:289: OLED_SetCursor(strength_text_row_cursor, strength_text_col_cursor);
      000518 75*00 0A         [24] 1333 	mov	_OLED_SetCursor_PARM_2,#0x0a
      00051B 75 82 00         [24] 1334 	mov	dpl,#0x00
      00051E 12r00r00         [24] 1335 	lcall	_OLED_SetCursor
                                   1336 ;	./src/angry_bird.c:290: OLED_DisplayString(control_strength_);
      000521 90r00r30         [24] 1337 	mov	dptr,#_angrybird_game_state_control_strength__196609_68
      000524 75 F0 40         [24] 1338 	mov	b,#0x40
      000527 12r00r00         [24] 1339 	lcall	_OLED_DisplayString
      00052A                       1340 00131$:
                                   1341 ;	./src/angry_bird.c:295: if ((but_enter == 0) && (prebut_enter == 1))
      00052A 30 A2 03         [24] 1342 	jnb	_P2_2,00720$
      00052D 02r09rCA         [24] 1343 	ljmp	00159$
      000530                       1344 00720$:
      000530 74 01            [12] 1345 	mov	a,#0x01
      000532 B5*27 06         [24] 1346 	cjne	a,_prebut_enter,00721$
      000535 14               [12] 1347 	dec	a
      000536 B5*28 02         [24] 1348 	cjne	a,(_prebut_enter + 1),00721$
      000539 80 03            [24] 1349 	sjmp	00722$
      00053B                       1350 00721$:
      00053B 02r09rCA         [24] 1351 	ljmp	00159$
      00053E                       1352 00722$:
                                   1353 ;	./src/angry_bird.c:297: delay_ms(10);
      00053E 90 00 0A         [24] 1354 	mov	dptr,#0x000a
      000541 12r00r00         [24] 1355 	lcall	_delay_ms
                                   1356 ;	./src/angry_bird.c:298: if (but_enter == 0)
      000544 30 A2 03         [24] 1357 	jnb	_P2_2,00723$
      000547 02r09rCA         [24] 1358 	ljmp	00159$
      00054A                       1359 00723$:
                                   1360 ;	./src/angry_bird.c:300: bird_amt--;
      00054A 15*08            [12] 1361 	dec	_bird_amt
      00054C 74 FF            [12] 1362 	mov	a,#0xff
      00054E B5*08 02         [24] 1363 	cjne	a,_bird_amt,00724$
      000551 15*09            [12] 1364 	dec	(_bird_amt + 1)
      000553                       1365 00724$:
                                   1366 ;	./src/angry_bird.c:302: row_offset = 0;
      000553 E4               [12] 1367 	clr	a
      000554 F5*04            [12] 1368 	mov	_row_offset,a
      000556 F5*05            [12] 1369 	mov	(_row_offset + 1),a
                                   1370 ;	./src/angry_bird.c:303: col_offset = bird_remain_col_cursor + (bird_total_amount - bird_amt - 1) * 8;
      000558 74 08            [12] 1371 	mov	a,#0x08
      00055A C3               [12] 1372 	clr	c
      00055B 95*08            [12] 1373 	subb	a,_bird_amt
      00055D FE               [12] 1374 	mov	r6,a
      00055E E4               [12] 1375 	clr	a
      00055F 95*09            [12] 1376 	subb	a,(_bird_amt + 1)
      000561 C4               [12] 1377 	swap	a
      000562 03               [12] 1378 	rr	a
      000563 54 F8            [12] 1379 	anl	a,#0xf8
      000565 CE               [12] 1380 	xch	a,r6
      000566 C4               [12] 1381 	swap	a
      000567 03               [12] 1382 	rr	a
      000568 CE               [12] 1383 	xch	a,r6
      000569 6E               [12] 1384 	xrl	a,r6
      00056A CE               [12] 1385 	xch	a,r6
      00056B 54 F8            [12] 1386 	anl	a,#0xf8
      00056D CE               [12] 1387 	xch	a,r6
      00056E 6E               [12] 1388 	xrl	a,r6
      00056F FF               [12] 1389 	mov	r7,a
      000570 74 32            [12] 1390 	mov	a,#0x32
      000572 2E               [12] 1391 	add	a,r6
      000573 F5*06            [12] 1392 	mov	_col_offset,a
      000575 E4               [12] 1393 	clr	a
      000576 3F               [12] 1394 	addc	a,r7
      000577 F5*07            [12] 1395 	mov	(_col_offset + 1),a
                                   1396 ;	./src/angry_bird.c:304: for (int j = 0; j < bird_cul_size; j++)
      000579 7E 00            [12] 1397 	mov	r6,#0x00
      00057B 7F 00            [12] 1398 	mov	r7,#0x00
      00057D                       1399 00177$:
      00057D C3               [12] 1400 	clr	c
      00057E EE               [12] 1401 	mov	a,r6
      00057F 94 08            [12] 1402 	subb	a,#0x08
      000581 EF               [12] 1403 	mov	a,r7
      000582 64 80            [12] 1404 	xrl	a,#0x80
      000584 94 80            [12] 1405 	subb	a,#0x80
      000586 50 31            [24] 1406 	jnc	00136$
                                   1407 ;	./src/angry_bird.c:306: for (int i = 0; i < bird_row_size; i++)
      000588 7D 00            [12] 1408 	mov	r5,#0x00
      00058A                       1409 00174$:
      00058A BD 01 00         [24] 1410 	cjne	r5,#0x01,00726$
      00058D                       1411 00726$:
      00058D 50 23            [24] 1412 	jnc	00178$
                                   1413 ;	./src/angry_bird.c:308: OLED_SetCursor(row_offset + i, col_offset + j);
      00058F AC*04            [24] 1414 	mov	r4,_row_offset
      000591 E4               [12] 1415 	clr	a
      000592 2C               [12] 1416 	add	a,r4
      000593 F5 82            [12] 1417 	mov	dpl,a
      000595 AC*06            [24] 1418 	mov	r4,_col_offset
      000597 8E 03            [24] 1419 	mov	ar3,r6
      000599 EB               [12] 1420 	mov	a,r3
      00059A 2C               [12] 1421 	add	a,r4
      00059B F5*00            [12] 1422 	mov	_OLED_SetCursor_PARM_2,a
      00059D C0 07            [24] 1423 	push	ar7
      00059F C0 06            [24] 1424 	push	ar6
      0005A1 12r00r00         [24] 1425 	lcall	_OLED_SetCursor
                                   1426 ;	./src/angry_bird.c:309: oledSendData(0x00);
      0005A4 75 82 00         [24] 1427 	mov	dpl,#0x00
      0005A7 12r00r00         [24] 1428 	lcall	_oledSendData
      0005AA D0 06            [24] 1429 	pop	ar6
      0005AC D0 07            [24] 1430 	pop	ar7
                                   1431 ;	./src/angry_bird.c:306: for (int i = 0; i < bird_row_size; i++)
      0005AE 7D 01            [12] 1432 	mov	r5,#0x01
      0005B0 80 D8            [24] 1433 	sjmp	00174$
      0005B2                       1434 00178$:
                                   1435 ;	./src/angry_bird.c:304: for (int j = 0; j < bird_cul_size; j++)
      0005B2 0E               [12] 1436 	inc	r6
      0005B3 BE 00 C7         [24] 1437 	cjne	r6,#0x00,00177$
      0005B6 0F               [12] 1438 	inc	r7
      0005B7 80 C4            [24] 1439 	sjmp	00177$
      0005B9                       1440 00136$:
                                   1441 ;	./src/angry_bird.c:316: float delta_y = (control_angle_value) / (SQRT_2 / 2) * getsine(control_angle);
      0005B9 85*0C 82         [24] 1442 	mov	dpl,_control_angle
      0005BC 85*0D 83         [24] 1443 	mov	dph,(_control_angle + 1)
      0005BF 12r0Br59         [24] 1444 	lcall	_getsine
      0005C2 AC 82            [24] 1445 	mov	r4,dpl
      0005C4 AD 83            [24] 1446 	mov	r5,dph
      0005C6 AE F0            [24] 1447 	mov	r6,b
      0005C8 FF               [12] 1448 	mov	r7,a
      0005C9 C0 04            [24] 1449 	push	ar4
      0005CB C0 05            [24] 1450 	push	ar5
      0005CD C0 06            [24] 1451 	push	ar6
      0005CF C0 07            [24] 1452 	push	ar7
                                   1453 ;	./src/angry_bird.c:317: float delta_x = control_strength_value * control_strength - delta_y * 4;
      0005D1 90 C3 B7         [24] 1454 	mov	dptr,#0xc3b7
      0005D4 75 F0 07         [24] 1455 	mov	b,#0x07
      0005D7 74 41            [12] 1456 	mov	a,#0x41
      0005D9 12r00r00         [24] 1457 	lcall	___fsmul
      0005DC 85 82*32         [24] 1458 	mov	_angrybird_game_state_delta_y_196609_75,dpl
      0005DF 85 83*33         [24] 1459 	mov	(_angrybird_game_state_delta_y_196609_75 + 1),dph
      0005E2 85 F0*34         [24] 1460 	mov	(_angrybird_game_state_delta_y_196609_75 + 2),b
      0005E5 F5*35            [12] 1461 	mov	(_angrybird_game_state_delta_y_196609_75 + 3),a
      0005E7 E5 81            [12] 1462 	mov	a,sp
      0005E9 24 FC            [12] 1463 	add	a,#0xfc
      0005EB F5 81            [12] 1464 	mov	sp,a
      0005ED 85*0E*00         [24] 1465 	mov	__mulint_PARM_2,_control_strength
      0005F0 85*0F*01         [24] 1466 	mov	(__mulint_PARM_2 + 1),(_control_strength + 1)
      0005F3 90 00 19         [24] 1467 	mov	dptr,#0x0019
      0005F6 12r00r00         [24] 1468 	lcall	__mulint
      0005F9 AA 82            [24] 1469 	mov	r2,dpl
      0005FB AB 83            [24] 1470 	mov	r3,dph
      0005FD C0 03            [24] 1471 	push	ar3
      0005FF C0 02            [24] 1472 	push	ar2
      000601 C0*32            [24] 1473 	push	_angrybird_game_state_delta_y_196609_75
      000603 C0*33            [24] 1474 	push	(_angrybird_game_state_delta_y_196609_75 + 1)
      000605 C0*34            [24] 1475 	push	(_angrybird_game_state_delta_y_196609_75 + 2)
      000607 C0*35            [24] 1476 	push	(_angrybird_game_state_delta_y_196609_75 + 3)
      000609 90 00 00         [24] 1477 	mov	dptr,#0x0000
      00060C 75 F0 80         [24] 1478 	mov	b,#0x80
      00060F 74 40            [12] 1479 	mov	a,#0x40
      000611 12r00r00         [24] 1480 	lcall	___fsmul
      000614 85 82*4A         [24] 1481 	mov	_angrybird_game_state_sloc1_1_0,dpl
      000617 85 83*4B         [24] 1482 	mov	(_angrybird_game_state_sloc1_1_0 + 1),dph
      00061A 85 F0*4C         [24] 1483 	mov	(_angrybird_game_state_sloc1_1_0 + 2),b
      00061D F5*4D            [12] 1484 	mov	(_angrybird_game_state_sloc1_1_0 + 3),a
      00061F E5 81            [12] 1485 	mov	a,sp
      000621 24 FC            [12] 1486 	add	a,#0xfc
      000623 F5 81            [12] 1487 	mov	sp,a
      000625 D0 02            [24] 1488 	pop	ar2
      000627 D0 03            [24] 1489 	pop	ar3
      000629 8A 82            [24] 1490 	mov	dpl,r2
      00062B 8B 83            [24] 1491 	mov	dph,r3
      00062D 12r00r00         [24] 1492 	lcall	___sint2fs
      000630 AA 82            [24] 1493 	mov	r2,dpl
      000632 AB 83            [24] 1494 	mov	r3,dph
      000634 AE F0            [24] 1495 	mov	r6,b
      000636 FF               [12] 1496 	mov	r7,a
      000637 C0*4A            [24] 1497 	push	_angrybird_game_state_sloc1_1_0
      000639 C0*4B            [24] 1498 	push	(_angrybird_game_state_sloc1_1_0 + 1)
      00063B C0*4C            [24] 1499 	push	(_angrybird_game_state_sloc1_1_0 + 2)
      00063D C0*4D            [24] 1500 	push	(_angrybird_game_state_sloc1_1_0 + 3)
                                   1501 ;	./src/angry_bird.c:318: float peak_x = bird_init_col_cursor + delta_x;
      00063F 8A 82            [24] 1502 	mov	dpl,r2
      000641 8B 83            [24] 1503 	mov	dph,r3
      000643 8E F0            [24] 1504 	mov	b,r6
      000645 EF               [12] 1505 	mov	a,r7
      000646 12r00r00         [24] 1506 	lcall	___fssub
      000649 85 82*36         [24] 1507 	mov	_angrybird_game_state_delta_x_196609_75,dpl
      00064C 85 83*37         [24] 1508 	mov	(_angrybird_game_state_delta_x_196609_75 + 1),dph
      00064F 85 F0*38         [24] 1509 	mov	(_angrybird_game_state_delta_x_196609_75 + 2),b
      000652 F5*39            [12] 1510 	mov	(_angrybird_game_state_delta_x_196609_75 + 3),a
      000654 E5 81            [12] 1511 	mov	a,sp
      000656 24 FC            [12] 1512 	add	a,#0xfc
      000658 F5 81            [12] 1513 	mov	sp,a
      00065A E4               [12] 1514 	clr	a
      00065B C0 E0            [24] 1515 	push	acc
      00065D C0 E0            [24] 1516 	push	acc
      00065F C0 E0            [24] 1517 	push	acc
      000661 74 41            [12] 1518 	mov	a,#0x41
      000663 C0 E0            [24] 1519 	push	acc
                                   1520 ;	./src/angry_bird.c:319: float peak_y = bird_init_row_cursor - delta_y;
      000665 85*36 82         [24] 1521 	mov	dpl,_angrybird_game_state_delta_x_196609_75
      000668 85*37 83         [24] 1522 	mov	dph,(_angrybird_game_state_delta_x_196609_75 + 1)
      00066B 85*38 F0         [24] 1523 	mov	b,(_angrybird_game_state_delta_x_196609_75 + 2)
      00066E E5*39            [12] 1524 	mov	a,(_angrybird_game_state_delta_x_196609_75 + 3)
      000670 12r00r00         [24] 1525 	lcall	___fsadd
      000673 85 82*3A         [24] 1526 	mov	_angrybird_game_state_peak_x_196609_75,dpl
      000676 85 83*3B         [24] 1527 	mov	(_angrybird_game_state_peak_x_196609_75 + 1),dph
      000679 85 F0*3C         [24] 1528 	mov	(_angrybird_game_state_peak_x_196609_75 + 2),b
      00067C F5*3D            [12] 1529 	mov	(_angrybird_game_state_peak_x_196609_75 + 3),a
      00067E E5 81            [12] 1530 	mov	a,sp
      000680 24 FC            [12] 1531 	add	a,#0xfc
      000682 F5 81            [12] 1532 	mov	sp,a
      000684 C0*32            [24] 1533 	push	_angrybird_game_state_delta_y_196609_75
      000686 C0*33            [24] 1534 	push	(_angrybird_game_state_delta_y_196609_75 + 1)
      000688 C0*34            [24] 1535 	push	(_angrybird_game_state_delta_y_196609_75 + 2)
      00068A C0*35            [24] 1536 	push	(_angrybird_game_state_delta_y_196609_75 + 3)
                                   1537 ;	./src/angry_bird.c:320: float a = delta_y / pow_2(delta_x);
      00068C 90 00 00         [24] 1538 	mov	dptr,#0x0000
      00068F 75 F0 E0         [24] 1539 	mov	b,#0xe0
      000692 74 40            [12] 1540 	mov	a,#0x40
      000694 12r00r00         [24] 1541 	lcall	___fssub
      000697 85 82*3E         [24] 1542 	mov	_angrybird_game_state_peak_y_196609_75,dpl
      00069A 85 83*3F         [24] 1543 	mov	(_angrybird_game_state_peak_y_196609_75 + 1),dph
      00069D 85 F0*40         [24] 1544 	mov	(_angrybird_game_state_peak_y_196609_75 + 2),b
      0006A0 F5*41            [12] 1545 	mov	(_angrybird_game_state_peak_y_196609_75 + 3),a
      0006A2 E5 81            [12] 1546 	mov	a,sp
      0006A4 24 FC            [12] 1547 	add	a,#0xfc
      0006A6 F5 81            [12] 1548 	mov	sp,a
      0006A8 85*36 82         [24] 1549 	mov	dpl,_angrybird_game_state_delta_x_196609_75
      0006AB 85*37 83         [24] 1550 	mov	dph,(_angrybird_game_state_delta_x_196609_75 + 1)
      0006AE 85*38 F0         [24] 1551 	mov	b,(_angrybird_game_state_delta_x_196609_75 + 2)
      0006B1 E5*39            [12] 1552 	mov	a,(_angrybird_game_state_delta_x_196609_75 + 3)
      0006B3 12r0Cr34         [24] 1553 	lcall	_pow_2
      0006B6 AA 82            [24] 1554 	mov	r2,dpl
      0006B8 AB 83            [24] 1555 	mov	r3,dph
      0006BA AE F0            [24] 1556 	mov	r6,b
      0006BC FF               [12] 1557 	mov	r7,a
      0006BD C0 02            [24] 1558 	push	ar2
      0006BF C0 03            [24] 1559 	push	ar3
      0006C1 C0 06            [24] 1560 	push	ar6
      0006C3 C0 07            [24] 1561 	push	ar7
                                   1562 ;	./src/angry_bird.c:322: row_offset = bird_init_row_cursor;
      0006C5 85*32 82         [24] 1563 	mov	dpl,_angrybird_game_state_delta_y_196609_75
      0006C8 85*33 83         [24] 1564 	mov	dph,(_angrybird_game_state_delta_y_196609_75 + 1)
      0006CB 85*34 F0         [24] 1565 	mov	b,(_angrybird_game_state_delta_y_196609_75 + 2)
      0006CE E5*35            [12] 1566 	mov	a,(_angrybird_game_state_delta_y_196609_75 + 3)
      0006D0 12r00r00         [24] 1567 	lcall	___fsdiv
      0006D3 85 82*42         [24] 1568 	mov	_angrybird_game_state_a_196609_75,dpl
      0006D6 85 83*43         [24] 1569 	mov	(_angrybird_game_state_a_196609_75 + 1),dph
      0006D9 85 F0*44         [24] 1570 	mov	(_angrybird_game_state_a_196609_75 + 2),b
      0006DC F5*45            [12] 1571 	mov	(_angrybird_game_state_a_196609_75 + 3),a
      0006DE E5 81            [12] 1572 	mov	a,sp
      0006E0 24 FC            [12] 1573 	add	a,#0xfc
      0006E2 F5 81            [12] 1574 	mov	sp,a
      0006E4 75*04 07         [24] 1575 	mov	_row_offset,#0x07
      0006E7 75*05 00         [24] 1576 	mov	(_row_offset + 1),#0x00
                                   1577 ;	./src/angry_bird.c:323: col_offset = bird_init_col_cursor;
      0006EA 75*06 08         [24] 1578 	mov	_col_offset,#0x08
      0006ED 75*07 00         [24] 1579 	mov	(_col_offset + 1),#0x00
                                   1580 ;	./src/angry_bird.c:324: for (int j = 0; j < bird_cul_size; j++)
      0006F0 7A 00            [12] 1581 	mov	r2,#0x00
      0006F2 7B 00            [12] 1582 	mov	r3,#0x00
      0006F4                       1583 00183$:
      0006F4 C3               [12] 1584 	clr	c
      0006F5 EA               [12] 1585 	mov	a,r2
      0006F6 94 08            [12] 1586 	subb	a,#0x08
      0006F8 EB               [12] 1587 	mov	a,r3
      0006F9 64 80            [12] 1588 	xrl	a,#0x80
      0006FB 94 80            [12] 1589 	subb	a,#0x80
      0006FD 50 31            [24] 1590 	jnc	00138$
                                   1591 ;	./src/angry_bird.c:326: for (int i = 0; i < bird_row_size; i++)
      0006FF 7F 00            [12] 1592 	mov	r7,#0x00
      000701                       1593 00180$:
      000701 BF 01 00         [24] 1594 	cjne	r7,#0x01,00730$
      000704                       1595 00730$:
      000704 50 23            [24] 1596 	jnc	00184$
                                   1597 ;	./src/angry_bird.c:328: OLED_SetCursor(row_offset + i, col_offset + j);
      000706 AE*04            [24] 1598 	mov	r6,_row_offset
      000708 E4               [12] 1599 	clr	a
      000709 2E               [12] 1600 	add	a,r6
      00070A F5 82            [12] 1601 	mov	dpl,a
      00070C AE*06            [24] 1602 	mov	r6,_col_offset
      00070E 8A 05            [24] 1603 	mov	ar5,r2
      000710 ED               [12] 1604 	mov	a,r5
      000711 2E               [12] 1605 	add	a,r6
      000712 F5*00            [12] 1606 	mov	_OLED_SetCursor_PARM_2,a
      000714 C0 03            [24] 1607 	push	ar3
      000716 C0 02            [24] 1608 	push	ar2
      000718 12r00r00         [24] 1609 	lcall	_OLED_SetCursor
                                   1610 ;	./src/angry_bird.c:329: oledSendData(0x00);
      00071B 75 82 00         [24] 1611 	mov	dpl,#0x00
      00071E 12r00r00         [24] 1612 	lcall	_oledSendData
      000721 D0 02            [24] 1613 	pop	ar2
      000723 D0 03            [24] 1614 	pop	ar3
                                   1615 ;	./src/angry_bird.c:326: for (int i = 0; i < bird_row_size; i++)
      000725 7F 01            [12] 1616 	mov	r7,#0x01
      000727 80 D8            [24] 1617 	sjmp	00180$
      000729                       1618 00184$:
                                   1619 ;	./src/angry_bird.c:324: for (int j = 0; j < bird_cul_size; j++)
      000729 0A               [12] 1620 	inc	r2
      00072A BA 00 C7         [24] 1621 	cjne	r2,#0x00,00183$
      00072D 0B               [12] 1622 	inc	r3
      00072E 80 C4            [24] 1623 	sjmp	00183$
      000730                       1624 00138$:
                                   1625 ;	./src/angry_bird.c:333: for (int i = 16; i <= 119; i += 8)
      000730 75*46 10         [24] 1626 	mov	_angrybird_game_state_i_262145_80,#0x10
      000733 75*47 00         [24] 1627 	mov	(_angrybird_game_state_i_262145_80 + 1),#0x00
      000736                       1628 00204$:
      000736 C3               [12] 1629 	clr	c
      000737 74 77            [12] 1630 	mov	a,#0x77
      000739 95*46            [12] 1631 	subb	a,_angrybird_game_state_i_262145_80
      00073B 74 80            [12] 1632 	mov	a,#(0x00 ^ 0x80)
      00073D 85*47 F0         [24] 1633 	mov	b,(_angrybird_game_state_i_262145_80 + 1)
      000740 63 F0 80         [24] 1634 	xrl	b,#0x80
      000743 95 F0            [12] 1635 	subb	a,b
      000745 50 03            [24] 1636 	jnc	00733$
      000747 02r09r6A         [24] 1637 	ljmp	00153$
      00074A                       1638 00733$:
                                   1639 ;	./src/angry_bird.c:335: int output_row = a * pow_2(i - peak_x) + peak_y;
      00074A 85*46 82         [24] 1640 	mov	dpl,_angrybird_game_state_i_262145_80
      00074D 85*47 83         [24] 1641 	mov	dph,(_angrybird_game_state_i_262145_80 + 1)
      000750 12r00r00         [24] 1642 	lcall	___sint2fs
      000753 AA 82            [24] 1643 	mov	r2,dpl
      000755 AB 83            [24] 1644 	mov	r3,dph
      000757 AC F0            [24] 1645 	mov	r4,b
      000759 FD               [12] 1646 	mov	r5,a
      00075A C0*3A            [24] 1647 	push	_angrybird_game_state_peak_x_196609_75
      00075C C0*3B            [24] 1648 	push	(_angrybird_game_state_peak_x_196609_75 + 1)
      00075E C0*3C            [24] 1649 	push	(_angrybird_game_state_peak_x_196609_75 + 2)
      000760 C0*3D            [24] 1650 	push	(_angrybird_game_state_peak_x_196609_75 + 3)
      000762 8A 82            [24] 1651 	mov	dpl,r2
      000764 8B 83            [24] 1652 	mov	dph,r3
      000766 8C F0            [24] 1653 	mov	b,r4
      000768 ED               [12] 1654 	mov	a,r5
      000769 12r00r00         [24] 1655 	lcall	___fssub
      00076C AA 82            [24] 1656 	mov	r2,dpl
      00076E AB 83            [24] 1657 	mov	r3,dph
      000770 AC F0            [24] 1658 	mov	r4,b
      000772 FD               [12] 1659 	mov	r5,a
      000773 E5 81            [12] 1660 	mov	a,sp
      000775 24 FC            [12] 1661 	add	a,#0xfc
      000777 F5 81            [12] 1662 	mov	sp,a
      000779 8A 82            [24] 1663 	mov	dpl,r2
      00077B 8B 83            [24] 1664 	mov	dph,r3
      00077D 8C F0            [24] 1665 	mov	b,r4
      00077F ED               [12] 1666 	mov	a,r5
      000780 12r0Cr34         [24] 1667 	lcall	_pow_2
      000783 AA 82            [24] 1668 	mov	r2,dpl
      000785 AB 83            [24] 1669 	mov	r3,dph
      000787 AC F0            [24] 1670 	mov	r4,b
      000789 FD               [12] 1671 	mov	r5,a
      00078A C0 02            [24] 1672 	push	ar2
      00078C C0 03            [24] 1673 	push	ar3
      00078E C0 04            [24] 1674 	push	ar4
      000790 C0 05            [24] 1675 	push	ar5
      000792 85*42 82         [24] 1676 	mov	dpl,_angrybird_game_state_a_196609_75
      000795 85*43 83         [24] 1677 	mov	dph,(_angrybird_game_state_a_196609_75 + 1)
      000798 85*44 F0         [24] 1678 	mov	b,(_angrybird_game_state_a_196609_75 + 2)
      00079B E5*45            [12] 1679 	mov	a,(_angrybird_game_state_a_196609_75 + 3)
      00079D 12r00r00         [24] 1680 	lcall	___fsmul
      0007A0 AA 82            [24] 1681 	mov	r2,dpl
      0007A2 AB 83            [24] 1682 	mov	r3,dph
      0007A4 AC F0            [24] 1683 	mov	r4,b
      0007A6 FD               [12] 1684 	mov	r5,a
      0007A7 E5 81            [12] 1685 	mov	a,sp
      0007A9 24 FC            [12] 1686 	add	a,#0xfc
      0007AB F5 81            [12] 1687 	mov	sp,a
      0007AD C0*3E            [24] 1688 	push	_angrybird_game_state_peak_y_196609_75
      0007AF C0*3F            [24] 1689 	push	(_angrybird_game_state_peak_y_196609_75 + 1)
      0007B1 C0*40            [24] 1690 	push	(_angrybird_game_state_peak_y_196609_75 + 2)
      0007B3 C0*41            [24] 1691 	push	(_angrybird_game_state_peak_y_196609_75 + 3)
      0007B5 8A 82            [24] 1692 	mov	dpl,r2
      0007B7 8B 83            [24] 1693 	mov	dph,r3
      0007B9 8C F0            [24] 1694 	mov	b,r4
      0007BB ED               [12] 1695 	mov	a,r5
      0007BC 12r00r00         [24] 1696 	lcall	___fsadd
      0007BF AA 82            [24] 1697 	mov	r2,dpl
      0007C1 AB 83            [24] 1698 	mov	r3,dph
      0007C3 AC F0            [24] 1699 	mov	r4,b
      0007C5 FD               [12] 1700 	mov	r5,a
      0007C6 E5 81            [12] 1701 	mov	a,sp
      0007C8 24 FC            [12] 1702 	add	a,#0xfc
      0007CA F5 81            [12] 1703 	mov	sp,a
      0007CC 8A 82            [24] 1704 	mov	dpl,r2
      0007CE 8B 83            [24] 1705 	mov	dph,r3
      0007D0 8C F0            [24] 1706 	mov	b,r4
      0007D2 ED               [12] 1707 	mov	a,r5
      0007D3 12r00r00         [24] 1708 	lcall	___fs2sint
      0007D6 85 82*48         [24] 1709 	mov	_angrybird_game_state_output_row_327681_81,dpl
      0007D9 85 83*49         [24] 1710 	mov	(_angrybird_game_state_output_row_327681_81 + 1),dph
                                   1711 ;	./src/angry_bird.c:337: if (1 <= output_row && output_row <= 7)
      0007DC C3               [12] 1712 	clr	c
      0007DD E5*48            [12] 1713 	mov	a,_angrybird_game_state_output_row_327681_81
      0007DF 94 01            [12] 1714 	subb	a,#0x01
      0007E1 E5*49            [12] 1715 	mov	a,(_angrybird_game_state_output_row_327681_81 + 1)
      0007E3 64 80            [12] 1716 	xrl	a,#0x80
      0007E5 94 80            [12] 1717 	subb	a,#0x80
      0007E7 50 03            [24] 1718 	jnc	00734$
      0007E9 02r09r5C         [24] 1719 	ljmp	00205$
      0007EC                       1720 00734$:
      0007EC C3               [12] 1721 	clr	c
      0007ED 74 07            [12] 1722 	mov	a,#0x07
      0007EF 95*48            [12] 1723 	subb	a,_angrybird_game_state_output_row_327681_81
      0007F1 74 80            [12] 1724 	mov	a,#(0x00 ^ 0x80)
      0007F3 85*49 F0         [24] 1725 	mov	b,(_angrybird_game_state_output_row_327681_81 + 1)
      0007F6 63 F0 80         [24] 1726 	xrl	b,#0x80
      0007F9 95 F0            [12] 1727 	subb	a,b
      0007FB 50 03            [24] 1728 	jnc	00735$
      0007FD 02r09r5C         [24] 1729 	ljmp	00205$
      000800                       1730 00735$:
                                   1731 ;	./src/angry_bird.c:340: row_offset = output_row;
      000800 85*48*04         [24] 1732 	mov	_row_offset,_angrybird_game_state_output_row_327681_81
      000803 85*49*05         [24] 1733 	mov	(_row_offset + 1),(_angrybird_game_state_output_row_327681_81 + 1)
                                   1734 ;	./src/angry_bird.c:341: col_offset = bird_init_col_cursor + i;
      000806 74 08            [12] 1735 	mov	a,#0x08
      000808 25*46            [12] 1736 	add	a,_angrybird_game_state_i_262145_80
      00080A F5*06            [12] 1737 	mov	_col_offset,a
      00080C E4               [12] 1738 	clr	a
      00080D 35*47            [12] 1739 	addc	a,(_angrybird_game_state_i_262145_80 + 1)
      00080F F5*07            [12] 1740 	mov	(_col_offset + 1),a
                                   1741 ;	./src/angry_bird.c:342: for (int j = 0; j < bird_cul_size; j++)
      000811 7A 00            [12] 1742 	mov	r2,#0x00
      000813 7B 00            [12] 1743 	mov	r3,#0x00
      000815                       1744 00189$:
      000815 C3               [12] 1745 	clr	c
      000816 EA               [12] 1746 	mov	a,r2
      000817 94 08            [12] 1747 	subb	a,#0x08
      000819 EB               [12] 1748 	mov	a,r3
      00081A 64 80            [12] 1749 	xrl	a,#0x80
      00081C 94 80            [12] 1750 	subb	a,#0x80
      00081E 50 4D            [24] 1751 	jnc	00140$
                                   1752 ;	./src/angry_bird.c:344: for (int i = 0; i < bird_row_size; i++)
      000820 7D 00            [12] 1753 	mov	r5,#0x00
      000822                       1754 00186$:
      000822 BD 01 00         [24] 1755 	cjne	r5,#0x01,00737$
      000825                       1756 00737$:
      000825 50 3F            [24] 1757 	jnc	00190$
                                   1758 ;	./src/angry_bird.c:346: OLED_SetCursor(row_offset + i, col_offset + j);
      000827 AC*04            [24] 1759 	mov	r4,_row_offset
      000829 E4               [12] 1760 	clr	a
      00082A 2C               [12] 1761 	add	a,r4
      00082B F5 82            [12] 1762 	mov	dpl,a
      00082D AC*06            [24] 1763 	mov	r4,_col_offset
      00082F 8A 07            [24] 1764 	mov	ar7,r2
      000831 EF               [12] 1765 	mov	a,r7
      000832 2C               [12] 1766 	add	a,r4
      000833 F5*00            [12] 1767 	mov	_OLED_SetCursor_PARM_2,a
      000835 C0 07            [24] 1768 	push	ar7
      000837 C0 03            [24] 1769 	push	ar3
      000839 C0 02            [24] 1770 	push	ar2
      00083B 12r00r00         [24] 1771 	lcall	_OLED_SetCursor
      00083E D0 02            [24] 1772 	pop	ar2
      000840 D0 03            [24] 1773 	pop	ar3
      000842 D0 07            [24] 1774 	pop	ar7
                                   1775 ;	./src/angry_bird.c:347: oledSendData(bird_logo[bird_cul_size * i + j]);
      000844 EF               [12] 1776 	mov	a,r7
      000845 33               [12] 1777 	rlc	a
      000846 95 E0            [12] 1778 	subb	a,acc
      000848 FE               [12] 1779 	mov	r6,a
      000849 EF               [12] 1780 	mov	a,r7
      00084A 24r28            [12] 1781 	add	a,#_bird_logo
      00084C F5 82            [12] 1782 	mov	dpl,a
      00084E EE               [12] 1783 	mov	a,r6
      00084F 34s00            [12] 1784 	addc	a,#(_bird_logo >> 8)
      000851 F5 83            [12] 1785 	mov	dph,a
      000853 E4               [12] 1786 	clr	a
      000854 93               [24] 1787 	movc	a,@a+dptr
      000855 F5 82            [12] 1788 	mov	dpl,a
      000857 C0 03            [24] 1789 	push	ar3
      000859 C0 02            [24] 1790 	push	ar2
      00085B 12r00r00         [24] 1791 	lcall	_oledSendData
      00085E D0 02            [24] 1792 	pop	ar2
      000860 D0 03            [24] 1793 	pop	ar3
                                   1794 ;	./src/angry_bird.c:344: for (int i = 0; i < bird_row_size; i++)
      000862 7D 01            [12] 1795 	mov	r5,#0x01
      000864 80 BC            [24] 1796 	sjmp	00186$
      000866                       1797 00190$:
                                   1798 ;	./src/angry_bird.c:342: for (int j = 0; j < bird_cul_size; j++)
      000866 0A               [12] 1799 	inc	r2
      000867 BA 00 AB         [24] 1800 	cjne	r2,#0x00,00189$
      00086A 0B               [12] 1801 	inc	r3
      00086B 80 A8            [24] 1802 	sjmp	00189$
      00086D                       1803 00140$:
                                   1804 ;	./src/angry_bird.c:350: delay_ms(400);
      00086D 90 01 90         [24] 1805 	mov	dptr,#0x0190
      000870 12r00r00         [24] 1806 	lcall	_delay_ms
                                   1807 ;	./src/angry_bird.c:374: if (pig1_row_cursor <= row_offset && row_offset <= pig1_row_cursor + 1 && pig1_col_cursor - 8 < col_offset && col_offset < pig1_col_cursor + 12)
      000873 C3               [12] 1808 	clr	c
      000874 E5*04            [12] 1809 	mov	a,_row_offset
      000876 94 03            [12] 1810 	subb	a,#0x03
      000878 E5*05            [12] 1811 	mov	a,(_row_offset + 1)
      00087A 64 80            [12] 1812 	xrl	a,#0x80
      00087C 94 80            [12] 1813 	subb	a,#0x80
      00087E 50 03            [24] 1814 	jnc	00740$
      000880 02r09r0B         [24] 1815 	ljmp	00144$
      000883                       1816 00740$:
      000883 C3               [12] 1817 	clr	c
      000884 74 04            [12] 1818 	mov	a,#0x04
      000886 95*04            [12] 1819 	subb	a,_row_offset
      000888 74 80            [12] 1820 	mov	a,#(0x00 ^ 0x80)
      00088A 85*05 F0         [24] 1821 	mov	b,(_row_offset + 1)
      00088D 63 F0 80         [24] 1822 	xrl	b,#0x80
      000890 95 F0            [12] 1823 	subb	a,b
      000892 40 77            [24] 1824 	jc	00144$
      000894 74 48            [12] 1825 	mov	a,#0x48
      000896 95*06            [12] 1826 	subb	a,_col_offset
      000898 74 80            [12] 1827 	mov	a,#(0x00 ^ 0x80)
      00089A 85*07 F0         [24] 1828 	mov	b,(_col_offset + 1)
      00089D 63 F0 80         [24] 1829 	xrl	b,#0x80
      0008A0 95 F0            [12] 1830 	subb	a,b
      0008A2 50 67            [24] 1831 	jnc	00144$
      0008A4 C3               [12] 1832 	clr	c
      0008A5 E5*06            [12] 1833 	mov	a,_col_offset
      0008A7 94 5C            [12] 1834 	subb	a,#0x5c
      0008A9 E5*07            [12] 1835 	mov	a,(_col_offset + 1)
      0008AB 64 80            [12] 1836 	xrl	a,#0x80
      0008AD 94 80            [12] 1837 	subb	a,#0x80
      0008AF 50 5A            [24] 1838 	jnc	00144$
                                   1839 ;	./src/angry_bird.c:376: pig_amt--;
      0008B1 15*0A            [12] 1840 	dec	_pig_amt
      0008B3 74 FF            [12] 1841 	mov	a,#0xff
      0008B5 B5*0A 02         [24] 1842 	cjne	a,_pig_amt,00744$
      0008B8 15*0B            [12] 1843 	dec	(_pig_amt + 1)
      0008BA                       1844 00744$:
                                   1845 ;	./src/angry_bird.c:377: row_offset = pig1_row_cursor;
      0008BA 75*04 03         [24] 1846 	mov	_row_offset,#0x03
      0008BD 75*05 00         [24] 1847 	mov	(_row_offset + 1),#0x00
                                   1848 ;	./src/angry_bird.c:378: col_offset = pig1_col_cursor;
      0008C0 75*06 50         [24] 1849 	mov	_col_offset,#0x50
      0008C3 75*07 00         [24] 1850 	mov	(_col_offset + 1),#0x00
                                   1851 ;	./src/angry_bird.c:379: for (int j = 0; j < pig_cul_size; j++)
      0008C6 7E 00            [12] 1852 	mov	r6,#0x00
      0008C8 7F 00            [12] 1853 	mov	r7,#0x00
      0008CA                       1854 00195$:
      0008CA C3               [12] 1855 	clr	c
      0008CB EE               [12] 1856 	mov	a,r6
      0008CC 94 0C            [12] 1857 	subb	a,#0x0c
      0008CE EF               [12] 1858 	mov	a,r7
      0008CF 64 80            [12] 1859 	xrl	a,#0x80
      0008D1 94 80            [12] 1860 	subb	a,#0x80
      0008D3 50 36            [24] 1861 	jnc	00144$
                                   1862 ;	./src/angry_bird.c:381: for (int i = 0; i < pig_row_size; i++)
      0008D5 7D 00            [12] 1863 	mov	r5,#0x00
      0008D7                       1864 00192$:
      0008D7 BD 02 00         [24] 1865 	cjne	r5,#0x02,00746$
      0008DA                       1866 00746$:
      0008DA 50 28            [24] 1867 	jnc	00196$
                                   1868 ;	./src/angry_bird.c:383: OLED_SetCursor(row_offset + i, col_offset + j);
      0008DC AC*04            [24] 1869 	mov	r4,_row_offset
      0008DE 8D 03            [24] 1870 	mov	ar3,r5
      0008E0 EB               [12] 1871 	mov	a,r3
      0008E1 2C               [12] 1872 	add	a,r4
      0008E2 F5 82            [12] 1873 	mov	dpl,a
      0008E4 AC*06            [24] 1874 	mov	r4,_col_offset
      0008E6 8E 03            [24] 1875 	mov	ar3,r6
      0008E8 EB               [12] 1876 	mov	a,r3
      0008E9 2C               [12] 1877 	add	a,r4
      0008EA F5*00            [12] 1878 	mov	_OLED_SetCursor_PARM_2,a
      0008EC C0 07            [24] 1879 	push	ar7
      0008EE C0 06            [24] 1880 	push	ar6
      0008F0 C0 05            [24] 1881 	push	ar5
      0008F2 12r00r00         [24] 1882 	lcall	_OLED_SetCursor
                                   1883 ;	./src/angry_bird.c:384: oledSendData(0x00);
      0008F5 75 82 00         [24] 1884 	mov	dpl,#0x00
      0008F8 12r00r00         [24] 1885 	lcall	_oledSendData
      0008FB D0 05            [24] 1886 	pop	ar5
      0008FD D0 06            [24] 1887 	pop	ar6
      0008FF D0 07            [24] 1888 	pop	ar7
                                   1889 ;	./src/angry_bird.c:381: for (int i = 0; i < pig_row_size; i++)
      000901 0D               [12] 1890 	inc	r5
      000902 80 D3            [24] 1891 	sjmp	00192$
      000904                       1892 00196$:
                                   1893 ;	./src/angry_bird.c:379: for (int j = 0; j < pig_cul_size; j++)
      000904 0E               [12] 1894 	inc	r6
      000905 BE 00 C2         [24] 1895 	cjne	r6,#0x00,00195$
      000908 0F               [12] 1896 	inc	r7
      000909 80 BF            [24] 1897 	sjmp	00195$
      00090B                       1898 00144$:
                                   1899 ;	./src/angry_bird.c:389: row_offset = output_row;
      00090B 85*48*04         [24] 1900 	mov	_row_offset,_angrybird_game_state_output_row_327681_81
      00090E 85*49*05         [24] 1901 	mov	(_row_offset + 1),(_angrybird_game_state_output_row_327681_81 + 1)
                                   1902 ;	./src/angry_bird.c:390: col_offset = bird_init_col_cursor + i;
      000911 74 08            [12] 1903 	mov	a,#0x08
      000913 25*46            [12] 1904 	add	a,_angrybird_game_state_i_262145_80
      000915 F5*06            [12] 1905 	mov	_col_offset,a
      000917 E4               [12] 1906 	clr	a
      000918 35*47            [12] 1907 	addc	a,(_angrybird_game_state_i_262145_80 + 1)
      00091A F5*07            [12] 1908 	mov	(_col_offset + 1),a
                                   1909 ;	./src/angry_bird.c:391: for (int j = 0; j < bird_cul_size; j++)
      00091C 7E 00            [12] 1910 	mov	r6,#0x00
      00091E 7F 00            [12] 1911 	mov	r7,#0x00
      000920                       1912 00201$:
      000920 C3               [12] 1913 	clr	c
      000921 EE               [12] 1914 	mov	a,r6
      000922 94 08            [12] 1915 	subb	a,#0x08
      000924 EF               [12] 1916 	mov	a,r7
      000925 64 80            [12] 1917 	xrl	a,#0x80
      000927 94 80            [12] 1918 	subb	a,#0x80
      000929 50 31            [24] 1919 	jnc	00205$
                                   1920 ;	./src/angry_bird.c:393: for (int i = 0; i < bird_row_size; i++)
      00092B 7D 00            [12] 1921 	mov	r5,#0x00
      00092D                       1922 00198$:
      00092D BD 01 00         [24] 1923 	cjne	r5,#0x01,00750$
      000930                       1924 00750$:
      000930 50 23            [24] 1925 	jnc	00202$
                                   1926 ;	./src/angry_bird.c:395: OLED_SetCursor(row_offset + i, col_offset + j);
      000932 AC*04            [24] 1927 	mov	r4,_row_offset
      000934 E4               [12] 1928 	clr	a
      000935 2C               [12] 1929 	add	a,r4
      000936 F5 82            [12] 1930 	mov	dpl,a
      000938 AC*06            [24] 1931 	mov	r4,_col_offset
      00093A 8E 03            [24] 1932 	mov	ar3,r6
      00093C EB               [12] 1933 	mov	a,r3
      00093D 2C               [12] 1934 	add	a,r4
      00093E F5*00            [12] 1935 	mov	_OLED_SetCursor_PARM_2,a
      000940 C0 07            [24] 1936 	push	ar7
      000942 C0 06            [24] 1937 	push	ar6
      000944 12r00r00         [24] 1938 	lcall	_OLED_SetCursor
                                   1939 ;	./src/angry_bird.c:396: oledSendData(0x00);
      000947 75 82 00         [24] 1940 	mov	dpl,#0x00
      00094A 12r00r00         [24] 1941 	lcall	_oledSendData
      00094D D0 06            [24] 1942 	pop	ar6
      00094F D0 07            [24] 1943 	pop	ar7
                                   1944 ;	./src/angry_bird.c:393: for (int i = 0; i < bird_row_size; i++)
      000951 7D 01            [12] 1945 	mov	r5,#0x01
      000953 80 D8            [24] 1946 	sjmp	00198$
      000955                       1947 00202$:
                                   1948 ;	./src/angry_bird.c:391: for (int j = 0; j < bird_cul_size; j++)
      000955 0E               [12] 1949 	inc	r6
      000956 BE 00 C7         [24] 1950 	cjne	r6,#0x00,00201$
      000959 0F               [12] 1951 	inc	r7
      00095A 80 C4            [24] 1952 	sjmp	00201$
      00095C                       1953 00205$:
                                   1954 ;	./src/angry_bird.c:333: for (int i = 16; i <= 119; i += 8)
      00095C 74 08            [12] 1955 	mov	a,#0x08
      00095E 25*46            [12] 1956 	add	a,_angrybird_game_state_i_262145_80
      000960 F5*46            [12] 1957 	mov	_angrybird_game_state_i_262145_80,a
      000962 E4               [12] 1958 	clr	a
      000963 35*47            [12] 1959 	addc	a,(_angrybird_game_state_i_262145_80 + 1)
      000965 F5*47            [12] 1960 	mov	(_angrybird_game_state_i_262145_80 + 1),a
      000967 02r07r36         [24] 1961 	ljmp	00204$
      00096A                       1962 00153$:
                                   1963 ;	./src/angry_bird.c:403: row_offset = bird_init_row_cursor;
      00096A 75*04 07         [24] 1964 	mov	_row_offset,#0x07
      00096D 75*05 00         [24] 1965 	mov	(_row_offset + 1),#0x00
                                   1966 ;	./src/angry_bird.c:404: col_offset = bird_init_col_cursor;
      000970 75*06 08         [24] 1967 	mov	_col_offset,#0x08
      000973 75*07 00         [24] 1968 	mov	(_col_offset + 1),#0x00
                                   1969 ;	./src/angry_bird.c:405: for (int j = 0; j < bird_cul_size; j++)
      000976 7E 00            [12] 1970 	mov	r6,#0x00
      000978 7F 00            [12] 1971 	mov	r7,#0x00
      00097A                       1972 00210$:
      00097A C3               [12] 1973 	clr	c
      00097B EE               [12] 1974 	mov	a,r6
      00097C 94 08            [12] 1975 	subb	a,#0x08
      00097E EF               [12] 1976 	mov	a,r7
      00097F 64 80            [12] 1977 	xrl	a,#0x80
      000981 94 80            [12] 1978 	subb	a,#0x80
      000983 50 45            [24] 1979 	jnc	00159$
                                   1980 ;	./src/angry_bird.c:407: for (int i = 0; i < bird_row_size; i++)
      000985 7D 00            [12] 1981 	mov	r5,#0x00
      000987                       1982 00207$:
      000987 BD 01 00         [24] 1983 	cjne	r5,#0x01,00754$
      00098A                       1984 00754$:
      00098A 50 37            [24] 1985 	jnc	00211$
                                   1986 ;	./src/angry_bird.c:409: OLED_SetCursor(row_offset + i, col_offset + j);
      00098C AC*04            [24] 1987 	mov	r4,_row_offset
      00098E E4               [12] 1988 	clr	a
      00098F 2C               [12] 1989 	add	a,r4
      000990 F5 82            [12] 1990 	mov	dpl,a
      000992 AC*06            [24] 1991 	mov	r4,_col_offset
      000994 8E 03            [24] 1992 	mov	ar3,r6
      000996 EB               [12] 1993 	mov	a,r3
      000997 2C               [12] 1994 	add	a,r4
      000998 F5*00            [12] 1995 	mov	_OLED_SetCursor_PARM_2,a
      00099A C0 07            [24] 1996 	push	ar7
      00099C C0 06            [24] 1997 	push	ar6
      00099E C0 03            [24] 1998 	push	ar3
      0009A0 12r00r00         [24] 1999 	lcall	_OLED_SetCursor
      0009A3 D0 03            [24] 2000 	pop	ar3
                                   2001 ;	./src/angry_bird.c:410: oledSendData(bird_logo[bird_cul_size * i + j]);
      0009A5 EB               [12] 2002 	mov	a,r3
      0009A6 33               [12] 2003 	rlc	a
      0009A7 95 E0            [12] 2004 	subb	a,acc
      0009A9 FC               [12] 2005 	mov	r4,a
      0009AA EB               [12] 2006 	mov	a,r3
      0009AB 24r28            [12] 2007 	add	a,#_bird_logo
      0009AD F5 82            [12] 2008 	mov	dpl,a
      0009AF EC               [12] 2009 	mov	a,r4
      0009B0 34s00            [12] 2010 	addc	a,#(_bird_logo >> 8)
      0009B2 F5 83            [12] 2011 	mov	dph,a
      0009B4 E4               [12] 2012 	clr	a
      0009B5 93               [24] 2013 	movc	a,@a+dptr
      0009B6 F5 82            [12] 2014 	mov	dpl,a
      0009B8 12r00r00         [24] 2015 	lcall	_oledSendData
      0009BB D0 06            [24] 2016 	pop	ar6
      0009BD D0 07            [24] 2017 	pop	ar7
                                   2018 ;	./src/angry_bird.c:407: for (int i = 0; i < bird_row_size; i++)
      0009BF 7D 01            [12] 2019 	mov	r5,#0x01
      0009C1 80 C4            [24] 2020 	sjmp	00207$
      0009C3                       2021 00211$:
                                   2022 ;	./src/angry_bird.c:405: for (int j = 0; j < bird_cul_size; j++)
      0009C3 0E               [12] 2023 	inc	r6
      0009C4 BE 00 B3         [24] 2024 	cjne	r6,#0x00,00210$
      0009C7 0F               [12] 2025 	inc	r7
      0009C8 80 B0            [24] 2026 	sjmp	00210$
      0009CA                       2027 00159$:
                                   2028 ;	./src/angry_bird.c:421: if (pig_amt == 0 || bird_amt == 0)
      0009CA E5*0A            [12] 2029 	mov	a,_pig_amt
      0009CC 45*0B            [12] 2030 	orl	a,(_pig_amt + 1)
      0009CE 60 09            [24] 2031 	jz	00170$
      0009D0 E5*08            [12] 2032 	mov	a,_bird_amt
      0009D2 45*09            [12] 2033 	orl	a,(_bird_amt + 1)
      0009D4 60 03            [24] 2034 	jz	00758$
      0009D6 02r0Br26         [24] 2035 	ljmp	00171$
      0009D9                       2036 00758$:
      0009D9                       2037 00170$:
                                   2038 ;	./src/angry_bird.c:423: if (pig_amt == 0)
      0009D9 E5*0A            [12] 2039 	mov	a,_pig_amt
      0009DB 45*0B            [12] 2040 	orl	a,(_pig_amt + 1)
      0009DD 60 03            [24] 2041 	jz	00759$
      0009DF 02r0Ar78         [24] 2042 	ljmp	00168$
      0009E2                       2043 00759$:
                                   2044 ;	./src/angry_bird.c:425: OLED_SetCursor(win_row_cursor, win_col_cursor);
      0009E2 75*00 1F         [24] 2045 	mov	_OLED_SetCursor_PARM_2,#0x1f
      0009E5 75 82 03         [24] 2046 	mov	dpl,#0x03
      0009E8 12r00r00         [24] 2047 	lcall	_OLED_SetCursor
                                   2048 ;	./src/angry_bird.c:426: for (int j = 0; j < win_cul_size; j++)
      0009EB 7E 00            [12] 2049 	mov	r6,#0x00
      0009ED 7F 00            [12] 2050 	mov	r7,#0x00
      0009EF                       2051 00216$:
      0009EF C3               [12] 2052 	clr	c
      0009F0 EE               [12] 2053 	mov	a,r6
      0009F1 94 40            [12] 2054 	subb	a,#0x40
      0009F3 EF               [12] 2055 	mov	a,r7
      0009F4 64 80            [12] 2056 	xrl	a,#0x80
      0009F6 94 80            [12] 2057 	subb	a,#0x80
      0009F8 40 03            [24] 2058 	jc	00760$
      0009FA 02r0Br14         [24] 2059 	ljmp	00169$
      0009FD                       2060 00760$:
                                   2061 ;	./src/angry_bird.c:428: for (int i = 0; i < win_row_size; i++)
      0009FD 7C 00            [12] 2062 	mov	r4,#0x00
      0009FF 7D 00            [12] 2063 	mov	r5,#0x00
      000A01                       2064 00213$:
      000A01 C3               [12] 2065 	clr	c
      000A02 EC               [12] 2066 	mov	a,r4
      000A03 94 02            [12] 2067 	subb	a,#0x02
      000A05 ED               [12] 2068 	mov	a,r5
      000A06 64 80            [12] 2069 	xrl	a,#0x80
      000A08 94 80            [12] 2070 	subb	a,#0x80
      000A0A 50 64            [24] 2071 	jnc	00217$
                                   2072 ;	./src/angry_bird.c:430: OLED_SetCursor(row_offset + i, col_offset + j);
      000A0C AB*04            [24] 2073 	mov	r3,_row_offset
      000A0E 8C 02            [24] 2074 	mov	ar2,r4
      000A10 EA               [12] 2075 	mov	a,r2
      000A11 2B               [12] 2076 	add	a,r3
      000A12 F5 82            [12] 2077 	mov	dpl,a
      000A14 AB*06            [24] 2078 	mov	r3,_col_offset
      000A16 8E 02            [24] 2079 	mov	ar2,r6
      000A18 EA               [12] 2080 	mov	a,r2
      000A19 2B               [12] 2081 	add	a,r3
      000A1A F5*00            [12] 2082 	mov	_OLED_SetCursor_PARM_2,a
      000A1C C0 07            [24] 2083 	push	ar7
      000A1E C0 06            [24] 2084 	push	ar6
      000A20 C0 05            [24] 2085 	push	ar5
      000A22 C0 04            [24] 2086 	push	ar4
      000A24 12r00r00         [24] 2087 	lcall	_OLED_SetCursor
      000A27 D0 04            [24] 2088 	pop	ar4
      000A29 D0 05            [24] 2089 	pop	ar5
      000A2B D0 06            [24] 2090 	pop	ar6
      000A2D D0 07            [24] 2091 	pop	ar7
                                   2092 ;	./src/angry_bird.c:431: oledSendData(win_page[win_cul_size * i + j]);
      000A2F 8C 02            [24] 2093 	mov	ar2,r4
      000A31 ED               [12] 2094 	mov	a,r5
      000A32 54 03            [12] 2095 	anl	a,#0x03
      000A34 A2 E0            [12] 2096 	mov	c,acc.0
      000A36 CA               [12] 2097 	xch	a,r2
      000A37 13               [12] 2098 	rrc	a
      000A38 CA               [12] 2099 	xch	a,r2
      000A39 13               [12] 2100 	rrc	a
      000A3A A2 E0            [12] 2101 	mov	c,acc.0
      000A3C CA               [12] 2102 	xch	a,r2
      000A3D 13               [12] 2103 	rrc	a
      000A3E CA               [12] 2104 	xch	a,r2
      000A3F 13               [12] 2105 	rrc	a
      000A40 CA               [12] 2106 	xch	a,r2
      000A41 FB               [12] 2107 	mov	r3,a
      000A42 EE               [12] 2108 	mov	a,r6
      000A43 2A               [12] 2109 	add	a,r2
      000A44 FA               [12] 2110 	mov	r2,a
      000A45 EF               [12] 2111 	mov	a,r7
      000A46 3B               [12] 2112 	addc	a,r3
      000A47 FB               [12] 2113 	mov	r3,a
      000A48 EA               [12] 2114 	mov	a,r2
      000A49 24r30            [12] 2115 	add	a,#_win_page
      000A4B F5 82            [12] 2116 	mov	dpl,a
      000A4D EB               [12] 2117 	mov	a,r3
      000A4E 34s00            [12] 2118 	addc	a,#(_win_page >> 8)
      000A50 F5 83            [12] 2119 	mov	dph,a
      000A52 E4               [12] 2120 	clr	a
      000A53 93               [24] 2121 	movc	a,@a+dptr
      000A54 F5 82            [12] 2122 	mov	dpl,a
      000A56 C0 07            [24] 2123 	push	ar7
      000A58 C0 06            [24] 2124 	push	ar6
      000A5A C0 05            [24] 2125 	push	ar5
      000A5C C0 04            [24] 2126 	push	ar4
      000A5E 12r00r00         [24] 2127 	lcall	_oledSendData
      000A61 D0 04            [24] 2128 	pop	ar4
      000A63 D0 05            [24] 2129 	pop	ar5
      000A65 D0 06            [24] 2130 	pop	ar6
      000A67 D0 07            [24] 2131 	pop	ar7
                                   2132 ;	./src/angry_bird.c:428: for (int i = 0; i < win_row_size; i++)
      000A69 0C               [12] 2133 	inc	r4
      000A6A BC 00 94         [24] 2134 	cjne	r4,#0x00,00213$
      000A6D 0D               [12] 2135 	inc	r5
      000A6E 80 91            [24] 2136 	sjmp	00213$
      000A70                       2137 00217$:
                                   2138 ;	./src/angry_bird.c:426: for (int j = 0; j < win_cul_size; j++)
      000A70 0E               [12] 2139 	inc	r6
      000A71 BE 00 01         [24] 2140 	cjne	r6,#0x00,00763$
      000A74 0F               [12] 2141 	inc	r7
      000A75                       2142 00763$:
      000A75 02r09rEF         [24] 2143 	ljmp	00216$
      000A78                       2144 00168$:
                                   2145 ;	./src/angry_bird.c:435: else if (bird_amt == 0)
      000A78 E5*08            [12] 2146 	mov	a,_bird_amt
      000A7A 45*09            [12] 2147 	orl	a,(_bird_amt + 1)
      000A7C 60 03            [24] 2148 	jz	00764$
      000A7E 02r0Br14         [24] 2149 	ljmp	00169$
      000A81                       2150 00764$:
                                   2151 ;	./src/angry_bird.c:437: OLED_SetCursor(over_row_cursor, over_col_cursor);
      000A81 75*00 1F         [24] 2152 	mov	_OLED_SetCursor_PARM_2,#0x1f
      000A84 75 82 03         [24] 2153 	mov	dpl,#0x03
      000A87 12r00r00         [24] 2154 	lcall	_OLED_SetCursor
                                   2155 ;	./src/angry_bird.c:438: for (int j = 0; j < over_cul_size; j++)
      000A8A 7E 00            [12] 2156 	mov	r6,#0x00
      000A8C 7F 00            [12] 2157 	mov	r7,#0x00
      000A8E                       2158 00222$:
      000A8E C3               [12] 2159 	clr	c
      000A8F EE               [12] 2160 	mov	a,r6
      000A90 94 40            [12] 2161 	subb	a,#0x40
      000A92 EF               [12] 2162 	mov	a,r7
      000A93 64 80            [12] 2163 	xrl	a,#0x80
      000A95 94 80            [12] 2164 	subb	a,#0x80
      000A97 50 7B            [24] 2165 	jnc	00169$
                                   2166 ;	./src/angry_bird.c:440: for (int i = 0; i < over_row_size; i++)
      000A99 7C 00            [12] 2167 	mov	r4,#0x00
      000A9B 7D 00            [12] 2168 	mov	r5,#0x00
      000A9D                       2169 00219$:
      000A9D C3               [12] 2170 	clr	c
      000A9E EC               [12] 2171 	mov	a,r4
      000A9F 94 02            [12] 2172 	subb	a,#0x02
      000AA1 ED               [12] 2173 	mov	a,r5
      000AA2 64 80            [12] 2174 	xrl	a,#0x80
      000AA4 94 80            [12] 2175 	subb	a,#0x80
      000AA6 50 64            [24] 2176 	jnc	00223$
                                   2177 ;	./src/angry_bird.c:442: OLED_SetCursor(row_offset + i, col_offset + j);
      000AA8 AB*04            [24] 2178 	mov	r3,_row_offset
      000AAA 8C 02            [24] 2179 	mov	ar2,r4
      000AAC EA               [12] 2180 	mov	a,r2
      000AAD 2B               [12] 2181 	add	a,r3
      000AAE F5 82            [12] 2182 	mov	dpl,a
      000AB0 AB*06            [24] 2183 	mov	r3,_col_offset
      000AB2 8E 02            [24] 2184 	mov	ar2,r6
      000AB4 EA               [12] 2185 	mov	a,r2
      000AB5 2B               [12] 2186 	add	a,r3
      000AB6 F5*00            [12] 2187 	mov	_OLED_SetCursor_PARM_2,a
      000AB8 C0 07            [24] 2188 	push	ar7
      000ABA C0 06            [24] 2189 	push	ar6
      000ABC C0 05            [24] 2190 	push	ar5
      000ABE C0 04            [24] 2191 	push	ar4
      000AC0 12r00r00         [24] 2192 	lcall	_OLED_SetCursor
      000AC3 D0 04            [24] 2193 	pop	ar4
      000AC5 D0 05            [24] 2194 	pop	ar5
      000AC7 D0 06            [24] 2195 	pop	ar6
      000AC9 D0 07            [24] 2196 	pop	ar7
                                   2197 ;	./src/angry_bird.c:443: oledSendData(over_page[over_cul_size * i + j]);
      000ACB 8C 02            [24] 2198 	mov	ar2,r4
      000ACD ED               [12] 2199 	mov	a,r5
      000ACE 54 03            [12] 2200 	anl	a,#0x03
      000AD0 A2 E0            [12] 2201 	mov	c,acc.0
      000AD2 CA               [12] 2202 	xch	a,r2
      000AD3 13               [12] 2203 	rrc	a
      000AD4 CA               [12] 2204 	xch	a,r2
      000AD5 13               [12] 2205 	rrc	a
      000AD6 A2 E0            [12] 2206 	mov	c,acc.0
      000AD8 CA               [12] 2207 	xch	a,r2
      000AD9 13               [12] 2208 	rrc	a
      000ADA CA               [12] 2209 	xch	a,r2
      000ADB 13               [12] 2210 	rrc	a
      000ADC CA               [12] 2211 	xch	a,r2
      000ADD FB               [12] 2212 	mov	r3,a
      000ADE EE               [12] 2213 	mov	a,r6
      000ADF 2A               [12] 2214 	add	a,r2
      000AE0 FA               [12] 2215 	mov	r2,a
      000AE1 EF               [12] 2216 	mov	a,r7
      000AE2 3B               [12] 2217 	addc	a,r3
      000AE3 FB               [12] 2218 	mov	r3,a
      000AE4 EA               [12] 2219 	mov	a,r2
      000AE5 24rB0            [12] 2220 	add	a,#_over_page
      000AE7 F5 82            [12] 2221 	mov	dpl,a
      000AE9 EB               [12] 2222 	mov	a,r3
      000AEA 34s00            [12] 2223 	addc	a,#(_over_page >> 8)
      000AEC F5 83            [12] 2224 	mov	dph,a
      000AEE E4               [12] 2225 	clr	a
      000AEF 93               [24] 2226 	movc	a,@a+dptr
      000AF0 F5 82            [12] 2227 	mov	dpl,a
      000AF2 C0 07            [24] 2228 	push	ar7
      000AF4 C0 06            [24] 2229 	push	ar6
      000AF6 C0 05            [24] 2230 	push	ar5
      000AF8 C0 04            [24] 2231 	push	ar4
      000AFA 12r00r00         [24] 2232 	lcall	_oledSendData
      000AFD D0 04            [24] 2233 	pop	ar4
      000AFF D0 05            [24] 2234 	pop	ar5
      000B01 D0 06            [24] 2235 	pop	ar6
      000B03 D0 07            [24] 2236 	pop	ar7
                                   2237 ;	./src/angry_bird.c:440: for (int i = 0; i < over_row_size; i++)
      000B05 0C               [12] 2238 	inc	r4
      000B06 BC 00 94         [24] 2239 	cjne	r4,#0x00,00219$
      000B09 0D               [12] 2240 	inc	r5
      000B0A 80 91            [24] 2241 	sjmp	00219$
      000B0C                       2242 00223$:
                                   2243 ;	./src/angry_bird.c:438: for (int j = 0; j < over_cul_size; j++)
      000B0C 0E               [12] 2244 	inc	r6
      000B0D BE 00 01         [24] 2245 	cjne	r6,#0x00,00768$
      000B10 0F               [12] 2246 	inc	r7
      000B11                       2247 00768$:
      000B11 02r0Ar8E         [24] 2248 	ljmp	00222$
      000B14                       2249 00169$:
                                   2250 ;	./src/angry_bird.c:447: delay_ms(1000);
      000B14 90 03 E8         [24] 2251 	mov	dptr,#0x03e8
      000B17 12r00r00         [24] 2252 	lcall	_delay_ms
                                   2253 ;	./src/angry_bird.c:448: cur_state = STATE_HOME;
      000B1A 75*1D 01         [24] 2254 	mov	_cur_state,#0x01
      000B1D 75*1E 00         [24] 2255 	mov	(_cur_state + 1),#0x00
                                   2256 ;	./src/angry_bird.c:450: send_data = cur_state;
      000B20 75*00 01         [24] 2257 	mov	_send_data,#0x01
                                   2258 ;	./src/angry_bird.c:451: send_flag = 1;
      000B23 75*01 01         [24] 2259 	mov	_send_flag,#0x01
      000B26                       2260 00171$:
                                   2261 ;	./src/angry_bird.c:455: prebut_enter = but_enter;
      000B26 A2 A2            [12] 2262 	mov	c,_P2_2
      000B28 E4               [12] 2263 	clr	a
      000B29 33               [12] 2264 	rlc	a
      000B2A F5*27            [12] 2265 	mov	_prebut_enter,a
      000B2C 75*28 00         [24] 2266 	mov	(_prebut_enter + 1),#0x00
                                   2267 ;	./src/angry_bird.c:456: prebut_up = but_up;
      000B2F A2 A0            [12] 2268 	mov	c,_P2_0
      000B31 E4               [12] 2269 	clr	a
      000B32 33               [12] 2270 	rlc	a
      000B33 F5*1F            [12] 2271 	mov	_prebut_up,a
      000B35 75*20 00         [24] 2272 	mov	(_prebut_up + 1),#0x00
                                   2273 ;	./src/angry_bird.c:457: prebut_down = but_down;
      000B38 A2 A1            [12] 2274 	mov	c,_P2_1
      000B3A E4               [12] 2275 	clr	a
      000B3B 33               [12] 2276 	rlc	a
      000B3C F5*21            [12] 2277 	mov	_prebut_down,a
      000B3E 75*22 00         [24] 2278 	mov	(_prebut_down + 1),#0x00
                                   2279 ;	./src/angry_bird.c:458: prebut_left = but_left;
      000B41 A2 B2            [12] 2280 	mov	c,_INT0
      000B43 E4               [12] 2281 	clr	a
      000B44 33               [12] 2282 	rlc	a
      000B45 F5*23            [12] 2283 	mov	_prebut_left,a
      000B47 75*24 00         [24] 2284 	mov	(_prebut_left + 1),#0x00
                                   2285 ;	./src/angry_bird.c:459: prebut_right = but_right;
      000B4A A2 B3            [12] 2286 	mov	c,_INT1
      000B4C E4               [12] 2287 	clr	a
      000B4D 33               [12] 2288 	rlc	a
      000B4E F5*25            [12] 2289 	mov	_prebut_right,a
      000B50 75*26 00         [24] 2290 	mov	(_prebut_right + 1),#0x00
                                   2291 ;	./src/angry_bird.c:460: delay_ms(10);
      000B53 90 00 0A         [24] 2292 	mov	dptr,#0x000a
                                   2293 ;	./src/angry_bird.c:461: }
      000B56 02r00r00         [24] 2294 	ljmp	_delay_ms
                                   2295 ;------------------------------------------------------------
                                   2296 ;Allocation info for local variables in function 'getsine'
                                   2297 ;------------------------------------------------------------
                                   2298 ;angle                     Allocated to registers r6 r7 
                                   2299 ;index                     Allocated to registers r6 r7 
                                   2300 ;------------------------------------------------------------
                                   2301 ;	./src/angry_bird.c:467: float getsine(int angle)
                                   2302 ;	-----------------------------------------
                                   2303 ;	 function getsine
                                   2304 ;	-----------------------------------------
      000B59                       2305 _getsine:
      000B59 AE 82            [24] 2306 	mov	r6,dpl
      000B5B AF 83            [24] 2307 	mov	r7,dph
                                   2308 ;	./src/angry_bird.c:469: int index = (angle > 0) ? (angle / 10) : (-angle / 10);
      000B5D C3               [12] 2309 	clr	c
      000B5E E4               [12] 2310 	clr	a
      000B5F 9E               [12] 2311 	subb	a,r6
      000B60 74 80            [12] 2312 	mov	a,#(0x00 ^ 0x80)
      000B62 8F F0            [24] 2313 	mov	b,r7
      000B64 63 F0 80         [24] 2314 	xrl	b,#0x80
      000B67 95 F0            [12] 2315 	subb	a,b
      000B69 E4               [12] 2316 	clr	a
      000B6A 33               [12] 2317 	rlc	a
      000B6B FD               [12] 2318 	mov	r5,a
      000B6C 60 17            [24] 2319 	jz	00103$
      000B6E 75*00 0A         [24] 2320 	mov	__divsint_PARM_2,#0x0a
      000B71 75*01 00         [24] 2321 	mov	(__divsint_PARM_2 + 1),#0x00
      000B74 8E 82            [24] 2322 	mov	dpl,r6
      000B76 8F 83            [24] 2323 	mov	dph,r7
      000B78 C0 05            [24] 2324 	push	ar5
      000B7A 12r00r00         [24] 2325 	lcall	__divsint
      000B7D AB 82            [24] 2326 	mov	r3,dpl
      000B7F AC 83            [24] 2327 	mov	r4,dph
      000B81 D0 05            [24] 2328 	pop	ar5
      000B83 80 1A            [24] 2329 	sjmp	00104$
      000B85                       2330 00103$:
      000B85 C3               [12] 2331 	clr	c
      000B86 E4               [12] 2332 	clr	a
      000B87 9E               [12] 2333 	subb	a,r6
      000B88 F5 82            [12] 2334 	mov	dpl,a
      000B8A E4               [12] 2335 	clr	a
      000B8B 9F               [12] 2336 	subb	a,r7
      000B8C F5 83            [12] 2337 	mov	dph,a
      000B8E 75*00 0A         [24] 2338 	mov	__divsint_PARM_2,#0x0a
      000B91 75*01 00         [24] 2339 	mov	(__divsint_PARM_2 + 1),#0x00
      000B94 C0 05            [24] 2340 	push	ar5
      000B96 12r00r00         [24] 2341 	lcall	__divsint
      000B99 AB 82            [24] 2342 	mov	r3,dpl
      000B9B AC 83            [24] 2343 	mov	r4,dph
      000B9D D0 05            [24] 2344 	pop	ar5
      000B9F                       2345 00104$:
      000B9F 8B 06            [24] 2346 	mov	ar6,r3
      000BA1 8C 07            [24] 2347 	mov	ar7,r4
                                   2348 ;	./src/angry_bird.c:470: return (angle > 0) ? sine_table[index] : -sine_table[index];
      000BA3 ED               [12] 2349 	mov	a,r5
      000BA4 60 27            [24] 2350 	jz	00105$
      000BA6 EE               [12] 2351 	mov	a,r6
      000BA7 2E               [12] 2352 	add	a,r6
      000BA8 FC               [12] 2353 	mov	r4,a
      000BA9 EF               [12] 2354 	mov	a,r7
      000BAA 33               [12] 2355 	rlc	a
      000BAB FD               [12] 2356 	mov	r5,a
      000BAC EC               [12] 2357 	mov	a,r4
      000BAD 2C               [12] 2358 	add	a,r4
      000BAE FC               [12] 2359 	mov	r4,a
      000BAF ED               [12] 2360 	mov	a,r5
      000BB0 33               [12] 2361 	rlc	a
      000BB1 FD               [12] 2362 	mov	r5,a
      000BB2 EC               [12] 2363 	mov	a,r4
      000BB3 24r62            [12] 2364 	add	a,#_sine_table
      000BB5 F5 82            [12] 2365 	mov	dpl,a
      000BB7 ED               [12] 2366 	mov	a,r5
      000BB8 34s0C            [12] 2367 	addc	a,#(_sine_table >> 8)
      000BBA F5 83            [12] 2368 	mov	dph,a
      000BBC E4               [12] 2369 	clr	a
      000BBD 93               [24] 2370 	movc	a,@a+dptr
      000BBE FA               [12] 2371 	mov	r2,a
      000BBF A3               [24] 2372 	inc	dptr
      000BC0 E4               [12] 2373 	clr	a
      000BC1 93               [24] 2374 	movc	a,@a+dptr
      000BC2 FB               [12] 2375 	mov	r3,a
      000BC3 A3               [24] 2376 	inc	dptr
      000BC4 E4               [12] 2377 	clr	a
      000BC5 93               [24] 2378 	movc	a,@a+dptr
      000BC6 FC               [12] 2379 	mov	r4,a
      000BC7 A3               [24] 2380 	inc	dptr
      000BC8 E4               [12] 2381 	clr	a
      000BC9 93               [24] 2382 	movc	a,@a+dptr
      000BCA FD               [12] 2383 	mov	r5,a
      000BCB 80 2F            [24] 2384 	sjmp	00106$
      000BCD                       2385 00105$:
      000BCD EE               [12] 2386 	mov	a,r6
      000BCE 2E               [12] 2387 	add	a,r6
      000BCF FE               [12] 2388 	mov	r6,a
      000BD0 EF               [12] 2389 	mov	a,r7
      000BD1 33               [12] 2390 	rlc	a
      000BD2 FF               [12] 2391 	mov	r7,a
      000BD3 EE               [12] 2392 	mov	a,r6
      000BD4 2E               [12] 2393 	add	a,r6
      000BD5 FE               [12] 2394 	mov	r6,a
      000BD6 EF               [12] 2395 	mov	a,r7
      000BD7 33               [12] 2396 	rlc	a
      000BD8 FF               [12] 2397 	mov	r7,a
      000BD9 EE               [12] 2398 	mov	a,r6
      000BDA 24r62            [12] 2399 	add	a,#_sine_table
      000BDC F5 82            [12] 2400 	mov	dpl,a
      000BDE EF               [12] 2401 	mov	a,r7
      000BDF 34s0C            [12] 2402 	addc	a,#(_sine_table >> 8)
      000BE1 F5 83            [12] 2403 	mov	dph,a
      000BE3 E4               [12] 2404 	clr	a
      000BE4 93               [24] 2405 	movc	a,@a+dptr
      000BE5 F8               [12] 2406 	mov	r0,a
      000BE6 A3               [24] 2407 	inc	dptr
      000BE7 E4               [12] 2408 	clr	a
      000BE8 93               [24] 2409 	movc	a,@a+dptr
      000BE9 F9               [12] 2410 	mov	r1,a
      000BEA A3               [24] 2411 	inc	dptr
      000BEB E4               [12] 2412 	clr	a
      000BEC 93               [24] 2413 	movc	a,@a+dptr
      000BED FE               [12] 2414 	mov	r6,a
      000BEE A3               [24] 2415 	inc	dptr
      000BEF E4               [12] 2416 	clr	a
      000BF0 93               [24] 2417 	movc	a,@a+dptr
      000BF1 FF               [12] 2418 	mov	r7,a
      000BF2 88 02            [24] 2419 	mov	ar2,r0
      000BF4 89 03            [24] 2420 	mov	ar3,r1
      000BF6 8E 04            [24] 2421 	mov	ar4,r6
      000BF8 EF               [12] 2422 	mov	a,r7
      000BF9 B2 E7            [12] 2423 	cpl	acc.7
      000BFB FD               [12] 2424 	mov	r5,a
      000BFC                       2425 00106$:
      000BFC 8A 82            [24] 2426 	mov	dpl,r2
      000BFE 8B 83            [24] 2427 	mov	dph,r3
      000C00 8C F0            [24] 2428 	mov	b,r4
      000C02 ED               [12] 2429 	mov	a,r5
                                   2430 ;	./src/angry_bird.c:471: }
      000C03 22               [24] 2431 	ret
                                   2432 ;------------------------------------------------------------
                                   2433 ;Allocation info for local variables in function 'getcosine'
                                   2434 ;------------------------------------------------------------
                                   2435 ;angle                     Allocated to registers r6 r7 
                                   2436 ;------------------------------------------------------------
                                   2437 ;	./src/angry_bird.c:472: float getcosine(int angle)
                                   2438 ;	-----------------------------------------
                                   2439 ;	 function getcosine
                                   2440 ;	-----------------------------------------
      000C04                       2441 _getcosine:
      000C04 AE 82            [24] 2442 	mov	r6,dpl
      000C06 AF 83            [24] 2443 	mov	r7,dph
                                   2444 ;	./src/angry_bird.c:474: return getsine((angle > 0) ? -angle + 90 : angle + 90);
      000C08 C3               [12] 2445 	clr	c
      000C09 E4               [12] 2446 	clr	a
      000C0A 9E               [12] 2447 	subb	a,r6
      000C0B 74 80            [12] 2448 	mov	a,#(0x00 ^ 0x80)
      000C0D 8F F0            [24] 2449 	mov	b,r7
      000C0F 63 F0 80         [24] 2450 	xrl	b,#0x80
      000C12 95 F0            [12] 2451 	subb	a,b
      000C14 50 10            [24] 2452 	jnc	00103$
      000C16 C3               [12] 2453 	clr	c
      000C17 E4               [12] 2454 	clr	a
      000C18 9E               [12] 2455 	subb	a,r6
      000C19 FC               [12] 2456 	mov	r4,a
      000C1A E4               [12] 2457 	clr	a
      000C1B 9F               [12] 2458 	subb	a,r7
      000C1C FD               [12] 2459 	mov	r5,a
      000C1D 74 5A            [12] 2460 	mov	a,#0x5a
      000C1F 2C               [12] 2461 	add	a,r4
      000C20 FC               [12] 2462 	mov	r4,a
      000C21 E4               [12] 2463 	clr	a
      000C22 3D               [12] 2464 	addc	a,r5
      000C23 FD               [12] 2465 	mov	r5,a
      000C24 80 07            [24] 2466 	sjmp	00104$
      000C26                       2467 00103$:
      000C26 74 5A            [12] 2468 	mov	a,#0x5a
      000C28 2E               [12] 2469 	add	a,r6
      000C29 FC               [12] 2470 	mov	r4,a
      000C2A E4               [12] 2471 	clr	a
      000C2B 3F               [12] 2472 	addc	a,r7
      000C2C FD               [12] 2473 	mov	r5,a
      000C2D                       2474 00104$:
      000C2D 8C 82            [24] 2475 	mov	dpl,r4
      000C2F 8D 83            [24] 2476 	mov	dph,r5
                                   2477 ;	./src/angry_bird.c:475: }
      000C31 02r0Br59         [24] 2478 	ljmp	_getsine
                                   2479 ;------------------------------------------------------------
                                   2480 ;Allocation info for local variables in function 'pow_2'
                                   2481 ;------------------------------------------------------------
                                   2482 ;n                         Allocated to registers r4 r5 r6 r7 
                                   2483 ;------------------------------------------------------------
                                   2484 ;	./src/angry_bird.c:476: float pow_2(float n)
                                   2485 ;	-----------------------------------------
                                   2486 ;	 function pow_2
                                   2487 ;	-----------------------------------------
      000C34                       2488 _pow_2:
      000C34 AC 82            [24] 2489 	mov	r4,dpl
      000C36 AD 83            [24] 2490 	mov	r5,dph
      000C38 AE F0            [24] 2491 	mov	r6,b
      000C3A FF               [12] 2492 	mov	r7,a
                                   2493 ;	./src/angry_bird.c:478: return n * n;
      000C3B C0 04            [24] 2494 	push	ar4
      000C3D C0 05            [24] 2495 	push	ar5
      000C3F C0 06            [24] 2496 	push	ar6
      000C41 C0 07            [24] 2497 	push	ar7
      000C43 8C 82            [24] 2498 	mov	dpl,r4
      000C45 8D 83            [24] 2499 	mov	dph,r5
      000C47 8E F0            [24] 2500 	mov	b,r6
      000C49 EF               [12] 2501 	mov	a,r7
      000C4A 12r00r00         [24] 2502 	lcall	___fsmul
      000C4D AC 82            [24] 2503 	mov	r4,dpl
      000C4F AD 83            [24] 2504 	mov	r5,dph
      000C51 AE F0            [24] 2505 	mov	r6,b
      000C53 FF               [12] 2506 	mov	r7,a
      000C54 E5 81            [12] 2507 	mov	a,sp
      000C56 24 FC            [12] 2508 	add	a,#0xfc
      000C58 F5 81            [12] 2509 	mov	sp,a
      000C5A 8C 82            [24] 2510 	mov	dpl,r4
      000C5C 8D 83            [24] 2511 	mov	dph,r5
      000C5E 8E F0            [24] 2512 	mov	b,r6
      000C60 EF               [12] 2513 	mov	a,r7
                                   2514 ;	./src/angry_bird.c:479: }
      000C61 22               [24] 2515 	ret
                                   2516 	.area CSEG    (CODE)
                                   2517 	.area CONST   (CODE)
      000000                       2518 _shooter_logo:
      000000 00                    2519 	.db #0x00	; 0
      000001 FF                    2520 	.db #0xff	; 255
      000002 FF                    2521 	.db #0xff	; 255
      000003 F6                    2522 	.db #0xf6	; 246
      000004 00                    2523 	.db #0x00	; 0
      000005 FE                    2524 	.db #0xfe	; 254
      000006 FF                    2525 	.db #0xff	; 255
      000007 FE                    2526 	.db #0xfe	; 254
      000008 00                    2527 	.db #0x00	; 0
      000009 01                    2528 	.db #0x01	; 1
      00000A 07                    2529 	.db #0x07	; 7
      00000B FF                    2530 	.db #0xff	; 255
      00000C FE                    2531 	.db #0xfe	; 254
      00000D FF                    2532 	.db #0xff	; 255
      00000E 07                    2533 	.db #0x07	; 7
      00000F 00                    2534 	.db #0x00	; 0
      000010                       2535 _pig_logo:
      000010 C0                    2536 	.db #0xc0	; 192
      000011 30                    2537 	.db #0x30	; 48	'0'
      000012 38                    2538 	.db #0x38	; 56	'8'
      000013 FC                    2539 	.db #0xfc	; 252
      000014 FF                    2540 	.db #0xff	; 255
      000015 FF                    2541 	.db #0xff	; 255
      000016 FC                    2542 	.db #0xfc	; 252
      000017 FC                    2543 	.db #0xfc	; 252
      000018 3E                    2544 	.db #0x3e	; 62
      000019 3E                    2545 	.db #0x3e	; 62
      00001A F0                    2546 	.db #0xf0	; 240
      00001B C0                    2547 	.db #0xc0	; 192
      00001C 01                    2548 	.db #0x01	; 1
      00001D 03                    2549 	.db #0x03	; 3
      00001E 07                    2550 	.db #0x07	; 7
      00001F 0F                    2551 	.db #0x0f	; 15
      000020 0F                    2552 	.db #0x0f	; 15
      000021 0F                    2553 	.db #0x0f	; 15
      000022 0F                    2554 	.db #0x0f	; 15
      000023 0F                    2555 	.db #0x0f	; 15
      000024 0F                    2556 	.db #0x0f	; 15
      000025 07                    2557 	.db #0x07	; 7
      000026 03                    2558 	.db #0x03	; 3
      000027 01                    2559 	.db #0x01	; 1
      000028                       2560 _bird_logo:
      000028 7E                    2561 	.db #0x7e	; 126
      000029 C3                    2562 	.db #0xc3	; 195
      00002A 81                    2563 	.db #0x81	; 129
      00002B 81                    2564 	.db #0x81	; 129
      00002C 81                    2565 	.db #0x81	; 129
      00002D 81                    2566 	.db #0x81	; 129
      00002E C3                    2567 	.db #0xc3	; 195
      00002F 7E                    2568 	.db #0x7e	; 126
      000030                       2569 _win_page:
      000030 00                    2570 	.db #0x00	; 0
      000031 00                    2571 	.db #0x00	; 0
      000032 00                    2572 	.db #0x00	; 0
      000033 00                    2573 	.db #0x00	; 0
      000034 00                    2574 	.db #0x00	; 0
      000035 00                    2575 	.db #0x00	; 0
      000036 00                    2576 	.db #0x00	; 0
      000037 00                    2577 	.db #0x00	; 0
      000038 00                    2578 	.db #0x00	; 0
      000039 00                    2579 	.db #0x00	; 0
      00003A 01                    2580 	.db #0x01	; 1
      00003B 1F                    2581 	.db #0x1f	; 31
      00003C FF                    2582 	.db #0xff	; 255
      00003D FF                    2583 	.db #0xff	; 255
      00003E F0                    2584 	.db #0xf0	; 240
      00003F E0                    2585 	.db #0xe0	; 224
      000040 FC                    2586 	.db #0xfc	; 252
      000041 FF                    2587 	.db #0xff	; 255
      000042 1F                    2588 	.db #0x1f	; 31
      000043 3F                    2589 	.db #0x3f	; 63
      000044 FF                    2590 	.db #0xff	; 255
      000045 F8                    2591 	.db #0xf8	; 248
      000046 E0                    2592 	.db #0xe0	; 224
      000047 FC                    2593 	.db #0xfc	; 252
      000048 FF                    2594 	.db #0xff	; 255
      000049 7F                    2595 	.db #0x7f	; 127
      00004A 07                    2596 	.db #0x07	; 7
      00004B 00                    2597 	.db #0x00	; 0
      00004C 00                    2598 	.db #0x00	; 0
      00004D FF                    2599 	.db #0xff	; 255
      00004E FF                    2600 	.db #0xff	; 255
      00004F FF                    2601 	.db #0xff	; 255
      000050 00                    2602 	.db #0x00	; 0
      000051 00                    2603 	.db #0x00	; 0
      000052 00                    2604 	.db #0x00	; 0
      000053 FF                    2605 	.db #0xff	; 255
      000054 FF                    2606 	.db #0xff	; 255
      000055 FF                    2607 	.db #0xff	; 255
      000056 FF                    2608 	.db #0xff	; 255
      000057 3E                    2609 	.db #0x3e	; 62
      000058 7C                    2610 	.db #0x7c	; 124
      000059 F0                    2611 	.db #0xf0	; 240
      00005A E0                    2612 	.db #0xe0	; 224
      00005B FF                    2613 	.db #0xff	; 255
      00005C FF                    2614 	.db #0xff	; 255
      00005D FF                    2615 	.db #0xff	; 255
      00005E FF                    2616 	.db #0xff	; 255
      00005F 00                    2617 	.db #0x00	; 0
      000060 00                    2618 	.db #0x00	; 0
      000061 0F                    2619 	.db #0x0f	; 15
      000062 7F                    2620 	.db #0x7f	; 127
      000063 7F                    2621 	.db #0x7f	; 127
      000064 1F                    2622 	.db #0x1f	; 31
      000065 00                    2623 	.db #0x00	; 0
      000066 00                    2624 	.db #0x00	; 0
      000067 00                    2625 	.db #0x00	; 0
      000068 00                    2626 	.db #0x00	; 0
      000069 00                    2627 	.db #0x00	; 0
      00006A 00                    2628 	.db #0x00	; 0
      00006B 00                    2629 	.db #0x00	; 0
      00006C 00                    2630 	.db #0x00	; 0
      00006D 00                    2631 	.db #0x00	; 0
      00006E 00                    2632 	.db #0x00	; 0
      00006F 00                    2633 	.db #0x00	; 0
      000070 00                    2634 	.db #0x00	; 0
      000071 00                    2635 	.db #0x00	; 0
      000072 00                    2636 	.db #0x00	; 0
      000073 00                    2637 	.db #0x00	; 0
      000074 00                    2638 	.db #0x00	; 0
      000075 00                    2639 	.db #0x00	; 0
      000076 00                    2640 	.db #0x00	; 0
      000077 00                    2641 	.db #0x00	; 0
      000078 00                    2642 	.db #0x00	; 0
      000079 00                    2643 	.db #0x00	; 0
      00007A 00                    2644 	.db #0x00	; 0
      00007B 00                    2645 	.db #0x00	; 0
      00007C 01                    2646 	.db #0x01	; 1
      00007D 07                    2647 	.db #0x07	; 7
      00007E 07                    2648 	.db #0x07	; 7
      00007F 07                    2649 	.db #0x07	; 7
      000080 07                    2650 	.db #0x07	; 7
      000081 00                    2651 	.db #0x00	; 0
      000082 00                    2652 	.db #0x00	; 0
      000083 00                    2653 	.db #0x00	; 0
      000084 03                    2654 	.db #0x03	; 3
      000085 07                    2655 	.db #0x07	; 7
      000086 07                    2656 	.db #0x07	; 7
      000087 07                    2657 	.db #0x07	; 7
      000088 07                    2658 	.db #0x07	; 7
      000089 00                    2659 	.db #0x00	; 0
      00008A 00                    2660 	.db #0x00	; 0
      00008B 00                    2661 	.db #0x00	; 0
      00008C 00                    2662 	.db #0x00	; 0
      00008D 07                    2663 	.db #0x07	; 7
      00008E 07                    2664 	.db #0x07	; 7
      00008F 07                    2665 	.db #0x07	; 7
      000090 00                    2666 	.db #0x00	; 0
      000091 00                    2667 	.db #0x00	; 0
      000092 00                    2668 	.db #0x00	; 0
      000093 07                    2669 	.db #0x07	; 7
      000094 07                    2670 	.db #0x07	; 7
      000095 07                    2671 	.db #0x07	; 7
      000096 07                    2672 	.db #0x07	; 7
      000097 00                    2673 	.db #0x00	; 0
      000098 00                    2674 	.db #0x00	; 0
      000099 00                    2675 	.db #0x00	; 0
      00009A 03                    2676 	.db #0x03	; 3
      00009B 07                    2677 	.db #0x07	; 7
      00009C 07                    2678 	.db #0x07	; 7
      00009D 07                    2679 	.db #0x07	; 7
      00009E 07                    2680 	.db #0x07	; 7
      00009F 00                    2681 	.db #0x00	; 0
      0000A0 00                    2682 	.db #0x00	; 0
      0000A1 07                    2683 	.db #0x07	; 7
      0000A2 07                    2684 	.db #0x07	; 7
      0000A3 07                    2685 	.db #0x07	; 7
      0000A4 07                    2686 	.db #0x07	; 7
      0000A5 00                    2687 	.db #0x00	; 0
      0000A6 00                    2688 	.db #0x00	; 0
      0000A7 00                    2689 	.db #0x00	; 0
      0000A8 00                    2690 	.db #0x00	; 0
      0000A9 00                    2691 	.db #0x00	; 0
      0000AA 00                    2692 	.db #0x00	; 0
      0000AB 00                    2693 	.db #0x00	; 0
      0000AC 00                    2694 	.db #0x00	; 0
      0000AD 00                    2695 	.db #0x00	; 0
      0000AE 00                    2696 	.db #0x00	; 0
      0000AF 00                    2697 	.db #0x00	; 0
      0000B0                       2698 _over_page:
      0000B0 00                    2699 	.db #0x00	; 0
      0000B1 00                    2700 	.db #0x00	; 0
      0000B2 00                    2701 	.db #0x00	; 0
      0000B3 00                    2702 	.db #0x00	; 0
      0000B4 00                    2703 	.db #0x00	; 0
      0000B5 00                    2704 	.db #0x00	; 0
      0000B6 00                    2705 	.db #0x00	; 0
      0000B7 00                    2706 	.db #0x00	; 0
      0000B8 00                    2707 	.db #0x00	; 0
      0000B9 00                    2708 	.db #0x00	; 0
      0000BA FC                    2709 	.db #0xfc	; 252
      0000BB FE                    2710 	.db #0xfe	; 254
      0000BC FF                    2711 	.db #0xff	; 255
      0000BD 07                    2712 	.db #0x07	; 7
      0000BE 03                    2713 	.db #0x03	; 3
      0000BF 03                    2714 	.db #0x03	; 3
      0000C0 07                    2715 	.db #0x07	; 7
      0000C1 DF                    2716 	.db #0xdf	; 223
      0000C2 FE                    2717 	.db #0xfe	; 254
      0000C3 FE                    2718 	.db #0xfe	; 254
      0000C4 F8                    2719 	.db #0xf8	; 248
      0000C5 03                    2720 	.db #0x03	; 3
      0000C6 0F                    2721 	.db #0x0f	; 15
      0000C7 7F                    2722 	.db #0x7f	; 127
      0000C8 FE                    2723 	.db #0xfe	; 254
      0000C9 F0                    2724 	.db #0xf0	; 240
      0000CA 80                    2725 	.db #0x80	; 128
      0000CB E0                    2726 	.db #0xe0	; 224
      0000CC FC                    2727 	.db #0xfc	; 252
      0000CD FF                    2728 	.db #0xff	; 255
      0000CE 1F                    2729 	.db #0x1f	; 31
      0000CF 07                    2730 	.db #0x07	; 7
      0000D0 00                    2731 	.db #0x00	; 0
      0000D1 00                    2732 	.db #0x00	; 0
      0000D2 FF                    2733 	.db #0xff	; 255
      0000D3 FF                    2734 	.db #0xff	; 255
      0000D4 FF                    2735 	.db #0xff	; 255
      0000D5 33                    2736 	.db #0x33	; 51	'3'
      0000D6 33                    2737 	.db #0x33	; 51	'3'
      0000D7 33                    2738 	.db #0x33	; 51	'3'
      0000D8 33                    2739 	.db #0x33	; 51	'3'
      0000D9 33                    2740 	.db #0x33	; 51	'3'
      0000DA 03                    2741 	.db #0x03	; 3
      0000DB 00                    2742 	.db #0x00	; 0
      0000DC FE                    2743 	.db #0xfe	; 254
      0000DD FF                    2744 	.db #0xff	; 255
      0000DE FF                    2745 	.db #0xff	; 255
      0000DF FF                    2746 	.db #0xff	; 255
      0000E0 73                    2747 	.db #0x73	; 115	's'
      0000E1 F3                    2748 	.db #0xf3	; 243
      0000E2 F7                    2749 	.db #0xf7	; 247
      0000E3 FF                    2750 	.db #0xff	; 255
      0000E4 BF                    2751 	.db #0xbf	; 191
      0000E5 1E                    2752 	.db #0x1e	; 30
      0000E6 00                    2753 	.db #0x00	; 0
      0000E7 00                    2754 	.db #0x00	; 0
      0000E8 00                    2755 	.db #0x00	; 0
      0000E9 00                    2756 	.db #0x00	; 0
      0000EA 00                    2757 	.db #0x00	; 0
      0000EB 00                    2758 	.db #0x00	; 0
      0000EC 00                    2759 	.db #0x00	; 0
      0000ED 00                    2760 	.db #0x00	; 0
      0000EE 00                    2761 	.db #0x00	; 0
      0000EF 00                    2762 	.db #0x00	; 0
      0000F0 00                    2763 	.db #0x00	; 0
      0000F1 00                    2764 	.db #0x00	; 0
      0000F2 00                    2765 	.db #0x00	; 0
      0000F3 00                    2766 	.db #0x00	; 0
      0000F4 00                    2767 	.db #0x00	; 0
      0000F5 00                    2768 	.db #0x00	; 0
      0000F6 00                    2769 	.db #0x00	; 0
      0000F7 00                    2770 	.db #0x00	; 0
      0000F8 00                    2771 	.db #0x00	; 0
      0000F9 00                    2772 	.db #0x00	; 0
      0000FA 01                    2773 	.db #0x01	; 1
      0000FB 03                    2774 	.db #0x03	; 3
      0000FC 07                    2775 	.db #0x07	; 7
      0000FD 07                    2776 	.db #0x07	; 7
      0000FE 07                    2777 	.db #0x07	; 7
      0000FF 07                    2778 	.db #0x07	; 7
      000100 07                    2779 	.db #0x07	; 7
      000101 07                    2780 	.db #0x07	; 7
      000102 03                    2781 	.db #0x03	; 3
      000103 01                    2782 	.db #0x01	; 1
      000104 00                    2783 	.db #0x00	; 0
      000105 00                    2784 	.db #0x00	; 0
      000106 00                    2785 	.db #0x00	; 0
      000107 00                    2786 	.db #0x00	; 0
      000108 03                    2787 	.db #0x03	; 3
      000109 07                    2788 	.db #0x07	; 7
      00010A 07                    2789 	.db #0x07	; 7
      00010B 07                    2790 	.db #0x07	; 7
      00010C 07                    2791 	.db #0x07	; 7
      00010D 00                    2792 	.db #0x00	; 0
      00010E 00                    2793 	.db #0x00	; 0
      00010F 00                    2794 	.db #0x00	; 0
      000110 00                    2795 	.db #0x00	; 0
      000111 00                    2796 	.db #0x00	; 0
      000112 07                    2797 	.db #0x07	; 7
      000113 07                    2798 	.db #0x07	; 7
      000114 07                    2799 	.db #0x07	; 7
      000115 07                    2800 	.db #0x07	; 7
      000116 07                    2801 	.db #0x07	; 7
      000117 07                    2802 	.db #0x07	; 7
      000118 07                    2803 	.db #0x07	; 7
      000119 07                    2804 	.db #0x07	; 7
      00011A 07                    2805 	.db #0x07	; 7
      00011B 00                    2806 	.db #0x00	; 0
      00011C 03                    2807 	.db #0x03	; 3
      00011D 07                    2808 	.db #0x07	; 7
      00011E 07                    2809 	.db #0x07	; 7
      00011F 07                    2810 	.db #0x07	; 7
      000120 00                    2811 	.db #0x00	; 0
      000121 00                    2812 	.db #0x00	; 0
      000122 01                    2813 	.db #0x01	; 1
      000123 07                    2814 	.db #0x07	; 7
      000124 07                    2815 	.db #0x07	; 7
      000125 07                    2816 	.db #0x07	; 7
      000126 04                    2817 	.db #0x04	; 4
      000127 00                    2818 	.db #0x00	; 0
      000128 00                    2819 	.db #0x00	; 0
      000129 00                    2820 	.db #0x00	; 0
      00012A 00                    2821 	.db #0x00	; 0
      00012B 00                    2822 	.db #0x00	; 0
      00012C 00                    2823 	.db #0x00	; 0
      00012D 00                    2824 	.db #0x00	; 0
      00012E 00                    2825 	.db #0x00	; 0
      00012F 00                    2826 	.db #0x00	; 0
                                   2827 	.area CONST   (CODE)
      000130                       2828 ___str_0:
      000130 53 20                 2829 	.ascii "S "
      000132 00                    2830 	.db 0x00
                                   2831 	.area CSEG    (CODE)
                                   2832 	.area CONST   (CODE)
      000133                       2833 ___str_1:
      000133 41 20                 2834 	.ascii "A "
      000135 00                    2835 	.db 0x00
                                   2836 	.area CSEG    (CODE)
      000C62                       2837 _sine_table:
      000C62 00 00 00 00           2838 	.byte #0x00, #0x00, #0x00, #0x00	;  0.000000e+00
      000C66 33 C4 31 3E           2839 	.byte #0x33, #0xc4, #0x31, #0x3e	;  1.736000e-01
      000C6A A0 1A AF 3E           2840 	.byte #0xa0, #0x1a, #0xaf, #0x3e	;  3.420000e-01
      000C6E 00 00 00 3F           2841 	.byte #0x00, #0x00, #0x00, #0x3f	;  5.000000e-01
      000C72 8A 8E 24 3F           2842 	.byte #0x8a, #0x8e, #0x24, #0x3f	;  6.428000e-01
      000C76 93 18 44 3F           2843 	.byte #0x93, #0x18, #0x44, #0x3f	;  7.660000e-01
      000C7A 2D B2 5D 3F           2844 	.byte #0x2d, #0xb2, #0x5d, #0x3f	;  8.660000e-01
      000C7E 2E 90 70 3F           2845 	.byte #0x2e, #0x90, #0x70, #0x3f	;  9.397000e-01
      000C82 DA 1B 7C 3F           2846 	.byte #0xda, #0x1b, #0x7c, #0x3f	;  9.848000e-01
      000C86 00 00 80 3F           2847 	.byte #0x00, #0x00, #0x80, #0x3f	;  1.000000e+00
                                   2848 	.area CONST   (CODE)
      000136                       2849 ___str_2:
      000136 20 20 20              2850 	.ascii "   "
      000139 00                    2851 	.db 0x00
                                   2852 	.area CSEG    (CODE)
                                   2853 	.area CONST   (CODE)
      00013A                       2854 ___str_3:
      00013A 20                    2855 	.ascii " "
      00013B 00                    2856 	.db 0x00
                                   2857 	.area CSEG    (CODE)
                                   2858 	.area XINIT   (CODE)
                                   2859 	.area CABS    (ABS,CODE)
